                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14228 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module general
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _draw_number_sprite
                                     12 	.globl _draw_text
                                     13 	.globl _convert_char_to_tile
                                     14 	.globl _read_buttons
                                     15 	.globl _init_clear_screen
                                     16 	.globl _init_screen
                                     17 	.globl _init_font
                                     18 	.globl _set_sprite_palette
                                     19 	.globl _set_bkg_palette
                                     20 	.globl _strlen
                                     21 	.globl _font_set
                                     22 	.globl _font_load
                                     23 	.globl _font_init
                                     24 	.globl _sprintf
                                     25 	.globl _set_sprite_data
                                     26 	.globl _set_win_tile_xy
                                     27 	.globl _get_win_xy_addr
                                     28 	.globl _set_bkg_tiles
                                     29 	.globl _set_vram_byte
                                     30 	.globl _joypad
                                     31 ;--------------------------------------------------------
                                     32 ; special function registers
                                     33 ;--------------------------------------------------------
                                     34 ;--------------------------------------------------------
                                     35 ; ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area _DATA
                                     38 ;--------------------------------------------------------
                                     39 ; ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area _INITIALIZED
                                     42 ;--------------------------------------------------------
                                     43 ; absolute external ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area _DABS (ABS)
                                     46 ;--------------------------------------------------------
                                     47 ; global & static initialisations
                                     48 ;--------------------------------------------------------
                                     49 	.area _HOME
                                     50 	.area _GSINIT
                                     51 	.area _GSFINAL
                                     52 	.area _GSINIT
                                     53 ;--------------------------------------------------------
                                     54 ; Home
                                     55 ;--------------------------------------------------------
                                     56 	.area _HOME
                                     57 	.area _HOME
                                     58 ;--------------------------------------------------------
                                     59 ; code
                                     60 ;--------------------------------------------------------
                                     61 	.area _CODE
                                     62 ;src/general.c:13: void init_font(void){
                                     63 ;	---------------------------------
                                     64 ; Function init_font
                                     65 ; ---------------------------------
      000000                         66 _init_font::
                                     67 ;src/general.c:15: font_init();
      000000 CDr00r00         [24]   68 	call	_font_init
                                     69 ;src/general.c:16: min_font = font_load(font_ibm);
      000003 11r00r00         [12]   70 	ld	de, #_font_ibm
      000006 D5               [16]   71 	push	de
      000007 CDr00r00         [24]   72 	call	_font_load
      00000A E1               [12]   73 	pop	hl
                                     74 ;src/general.c:17: font_set(min_font);
      00000B D5               [16]   75 	push	de
      00000C CDr00r00         [24]   76 	call	_font_set
      00000F E1               [12]   77 	pop	hl
                                     78 ;src/general.c:18: }
      000010 C9               [16]   79 	ret
                                     80 ;src/general.c:20: void init_screen(void){
                                     81 ;	---------------------------------
                                     82 ; Function init_screen
                                     83 ; ---------------------------------
      000011                         84 _init_screen::
                                     85 ;src/general.c:21: SHOW_BKG;
      000011 F0r00            [12]   86 	ldh	a, (_LCDC_REG + 0)
      000013 F6 01            [ 8]   87 	or	a, #0x01
      000015 E0r00            [12]   88 	ldh	(_LCDC_REG + 0), a
                                     89 ;src/general.c:22: SHOW_WIN;
      000017 F0r00            [12]   90 	ldh	a, (_LCDC_REG + 0)
      000019 F6 20            [ 8]   91 	or	a, #0x20
      00001B E0r00            [12]   92 	ldh	(_LCDC_REG + 0), a
                                     93 ;src/general.c:23: SHOW_SPRITES;
      00001D F0r00            [12]   94 	ldh	a, (_LCDC_REG + 0)
      00001F F6 02            [ 8]   95 	or	a, #0x02
      000021 E0r00            [12]   96 	ldh	(_LCDC_REG + 0), a
                                     97 ;src/general.c:24: DISPLAY_ON;
      000023 F0r00            [12]   98 	ldh	a, (_LCDC_REG + 0)
      000025 F6 80            [ 8]   99 	or	a, #0x80
      000027 E0r00            [12]  100 	ldh	(_LCDC_REG + 0), a
                                    101 ;src/general.c:25: }
      000029 C9               [16]  102 	ret
                                    103 ;src/general.c:27: void init_clear_screen(void) {
                                    104 ;	---------------------------------
                                    105 ; Function init_clear_screen
                                    106 ; ---------------------------------
      00002A                        107 _init_clear_screen::
      00002A 21 00 F0         [12]  108 	ld	hl, #-4096
      00002D 39               [ 8]  109 	add	hl, sp
      00002E F9               [ 8]  110 	ld	sp, hl
                                    111 ;src/general.c:30: for (uint16_t i = 0; i < 2048; i++){
      00002F F8 00            [12]  112 	ldhl	sp,	#0
      000031 4D               [ 4]  113 	ld	c, l
      000032 44               [ 4]  114 	ld	b, h
      000033 11 00 00         [12]  115 	ld	de, #0x0000
      000036                        116 00107$:
                                    117 ;	spillPairReg hl
                                    118 ;	spillPairReg hl
                                    119 ;	spillPairReg hl
                                    120 ;	spillPairReg hl
      000036 7A               [ 4]  121 	ld	a, d
      000037 D6 08            [ 8]  122 	sub	a, #0x08
      000039 30 0A            [12]  123 	jr	NC, 00101$
                                    124 ;src/general.c:31: temparray[i] = 0;
      00003B 6B               [ 4]  125 	ld	l, e
      00003C 62               [ 4]  126 	ld	h, d
      00003D 29               [ 8]  127 	add	hl, hl
      00003E 09               [ 8]  128 	add	hl, bc
      00003F AF               [ 4]  129 	xor	a, a
      000040 22               [ 8]  130 	ld	(hl+), a
      000041 77               [ 8]  131 	ld	(hl), a
                                    132 ;src/general.c:30: for (uint16_t i = 0; i < 2048; i++){
      000042 13               [ 8]  133 	inc	de
      000043 18 F1            [12]  134 	jr	00107$
      000045                        135 00101$:
                                    136 ;src/general.c:33: VBK_REG = 1;
      000045 3E 01            [ 8]  137 	ld	a, #0x01
      000047 E0r00            [12]  138 	ldh	(_VBK_REG + 0), a
                                    139 ;src/general.c:34: set_bkg_tiles(0,0,20, 18, temparray);
      000049 C5               [16]  140 	push	bc
      00004A 21 14 12         [12]  141 	ld	hl, #0x1214
      00004D E5               [16]  142 	push	hl
      00004E AF               [ 4]  143 	xor	a, a
      00004F 0F               [ 4]  144 	rrca
      000050 F5               [16]  145 	push	af
      000051 CDr00r00         [24]  146 	call	_set_bkg_tiles
      000054 E8 06            [16]  147 	add	sp, #6
                                    148 ;src/general.c:35: VBK_REG = 0;
      000056 AF               [ 4]  149 	xor	a, a
      000057 E0r00            [12]  150 	ldh	(_VBK_REG + 0), a
                                    151 ;src/general.c:38: for (uint8_t i = 0; i < 8; i++) {
      000059 16 00            [ 8]  152 	ld	d, #0x00
      00005B                        153 00110$:
      00005B 7A               [ 4]  154 	ld	a, d
      00005C D6 08            [ 8]  155 	sub	a, #0x08
      00005E 30 27            [12]  156 	jr	NC, 00102$
                                    157 ;src/general.c:39: set_sprite_palette(i, 1, palette_default);
      000060 C5               [16]  158 	push	bc
      000061 D5               [16]  159 	push	de
      000062 21r00r00         [12]  160 	ld	hl, #_palette_default
      000065 E5               [16]  161 	push	hl
      000066 3E 01            [ 8]  162 	ld	a, #0x01
      000068 F5               [16]  163 	push	af
      000069 33               [ 8]  164 	inc	sp
      00006A D5               [16]  165 	push	de
      00006B 33               [ 8]  166 	inc	sp
      00006C CDr00r00         [24]  167 	call	_set_sprite_palette
      00006F E8 04            [16]  168 	add	sp, #4
      000071 D1               [12]  169 	pop	de
      000072 D5               [16]  170 	push	de
      000073 21r00r00         [12]  171 	ld	hl, #_palette_default
      000076 E5               [16]  172 	push	hl
      000077 3E 01            [ 8]  173 	ld	a, #0x01
      000079 F5               [16]  174 	push	af
      00007A 33               [ 8]  175 	inc	sp
      00007B D5               [16]  176 	push	de
      00007C 33               [ 8]  177 	inc	sp
      00007D CDr00r00         [24]  178 	call	_set_bkg_palette
      000080 E8 04            [16]  179 	add	sp, #4
      000082 D1               [12]  180 	pop	de
      000083 C1               [12]  181 	pop	bc
                                    182 ;src/general.c:38: for (uint8_t i = 0; i < 8; i++) {
      000084 14               [ 4]  183 	inc	d
      000085 18 D4            [12]  184 	jr	00110$
      000087                        185 00102$:
                                    186 ;src/general.c:44: set_sprite_data(0, 128, temparray);
      000087 C5               [16]  187 	push	bc
      000088 21 00 80         [12]  188 	ld	hl, #0x8000
      00008B E5               [16]  189 	push	hl
      00008C CDr00r00         [24]  190 	call	_set_sprite_data
      00008F E8 04            [16]  191 	add	sp, #4
                                    192 ;src/general.c:47: for (uint8_t i = 0; i < 40; i++) {
      000091 0E 00            [ 8]  193 	ld	c, #0x00
      000093                        194 00113$:
      000093 79               [ 4]  195 	ld	a, c
      000094 D6 28            [ 8]  196 	sub	a, #0x28
      000096 30 17            [12]  197 	jr	NC, 00115$
                                    198 ;/usr/local/opt/gbdk/include/gb/gb.h:1804: shadow_OAM[nb].tile=tile;
      000098 69               [ 4]  199 	ld	l, c
                                    200 ;	spillPairReg hl
                                    201 ;	spillPairReg hl
      000099 26 00            [ 8]  202 	ld	h, #0x00
                                    203 ;	spillPairReg hl
                                    204 ;	spillPairReg hl
      00009B 29               [ 8]  205 	add	hl, hl
      00009C 29               [ 8]  206 	add	hl, hl
      00009D 5D               [ 4]  207 	ld	e, l
      00009E 54               [ 4]  208 	ld	d, h
      00009F 21r01r00         [12]  209 	ld	hl,#_shadow_OAM + 1
      0000A2 19               [ 8]  210 	add	hl,de
      0000A3 23               [ 8]  211 	inc	hl
      0000A4 36 00            [12]  212 	ld	(hl), #0x00
                                    213 ;/usr/local/opt/gbdk/include/gb/gb.h:1905: shadow_OAM[nb].y = 0;
      0000A6 21r00r00         [12]  214 	ld	hl, #_shadow_OAM
      0000A9 19               [ 8]  215 	add	hl, de
      0000AA 36 00            [12]  216 	ld	(hl), #0x00
                                    217 ;src/general.c:47: for (uint8_t i = 0; i < 40; i++) {
      0000AC 0C               [ 4]  218 	inc	c
      0000AD 18 E4            [12]  219 	jr	00113$
      0000AF                        220 00115$:
                                    221 ;src/general.c:51: }
      0000AF 21 00 10         [12]  222 	ld	hl, #4096
      0000B2 39               [ 8]  223 	add	hl, sp
      0000B3 F9               [ 8]  224 	ld	sp, hl
      0000B4 C9               [16]  225 	ret
                                    226 ;src/general.c:53: void read_buttons(void) {
                                    227 ;	---------------------------------
                                    228 ; Function read_buttons
                                    229 ; ---------------------------------
      0000B5                        230 _read_buttons::
                                    231 ;src/general.c:54: buttons = joypad(); // Read current gamepad state
      0000B5 CDr00r00         [24]  232 	call	_joypad
      0000B8 EAr00r00         [16]  233 	ld	(#_buttons),a
                                    234 ;src/general.c:55: }
      0000BB C9               [16]  235 	ret
                                    236 ;src/general.c:57: unsigned char convert_char_to_tile(char c) {
                                    237 ;	---------------------------------
                                    238 ; Function convert_char_to_tile
                                    239 ; ---------------------------------
      0000BC                        240 _convert_char_to_tile::
                                    241 ;src/general.c:58: if (c >= 'A' && c <= 'Z') return LETTERSTART + (c - 'A');
      0000BC 4F               [ 4]  242 	ld	c, a
      0000BD EE 80            [ 8]  243 	xor	a, #0x80
      0000BF D6 C1            [ 8]  244 	sub	a, #0xc1
      0000C1 38 1B            [12]  245 	jr	C, 00102$
      0000C3 59               [ 4]  246 	ld	e, c
      0000C4 3E 5A            [ 8]  247 	ld	a,#0x5a
      0000C6 57               [ 4]  248 	ld	d,a
      0000C7 91               [ 4]  249 	sub	a, c
      0000C8 CB 7B            [ 8]  250 	bit	7, e
      0000CA 28 07            [12]  251 	jr	Z, 00236$
      0000CC CB 7A            [ 8]  252 	bit	7, d
      0000CE 20 08            [12]  253 	jr	NZ, 00237$
      0000D0 BF               [ 4]  254 	cp	a, a
      0000D1 18 05            [12]  255 	jr	00237$
      0000D3                        256 00236$:
      0000D3 CB 7A            [ 8]  257 	bit	7, d
      0000D5 28 01            [12]  258 	jr	Z, 00237$
      0000D7 37               [ 4]  259 	scf
      0000D8                        260 00237$:
      0000D8 38 04            [12]  261 	jr	C, 00102$
      0000DA 79               [ 4]  262 	ld	a, c
      0000DB C6 E0            [ 8]  263 	add	a, #0xe0
      0000DD C9               [16]  264 	ret
      0000DE                        265 00102$:
                                    266 ;src/general.c:59: if (c >= 'a' && c <= 'z') return SLETTERSTART + (c - 'a');
      0000DE 79               [ 4]  267 	ld	a, c
      0000DF EE 80            [ 8]  268 	xor	a, #0x80
      0000E1 D6 E1            [ 8]  269 	sub	a, #0xe1
      0000E3 38 1B            [12]  270 	jr	C, 00105$
      0000E5 59               [ 4]  271 	ld	e, c
      0000E6 3E 7A            [ 8]  272 	ld	a,#0x7a
      0000E8 57               [ 4]  273 	ld	d,a
      0000E9 91               [ 4]  274 	sub	a, c
      0000EA CB 7B            [ 8]  275 	bit	7, e
      0000EC 28 07            [12]  276 	jr	Z, 00238$
      0000EE CB 7A            [ 8]  277 	bit	7, d
      0000F0 20 08            [12]  278 	jr	NZ, 00239$
      0000F2 BF               [ 4]  279 	cp	a, a
      0000F3 18 05            [12]  280 	jr	00239$
      0000F5                        281 00238$:
      0000F5 CB 7A            [ 8]  282 	bit	7, d
      0000F7 28 01            [12]  283 	jr	Z, 00239$
      0000F9 37               [ 4]  284 	scf
      0000FA                        285 00239$:
      0000FA 38 04            [12]  286 	jr	C, 00105$
      0000FC 79               [ 4]  287 	ld	a, c
      0000FD C6 E0            [ 8]  288 	add	a, #0xe0
      0000FF C9               [16]  289 	ret
      000100                        290 00105$:
                                    291 ;src/general.c:60: if (c >= '0' && c <= '9') return NUMSTART + (c - '0');
      000100 79               [ 4]  292 	ld	a, c
      000101 EE 80            [ 8]  293 	xor	a, #0x80
      000103 D6 B0            [ 8]  294 	sub	a, #0xb0
      000105 38 1B            [12]  295 	jr	C, 00108$
      000107 59               [ 4]  296 	ld	e, c
      000108 3E 39            [ 8]  297 	ld	a,#0x39
      00010A 57               [ 4]  298 	ld	d,a
      00010B 91               [ 4]  299 	sub	a, c
      00010C CB 7B            [ 8]  300 	bit	7, e
      00010E 28 07            [12]  301 	jr	Z, 00240$
      000110 CB 7A            [ 8]  302 	bit	7, d
      000112 20 08            [12]  303 	jr	NZ, 00241$
      000114 BF               [ 4]  304 	cp	a, a
      000115 18 05            [12]  305 	jr	00241$
      000117                        306 00240$:
      000117 CB 7A            [ 8]  307 	bit	7, d
      000119 28 01            [12]  308 	jr	Z, 00241$
      00011B 37               [ 4]  309 	scf
      00011C                        310 00241$:
      00011C 38 04            [12]  311 	jr	C, 00108$
      00011E 79               [ 4]  312 	ld	a, c
      00011F C6 E0            [ 8]  313 	add	a, #0xe0
      000121 C9               [16]  314 	ret
      000122                        315 00108$:
                                    316 ;src/general.c:61: switch (c) {
      000122 79               [ 4]  317 	ld	a,c
      000123 FE 20            [ 8]  318 	cp	a,#0x20
      000125 28 41            [12]  319 	jr	Z, 00119$
      000127 FE 21            [ 8]  320 	cp	a,#0x21
      000129 28 3A            [12]  321 	jr	Z, 00118$
      00012B FE 24            [ 8]  322 	cp	a,#0x24
      00012D 28 30            [12]  323 	jr	Z, 00116$
      00012F FE 26            [ 8]  324 	cp	a,#0x26
      000131 28 2F            [12]  325 	jr	Z, 00117$
      000133 FE 2A            [ 8]  326 	cp	a,#0x2a
      000135 28 22            [12]  327 	jr	Z, 00114$
      000137 FE 2D            [ 8]  328 	cp	a,#0x2d
      000139 28 18            [12]  329 	jr	Z, 00112$
      00013B FE 2E            [ 8]  330 	cp	a,#0x2e
      00013D 28 11            [12]  331 	jr	Z, 00111$
      00013F FE 2F            [ 8]  332 	cp	a,#0x2f
      000141 28 0A            [12]  333 	jr	Z, 00110$
      000143 FE 3D            [ 8]  334 	cp	a,#0x3d
      000145 28 0F            [12]  335 	jr	Z, 00113$
      000147 D6 3F            [ 8]  336 	sub	a, #0x3f
      000149 28 11            [12]  337 	jr	Z, 00115$
      00014B 18 1D            [12]  338 	jr	00120$
                                    339 ;src/general.c:62: case '/': return 15;
      00014D                        340 00110$:
      00014D 3E 0F            [ 8]  341 	ld	a, #0x0f
      00014F C9               [16]  342 	ret
                                    343 ;src/general.c:63: case '.': return 14;
      000150                        344 00111$:
      000150 3E 0E            [ 8]  345 	ld	a, #0x0e
      000152 C9               [16]  346 	ret
                                    347 ;src/general.c:64: case '-': return 13;
      000153                        348 00112$:
      000153 3E 0D            [ 8]  349 	ld	a, #0x0d
      000155 C9               [16]  350 	ret
                                    351 ;src/general.c:65: case '=': return 38;
      000156                        352 00113$:
      000156 3E 26            [ 8]  353 	ld	a, #0x26
      000158 C9               [16]  354 	ret
                                    355 ;src/general.c:66: case '*': return 39;
      000159                        356 00114$:
      000159 3E 27            [ 8]  357 	ld	a, #0x27
      00015B C9               [16]  358 	ret
                                    359 ;src/general.c:67: case '?': return 31;
      00015C                        360 00115$:
      00015C 3E 1F            [ 8]  361 	ld	a, #0x1f
      00015E C9               [16]  362 	ret
                                    363 ;src/general.c:68: case '$': return 4;
      00015F                        364 00116$:
      00015F 3E 04            [ 8]  365 	ld	a, #0x04
      000161 C9               [16]  366 	ret
                                    367 ;src/general.c:69: case '&': return 5;
      000162                        368 00117$:
      000162 3E 05            [ 8]  369 	ld	a, #0x05
      000164 C9               [16]  370 	ret
                                    371 ;src/general.c:70: case '!': return 1;
      000165                        372 00118$:
      000165 3E 01            [ 8]  373 	ld	a, #0x01
      000167 C9               [16]  374 	ret
                                    375 ;src/general.c:71: case ' ': return 0;
      000168                        376 00119$:
      000168 AF               [ 4]  377 	xor	a, a
      000169 C9               [16]  378 	ret
                                    379 ;src/general.c:72: default: return 0;  // Default to space if character is not handled
      00016A                        380 00120$:
      00016A AF               [ 4]  381 	xor	a, a
                                    382 ;src/general.c:73: }
                                    383 ;src/general.c:74: }
      00016B C9               [16]  384 	ret
                                    385 ;src/general.c:76: void draw_text(uint8_t x, uint8_t y, const char *text, uint8_t length, BOOLEAN left_aligned, unsigned char palette) {
                                    386 ;	---------------------------------
                                    387 ; Function draw_text
                                    388 ; ---------------------------------
      00016C                        389 _draw_text::
      00016C E8 F2            [16]  390 	add	sp, #-14
      00016E F8 0A            [12]  391 	ldhl	sp,	#10
      000170 32               [ 8]  392 	ld	(hl-), a
      000171 73               [ 8]  393 	ld	(hl), e
                                    394 ;src/general.c:77: uint8_t textLength = strlen(text);
      000172 F8 10            [12]  395 	ldhl	sp,	#16
      000174 2A               [ 8]  396 	ld	a, (hl+)
      000175 5F               [ 4]  397 	ld	e, a
      000176 56               [ 8]  398 	ld	d, (hl)
      000177 D5               [16]  399 	push	de
      000178 CDr00r00         [24]  400 	call	_strlen
      00017B E1               [12]  401 	pop	hl
      00017C F8 02            [12]  402 	ldhl	sp,	#2
      00017E 73               [ 8]  403 	ld	(hl), e
                                    404 ;src/general.c:78: uint8_t *vramAddr = get_win_xy_addr(x, y);
      00017F F8 09            [12]  405 	ldhl	sp,	#9
      000181 2A               [ 8]  406 	ld	a, (hl+)
      000182 57               [ 4]  407 	ld	d, a
      000183 5E               [ 8]  408 	ld	e, (hl)
      000184 D5               [16]  409 	push	de
      000185 CDr00r00         [24]  410 	call	_get_win_xy_addr
      000188 E1               [12]  411 	pop	hl
      000189 F8 0B            [12]  412 	ldhl	sp,	#11
      00018B 7B               [ 4]  413 	ld	a, e
      00018C 22               [ 8]  414 	ld	(hl+), a
      00018D 72               [ 8]  415 	ld	(hl), d
                                    416 ;src/general.c:80: if (textLength > length) {
      00018E F8 12            [12]  417 	ldhl	sp,	#18
      000190 7E               [ 8]  418 	ld	a, (hl)
      000191 F8 02            [12]  419 	ldhl	sp,	#2
      000193 96               [ 8]  420 	sub	a, (hl)
      000194 30 06            [12]  421 	jr	NC, 00102$
                                    422 ;src/general.c:81: textLength = length;  // Cap the text length at the defined maximum
      000196 F8 12            [12]  423 	ldhl	sp,	#18
      000198 7E               [ 8]  424 	ld	a, (hl)
      000199 F8 02            [12]  425 	ldhl	sp,	#2
      00019B 77               [ 8]  426 	ld	(hl), a
      00019C                        427 00102$:
                                    428 ;src/general.c:87: vramAddr += length - textLength;
      00019C F8 12            [12]  429 	ldhl	sp,	#18
      00019E 7E               [ 8]  430 	ld	a, (hl)
      00019F F8 03            [12]  431 	ldhl	sp,	#3
      0001A1 22               [ 8]  432 	ld	(hl+), a
      0001A2 AF               [ 4]  433 	xor	a, a
      0001A3 32               [ 8]  434 	ld	(hl-), a
      0001A4 2B               [ 8]  435 	dec	hl
      0001A5 7E               [ 8]  436 	ld	a, (hl)
      0001A6 F8 07            [12]  437 	ldhl	sp,	#7
      0001A8 22               [ 8]  438 	ld	(hl+), a
      0001A9 36 00            [12]  439 	ld	(hl), #0x00
      0001AB F8 03            [12]  440 	ldhl	sp,#3
      0001AD 2A               [ 8]  441 	ld	a, (hl+)
      0001AE 5F               [ 4]  442 	ld	e, a
      0001AF 56               [ 8]  443 	ld	d, (hl)
      0001B0 F8 07            [12]  444 	ldhl	sp,	#7
      0001B2 2A               [ 8]  445 	ld	a,	(hl+)
      0001B3 66               [ 8]  446 	ld	h, (hl)
      0001B4 6F               [ 4]  447 	ld	l, a
      0001B5 7B               [ 4]  448 	ld	a, e
      0001B6 95               [ 4]  449 	sub	a, l
      0001B7 5F               [ 4]  450 	ld	e, a
      0001B8 7A               [ 4]  451 	ld	a, d
      0001B9 9C               [ 4]  452 	sbc	a, h
      0001BA F8 06            [12]  453 	ldhl	sp,	#6
      0001BC 32               [ 8]  454 	ld	(hl-), a
      0001BD 73               [ 8]  455 	ld	(hl), e
                                    456 ;src/general.c:85: if (!left_aligned) {
      0001BE F8 13            [12]  457 	ldhl	sp,	#19
      0001C0 7E               [ 8]  458 	ld	a, (hl)
      0001C1 B7               [ 4]  459 	or	a, a
      0001C2 20 1F            [12]  460 	jr	NZ, 00104$
                                    461 ;src/general.c:87: vramAddr += length - textLength;
      0001C4 F8 05            [12]  462 	ldhl	sp,#5
      0001C6 2A               [ 8]  463 	ld	a, (hl+)
      0001C7 5F               [ 4]  464 	ld	e, a
      0001C8 56               [ 8]  465 	ld	d, (hl)
      0001C9 F8 0B            [12]  466 	ldhl	sp,	#11
      0001CB 2A               [ 8]  467 	ld	a,	(hl+)
      0001CC 66               [ 8]  468 	ld	h, (hl)
      0001CD 6F               [ 4]  469 	ld	l, a
      0001CE 19               [ 8]  470 	add	hl, de
      0001CF E5               [16]  471 	push	hl
      0001D0 7D               [ 4]  472 	ld	a, l
      0001D1 F8 0D            [12]  473 	ldhl	sp,	#13
      0001D3 77               [ 8]  474 	ld	(hl), a
      0001D4 E1               [12]  475 	pop	hl
      0001D5 7C               [ 4]  476 	ld	a, h
      0001D6 F8 0C            [12]  477 	ldhl	sp,	#12
      0001D8 77               [ 8]  478 	ld	(hl), a
                                    479 ;src/general.c:88: x += length - textLength;
      0001D9 F8 12            [12]  480 	ldhl	sp,	#18
      0001DB 7E               [ 8]  481 	ld	a, (hl)
      0001DC F8 02            [12]  482 	ldhl	sp,	#2
      0001DE 96               [ 8]  483 	sub	a, (hl)
      0001DF F8 0A            [12]  484 	ldhl	sp,	#10
      0001E1 86               [ 8]  485 	add	a, (hl)
      0001E2 77               [ 8]  486 	ld	(hl), a
      0001E3                        487 00104$:
                                    488 ;src/general.c:92: if (!left_aligned) {
      0001E3 F8 13            [12]  489 	ldhl	sp,	#19
      0001E5 7E               [ 8]  490 	ld	a, (hl)
      0001E6 B7               [ 4]  491 	or	a, a
      0001E7 C2r6Er02         [16]  492 	jp	NZ, 00129$
                                    493 ;src/general.c:93: for (uint8_t i = 0; i < length - textLength; i++) {
      0001EA F8 0A            [12]  494 	ldhl	sp,	#10
      0001EC 7E               [ 8]  495 	ld	a, (hl)
      0001ED F8 12            [12]  496 	ldhl	sp,	#18
      0001EF 96               [ 8]  497 	sub	a, (hl)
      0001F0 F8 02            [12]  498 	ldhl	sp,	#2
      0001F2 86               [ 8]  499 	add	a, (hl)
      0001F3 F8 07            [12]  500 	ldhl	sp,	#7
      0001F5 77               [ 8]  501 	ld	(hl), a
      0001F6 F8 0D            [12]  502 	ldhl	sp,	#13
      0001F8 36 00            [12]  503 	ld	(hl), #0x00
      0001FA                        504 00113$:
      0001FA F8 0D            [12]  505 	ldhl	sp,	#13
      0001FC 7E               [ 8]  506 	ld	a, (hl)
      0001FD F8 00            [12]  507 	ldhl	sp,	#0
      0001FF 22               [ 8]  508 	ld	(hl+), a
      000200 36 00            [12]  509 	ld	(hl), #0x00
      000202 F8 00            [12]  510 	ldhl	sp,	#0
      000204 5D               [ 4]  511 	ld	e, l
      000205 54               [ 4]  512 	ld	d, h
      000206 F8 05            [12]  513 	ldhl	sp,	#5
      000208 1A               [ 8]  514 	ld	a, (de)
      000209 13               [ 8]  515 	inc	de
      00020A 96               [ 8]  516 	sub	a, (hl)
      00020B 23               [ 8]  517 	inc	hl
      00020C 1A               [ 8]  518 	ld	a, (de)
      00020D 9E               [ 8]  519 	sbc	a, (hl)
      00020E 1A               [ 8]  520 	ld	a, (de)
      00020F 57               [ 4]  521 	ld	d, a
      000210 5E               [ 8]  522 	ld	e, (hl)
      000211 CB 7B            [ 8]  523 	bit	7, e
      000213 28 07            [12]  524 	jr	Z, 00196$
      000215 CB 7A            [ 8]  525 	bit	7, d
      000217 20 08            [12]  526 	jr	NZ, 00197$
      000219 BF               [ 4]  527 	cp	a, a
      00021A 18 05            [12]  528 	jr	00197$
      00021C                        529 00196$:
      00021C CB 7A            [ 8]  530 	bit	7, d
      00021E 28 01            [12]  531 	jr	Z, 00197$
      000220 37               [ 4]  532 	scf
      000221                        533 00197$:
      000221 30 4B            [12]  534 	jr	NC, 00129$
                                    535 ;src/general.c:94: set_win_tile_xy(x - length + textLength + i, y, palette);
      000223 F8 07            [12]  536 	ldhl	sp,	#7
      000225 7E               [ 8]  537 	ld	a, (hl)
      000226 F8 0D            [12]  538 	ldhl	sp,	#13
      000228 86               [ 8]  539 	add	a, (hl)
      000229 F8 14            [12]  540 	ldhl	sp,	#20
      00022B 66               [ 8]  541 	ld	h, (hl)
                                    542 ;	spillPairReg hl
                                    543 ;	spillPairReg hl
      00022C E5               [16]  544 	push	hl
      00022D 33               [ 8]  545 	inc	sp
      00022E F8 0A            [12]  546 	ldhl	sp,	#10
      000230 66               [ 8]  547 	ld	h, (hl)
                                    548 ;	spillPairReg hl
                                    549 ;	spillPairReg hl
      000231 E5               [16]  550 	push	hl
      000232 33               [ 8]  551 	inc	sp
      000233 F5               [16]  552 	push	af
      000234 33               [ 8]  553 	inc	sp
      000235 CDr00r00         [24]  554 	call	_set_win_tile_xy
      000238 E8 03            [16]  555 	add	sp, #3
                                    556 ;src/general.c:95: set_vram_byte(vramAddr - length + textLength + i, convert_char_to_tile(' '));  // Assuming tile 0 is a space or zero
      00023A 3E 20            [ 8]  557 	ld	a, #0x20
      00023C CDrBCr00         [24]  558 	call	_convert_char_to_tile
      00023F F8 08            [12]  559 	ldhl	sp,	#8
      000241 77               [ 8]  560 	ld	(hl), a
      000242 F8 0B            [12]  561 	ldhl	sp,#11
      000244 2A               [ 8]  562 	ld	a, (hl+)
      000245 5F               [ 4]  563 	ld	e, a
      000246 56               [ 8]  564 	ld	d, (hl)
      000247 F8 03            [12]  565 	ldhl	sp,	#3
      000249 2A               [ 8]  566 	ld	a,	(hl+)
      00024A 66               [ 8]  567 	ld	h, (hl)
      00024B 6F               [ 4]  568 	ld	l, a
      00024C 7B               [ 4]  569 	ld	a, e
      00024D 95               [ 4]  570 	sub	a, l
      00024E 5F               [ 4]  571 	ld	e, a
      00024F 7A               [ 4]  572 	ld	a, d
      000250 9C               [ 4]  573 	sbc	a, h
      000251 47               [ 4]  574 	ld	b, a
      000252 4B               [ 4]  575 	ld	c, e
      000253 F8 02            [12]  576 	ldhl	sp,	#2
      000255 6E               [ 8]  577 	ld	l, (hl)
      000256 26 00            [ 8]  578 	ld	h, #0x00
      000258 09               [ 8]  579 	add	hl, bc
      000259 4D               [ 4]  580 	ld	c, l
      00025A 44               [ 4]  581 	ld	b, h
      00025B F8 0D            [12]  582 	ldhl	sp,	#13
      00025D 6E               [ 8]  583 	ld	l, (hl)
      00025E 26 00            [ 8]  584 	ld	h, #0x00
      000260 09               [ 8]  585 	add	hl, bc
      000261 5D               [ 4]  586 	ld	e, l
      000262 54               [ 4]  587 	ld	d, h
      000263 F8 08            [12]  588 	ldhl	sp,	#8
      000265 7E               [ 8]  589 	ld	a, (hl)
      000266 CDr00r00         [24]  590 	call	_set_vram_byte
                                    591 ;src/general.c:93: for (uint8_t i = 0; i < length - textLength; i++) {
      000269 F8 0D            [12]  592 	ldhl	sp,	#13
      00026B 34               [12]  593 	inc	(hl)
      00026C 18 8C            [12]  594 	jr	00113$
                                    595 ;src/general.c:100: for (uint8_t i = 0; i < textLength; i++) {
      00026E                        596 00129$:
      00026E F8 0B            [12]  597 	ldhl	sp,	#11
      000270 7E               [ 8]  598 	ld	a, (hl)
      000271 F8 07            [12]  599 	ldhl	sp,	#7
      000273 77               [ 8]  600 	ld	(hl), a
      000274 F8 0C            [12]  601 	ldhl	sp,	#12
      000276 7E               [ 8]  602 	ld	a, (hl)
      000277 F8 08            [12]  603 	ldhl	sp,	#8
      000279 77               [ 8]  604 	ld	(hl), a
      00027A 0E 00            [ 8]  605 	ld	c, #0x00
      00027C                        606 00116$:
      00027C 79               [ 4]  607 	ld	a, c
      00027D F8 02            [12]  608 	ldhl	sp,	#2
      00027F 96               [ 8]  609 	sub	a, (hl)
      000280 30 3C            [12]  610 	jr	NC, 00108$
                                    611 ;src/general.c:101: set_win_tile_xy(x + i, y, palette);
      000282 F8 0A            [12]  612 	ldhl	sp,	#10
      000284 7E               [ 8]  613 	ld	a, (hl)
      000285 81               [ 4]  614 	add	a, c
      000286 F8 14            [12]  615 	ldhl	sp,	#20
      000288 66               [ 8]  616 	ld	h, (hl)
                                    617 ;	spillPairReg hl
                                    618 ;	spillPairReg hl
      000289 E5               [16]  619 	push	hl
      00028A 33               [ 8]  620 	inc	sp
      00028B F8 0A            [12]  621 	ldhl	sp,	#10
      00028D 66               [ 8]  622 	ld	h, (hl)
                                    623 ;	spillPairReg hl
                                    624 ;	spillPairReg hl
      00028E E5               [16]  625 	push	hl
      00028F 33               [ 8]  626 	inc	sp
      000290 F5               [16]  627 	push	af
      000291 33               [ 8]  628 	inc	sp
      000292 CDr00r00         [24]  629 	call	_set_win_tile_xy
      000295 E8 03            [16]  630 	add	sp, #3
                                    631 ;src/general.c:102: set_vram_byte(vramAddr++, convert_char_to_tile(text[i]));
      000297 F8 10            [12]  632 	ldhl	sp,#16
      000299 2A               [ 8]  633 	ld	a, (hl+)
      00029A 5F               [ 4]  634 	ld	e, a
      00029B 56               [ 8]  635 	ld	d, (hl)
      00029C 69               [ 4]  636 	ld	l, c
      00029D 26 00            [ 8]  637 	ld	h, #0x00
      00029F 19               [ 8]  638 	add	hl, de
      0002A0 5D               [ 4]  639 	ld	e, l
      0002A1 54               [ 4]  640 	ld	d, h
      0002A2 1A               [ 8]  641 	ld	a, (de)
      0002A3 47               [ 4]  642 	ld	b, a
      0002A4 C5               [16]  643 	push	bc
      0002A5 78               [ 4]  644 	ld	a, b
      0002A6 CDrBCr00         [24]  645 	call	_convert_char_to_tile
      0002A9 5F               [ 4]  646 	ld	e, a
      0002AA C1               [12]  647 	pop	bc
      0002AB F8 07            [12]  648 	ldhl	sp,	#7
      0002AD 2A               [ 8]  649 	ld	a, (hl+)
      0002AE 47               [ 4]  650 	ld	b, a
      0002AF 3A               [ 8]  651 	ld	a, (hl-)
      0002B0 57               [ 4]  652 	ld	d, a
      0002B1 34               [12]  653 	inc	(hl)
      0002B2 20 02            [12]  654 	jr	NZ, 00198$
      0002B4 23               [ 8]  655 	inc	hl
      0002B5 34               [12]  656 	inc	(hl)
      0002B6                        657 00198$:
      0002B6 7B               [ 4]  658 	ld	a, e
      0002B7 58               [ 4]  659 	ld	e, b
      0002B8 CDr00r00         [24]  660 	call	_set_vram_byte
                                    661 ;src/general.c:100: for (uint8_t i = 0; i < textLength; i++) {
      0002BB 0C               [ 4]  662 	inc	c
      0002BC 18 BE            [12]  663 	jr	00116$
      0002BE                        664 00108$:
                                    665 ;src/general.c:106: if (left_aligned) {
      0002BE F8 13            [12]  666 	ldhl	sp,	#19
      0002C0 7E               [ 8]  667 	ld	a, (hl)
      0002C1 B7               [ 4]  668 	or	a, a
      0002C2 28 56            [12]  669 	jr	Z, 00121$
                                    670 ;src/general.c:107: for (uint8_t i = textLength; i < length; i++) {
      0002C4 F8 07            [12]  671 	ldhl	sp,	#7
      0002C6 7E               [ 8]  672 	ld	a, (hl)
      0002C7 F8 0C            [12]  673 	ldhl	sp,	#12
      0002C9 77               [ 8]  674 	ld	(hl), a
      0002CA F8 08            [12]  675 	ldhl	sp,	#8
      0002CC 7E               [ 8]  676 	ld	a, (hl)
      0002CD F8 0D            [12]  677 	ldhl	sp,	#13
      0002CF 77               [ 8]  678 	ld	(hl), a
      0002D0 F8 02            [12]  679 	ldhl	sp,	#2
      0002D2 7E               [ 8]  680 	ld	a, (hl)
      0002D3 F8 0B            [12]  681 	ldhl	sp,	#11
      0002D5 77               [ 8]  682 	ld	(hl), a
      0002D6                        683 00119$:
      0002D6 F8 0B            [12]  684 	ldhl	sp,	#11
      0002D8 7E               [ 8]  685 	ld	a, (hl)
      0002D9 F8 12            [12]  686 	ldhl	sp,	#18
      0002DB 96               [ 8]  687 	sub	a, (hl)
      0002DC 30 3C            [12]  688 	jr	NC, 00121$
                                    689 ;src/general.c:108: set_win_tile_xy(x + i, y, palette);
      0002DE F8 0A            [12]  690 	ldhl	sp,	#10
      0002E0 2A               [ 8]  691 	ld	a, (hl+)
      0002E1 86               [ 8]  692 	add	a, (hl)
      0002E2 F8 14            [12]  693 	ldhl	sp,	#20
      0002E4 66               [ 8]  694 	ld	h, (hl)
                                    695 ;	spillPairReg hl
                                    696 ;	spillPairReg hl
      0002E5 E5               [16]  697 	push	hl
      0002E6 33               [ 8]  698 	inc	sp
      0002E7 F8 0A            [12]  699 	ldhl	sp,	#10
      0002E9 66               [ 8]  700 	ld	h, (hl)
                                    701 ;	spillPairReg hl
                                    702 ;	spillPairReg hl
      0002EA E5               [16]  703 	push	hl
      0002EB 33               [ 8]  704 	inc	sp
      0002EC F5               [16]  705 	push	af
      0002ED 33               [ 8]  706 	inc	sp
      0002EE CDr00r00         [24]  707 	call	_set_win_tile_xy
      0002F1 E8 03            [16]  708 	add	sp, #3
                                    709 ;src/general.c:109: set_vram_byte(vramAddr++, convert_char_to_tile(' '));  // Assuming tile 0 is a space or zero
      0002F3 3E 20            [ 8]  710 	ld	a, #0x20
      0002F5 CDrBCr00         [24]  711 	call	_convert_char_to_tile
      0002F8 4F               [ 4]  712 	ld	c, a
      0002F9 F8 0C            [12]  713 	ldhl	sp,	#12
      0002FB 7E               [ 8]  714 	ld	a, (hl)
      0002FC F8 07            [12]  715 	ldhl	sp,	#7
      0002FE 77               [ 8]  716 	ld	(hl), a
      0002FF F8 0D            [12]  717 	ldhl	sp,	#13
      000301 7E               [ 8]  718 	ld	a, (hl)
      000302 F8 08            [12]  719 	ldhl	sp,	#8
      000304 77               [ 8]  720 	ld	(hl), a
      000305 F8 0C            [12]  721 	ldhl	sp,	#12
      000307 34               [12]  722 	inc	(hl)
      000308 20 02            [12]  723 	jr	NZ, 00199$
      00030A 23               [ 8]  724 	inc	hl
      00030B 34               [12]  725 	inc	(hl)
      00030C                        726 00199$:
      00030C 79               [ 4]  727 	ld	a, c
      00030D F8 07            [12]  728 	ldhl	sp,	#7
      00030F 5E               [ 8]  729 	ld	e, (hl)
      000310 23               [ 8]  730 	inc	hl
      000311 56               [ 8]  731 	ld	d, (hl)
      000312 CDr00r00         [24]  732 	call	_set_vram_byte
                                    733 ;src/general.c:107: for (uint8_t i = textLength; i < length; i++) {
      000315 F8 0B            [12]  734 	ldhl	sp,	#11
      000317 34               [12]  735 	inc	(hl)
      000318 18 BC            [12]  736 	jr	00119$
      00031A                        737 00121$:
                                    738 ;src/general.c:112: }
      00031A E8 0E            [16]  739 	add	sp, #14
      00031C E1               [12]  740 	pop	hl
      00031D E8 05            [16]  741 	add	sp, #5
      00031F E9               [ 4]  742 	jp	(hl)
                                    743 ;src/general.c:114: void draw_number_sprite(uint8_t x, uint8_t y, uint16_t number, uint8_t digits, int8_t tileoffset, int8_t fontspacing) {
                                    744 ;	---------------------------------
                                    745 ; Function draw_number_sprite
                                    746 ; ---------------------------------
      000320                        747 _draw_number_sprite::
      000320 E8 F1            [16]  748 	add	sp, #-15
      000322 4F               [ 4]  749 	ld	c, a
      000323 F8 0D            [12]  750 	ldhl	sp,	#13
      000325 73               [ 8]  751 	ld	(hl), e
                                    752 ;src/general.c:118: sprintf(buffer, "%u", number);
      000326 C5               [16]  753 	push	bc
      000327 F8 13            [12]  754 	ldhl	sp,	#19
      000329 2A               [ 8]  755 	ld	a, (hl+)
      00032A 5F               [ 4]  756 	ld	e, a
      00032B 56               [ 8]  757 	ld	d, (hl)
      00032C D5               [16]  758 	push	de
      00032D 11r63r04         [12]  759 	ld	de, #___str_0
      000330 D5               [16]  760 	push	de
      000331 21 06 00         [12]  761 	ld	hl, #6
      000334 39               [ 8]  762 	add	hl, sp
      000335 E5               [16]  763 	push	hl
      000336 CDr00r00         [24]  764 	call	_sprintf
      000339 E8 06            [16]  765 	add	sp, #6
      00033B C1               [12]  766 	pop	bc
                                    767 ;src/general.c:121: uint8_t len = strlen(buffer);
      00033C 21 00 00         [12]  768 	ld	hl, #0
      00033F 39               [ 8]  769 	add	hl, sp
      000340 E5               [16]  770 	push	hl
      000341 CDr00r00         [24]  771 	call	_strlen
      000344 E1               [12]  772 	pop	hl
      000345 43               [ 4]  773 	ld	b, e
                                    774 ;src/general.c:124: uint8_t displayLength = len < digits ? len : digits;  // Display length is the minimum of len or digits
      000346 78               [ 4]  775 	ld	a, b
      000347 F8 13            [12]  776 	ldhl	sp,	#19
      000349 96               [ 8]  777 	sub	a, (hl)
      00034A 38 03            [12]  778 	jr	C, 00116$
      00034C F8 13            [12]  779 	ldhl	sp,	#19
      00034E 46               [ 8]  780 	ld	b, (hl)
      00034F                        781 00116$:
                                    782 ;src/general.c:125: uint8_t startX = x + (digits - displayLength) * fontspacing;  // Adjust start position
      00034F F8 13            [12]  783 	ldhl	sp,	#19
      000351 2A               [ 8]  784 	ld	a, (hl+)
      000352 23               [ 8]  785 	inc	hl
      000353 90               [ 4]  786 	sub	a, b
      000354 57               [ 4]  787 	ld	d, a
      000355 C5               [16]  788 	push	bc
      000356 5E               [ 8]  789 	ld	e, (hl)
      000357 7A               [ 4]  790 	ld	a, d
      000358 CDr00r00         [24]  791 	call	__mulsuchar
      00035B 79               [ 4]  792 	ld	a, c
      00035C C1               [12]  793 	pop	bc
      00035D 81               [ 4]  794 	add	a, c
      00035E F8 06            [12]  795 	ldhl	sp,	#6
      000360 77               [ 8]  796 	ld	(hl), a
                                    797 ;src/general.c:128: for(uint8_t i = 0; i < digits - displayLength; i++) {
      000361 F8 0E            [12]  798 	ldhl	sp,	#14
      000363 36 00            [12]  799 	ld	(hl), #0x00
      000365                        800 00108$:
      000365 F8 13            [12]  801 	ldhl	sp,	#19
      000367 7E               [ 8]  802 	ld	a, (hl)
      000368 F8 07            [12]  803 	ldhl	sp,	#7
      00036A 22               [ 8]  804 	ld	(hl+), a
      00036B AF               [ 4]  805 	xor	a, a
      00036C 22               [ 8]  806 	ld	(hl+), a
      00036D 78               [ 4]  807 	ld	a, b
      00036E 22               [ 8]  808 	ld	(hl+), a
      00036F AF               [ 4]  809 	xor	a, a
      000370 32               [ 8]  810 	ld	(hl-), a
      000371 2B               [ 8]  811 	dec	hl
      000372 2B               [ 8]  812 	dec	hl
      000373 2A               [ 8]  813 	ld	a, (hl+)
      000374 5F               [ 4]  814 	ld	e, a
      000375 2A               [ 8]  815 	ld	a, (hl+)
      000376 57               [ 4]  816 	ld	d, a
      000377 2A               [ 8]  817 	ld	a,	(hl+)
      000378 66               [ 8]  818 	ld	h, (hl)
      000379 6F               [ 4]  819 	ld	l, a
      00037A 7B               [ 4]  820 	ld	a, e
      00037B 95               [ 4]  821 	sub	a, l
      00037C 5F               [ 4]  822 	ld	e, a
      00037D 7A               [ 4]  823 	ld	a, d
      00037E 9C               [ 4]  824 	sbc	a, h
      00037F F8 0C            [12]  825 	ldhl	sp,	#12
      000381 32               [ 8]  826 	ld	(hl-), a
      000382 73               [ 8]  827 	ld	(hl), e
      000383 F8 0E            [12]  828 	ldhl	sp,	#14
      000385 7E               [ 8]  829 	ld	a, (hl)
      000386 F8 09            [12]  830 	ldhl	sp,	#9
      000388 22               [ 8]  831 	ld	(hl+), a
      000389 36 00            [12]  832 	ld	(hl), #0x00
      00038B F8 09            [12]  833 	ldhl	sp,	#9
      00038D 5D               [ 4]  834 	ld	e, l
      00038E 54               [ 4]  835 	ld	d, h
      00038F F8 0B            [12]  836 	ldhl	sp,	#11
      000391 1A               [ 8]  837 	ld	a, (de)
      000392 13               [ 8]  838 	inc	de
      000393 96               [ 8]  839 	sub	a, (hl)
      000394 23               [ 8]  840 	inc	hl
      000395 1A               [ 8]  841 	ld	a, (de)
      000396 9E               [ 8]  842 	sbc	a, (hl)
      000397 1A               [ 8]  843 	ld	a, (de)
      000398 57               [ 4]  844 	ld	d, a
      000399 5E               [ 8]  845 	ld	e, (hl)
      00039A CB 7B            [ 8]  846 	bit	7, e
      00039C 28 07            [12]  847 	jr	Z, 00154$
      00039E CB 7A            [ 8]  848 	bit	7, d
      0003A0 20 08            [12]  849 	jr	NZ, 00155$
      0003A2 BF               [ 4]  850 	cp	a, a
      0003A3 18 05            [12]  851 	jr	00155$
      0003A5                        852 00154$:
      0003A5 CB 7A            [ 8]  853 	bit	7, d
      0003A7 28 01            [12]  854 	jr	Z, 00155$
      0003A9 37               [ 4]  855 	scf
      0003AA                        856 00155$:
      0003AA 30 40            [12]  857 	jr	NC, 00101$
                                    858 ;src/general.c:129: set_sprite_tile(tileoffset + i, 0);
      0003AC F8 0E            [12]  859 	ldhl	sp,	#14
      0003AE 7E               [ 8]  860 	ld	a, (hl)
      0003AF F8 14            [12]  861 	ldhl	sp,	#20
      0003B1 86               [ 8]  862 	add	a, (hl)
      0003B2 5F               [ 4]  863 	ld	e, a
      0003B3 53               [ 4]  864 	ld	d, e
                                    865 ;/usr/local/opt/gbdk/include/gb/gb.h:1804: shadow_OAM[nb].tile=tile;
      0003B4 26 00            [ 8]  866 	ld	h, #0x00
                                    867 ;	spillPairReg hl
                                    868 ;	spillPairReg hl
      0003B6 6A               [ 4]  869 	ld	l, d
      0003B7 29               [ 8]  870 	add	hl, hl
      0003B8 29               [ 8]  871 	add	hl, hl
      0003B9 D5               [16]  872 	push	de
      0003BA 11r00r00         [12]  873 	ld	de, #_shadow_OAM
      0003BD 19               [ 8]  874 	add	hl, de
      0003BE 23               [ 8]  875 	inc	hl
      0003BF 23               [ 8]  876 	inc	hl
      0003C0 D1               [12]  877 	pop	de
      0003C1 36 00            [12]  878 	ld	(hl), #0x00
                                    879 ;src/general.c:130: move_sprite(tileoffset + i, x + (fontspacing * i), y);
      0003C3 C5               [16]  880 	push	bc
      0003C4 D5               [16]  881 	push	de
      0003C5 F8 12            [12]  882 	ldhl	sp,	#18
      0003C7 5E               [ 8]  883 	ld	e, (hl)
      0003C8 F8 19            [12]  884 	ldhl	sp,	#25
      0003CA 7E               [ 8]  885 	ld	a, (hl)
      0003CB CDr00r00         [24]  886 	call	__muluschar
      0003CE 79               [ 4]  887 	ld	a, c
      0003CF D1               [12]  888 	pop	de
      0003D0 C1               [12]  889 	pop	bc
      0003D1 81               [ 4]  890 	add	a, c
      0003D2 F8 0C            [12]  891 	ldhl	sp,	#12
      0003D4 77               [ 8]  892 	ld	(hl), a
                                    893 ;/usr/local/opt/gbdk/include/gb/gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      0003D5 26 00            [ 8]  894 	ld	h, #0x00
                                    895 ;	spillPairReg hl
                                    896 ;	spillPairReg hl
      0003D7 6B               [ 4]  897 	ld	l, e
      0003D8 29               [ 8]  898 	add	hl, hl
      0003D9 29               [ 8]  899 	add	hl, hl
      0003DA 11r00r00         [12]  900 	ld	de, #_shadow_OAM
      0003DD 19               [ 8]  901 	add	hl, de
      0003DE 5D               [ 4]  902 	ld	e, l
      0003DF 54               [ 4]  903 	ld	d, h
                                    904 ;/usr/local/opt/gbdk/include/gb/gb.h:1878: itm->y=y, itm->x=x;
      0003E0 F8 0D            [12]  905 	ldhl	sp,	#13
      0003E2 3A               [ 8]  906 	ld	a, (hl-)
      0003E3 12               [ 8]  907 	ld	(de), a
      0003E4 13               [ 8]  908 	inc	de
                                    909 ;src/general.c:128: for(uint8_t i = 0; i < digits - displayLength; i++) {
      0003E5 2A               [ 8]  910 	ld	a, (hl+)
      0003E6 23               [ 8]  911 	inc	hl
      0003E7 12               [ 8]  912 	ld	(de), a
      0003E8 34               [12]  913 	inc	(hl)
      0003E9 C3r65r03         [16]  914 	jp	00108$
      0003EC                        915 00101$:
                                    916 ;src/general.c:134: for(uint8_t i = 0; i < displayLength; i++) {
      0003EC F8 0E            [12]  917 	ldhl	sp,	#14
      0003EE 36 00            [12]  918 	ld	(hl), #0x00
      0003F0                        919 00111$:
      0003F0 F8 0E            [12]  920 	ldhl	sp,	#14
      0003F2 7E               [ 8]  921 	ld	a, (hl)
      0003F3 90               [ 4]  922 	sub	a, b
      0003F4 30 67            [12]  923 	jr	NC, 00113$
                                    924 ;src/general.c:135: uint8_t spriteIndex = buffer[i] - '0';
      0003F6 E5               [16]  925 	push	hl
      0003F7 21 02 00         [12]  926 	ld	hl, #2
      0003FA 39               [ 8]  927 	add	hl, sp
      0003FB 5D               [ 4]  928 	ld	e, l
      0003FC 54               [ 4]  929 	ld	d, h
      0003FD E1               [12]  930 	pop	hl
      0003FE F8 0E            [12]  931 	ldhl	sp,	#14
      000400 6E               [ 8]  932 	ld	l, (hl)
      000401 26 00            [ 8]  933 	ld	h, #0x00
      000403 19               [ 8]  934 	add	hl, de
      000404 5D               [ 4]  935 	ld	e, l
      000405 54               [ 4]  936 	ld	d, h
      000406 1A               [ 8]  937 	ld	a, (de)
      000407 C6 D0            [ 8]  938 	add	a, #0xd0
      000409 5F               [ 4]  939 	ld	e, a
                                    940 ;src/general.c:136: uint8_t spritePos = tileoffset + digits - displayLength + i;
      00040A F8 13            [12]  941 	ldhl	sp,	#19
      00040C 2A               [ 8]  942 	ld	a, (hl+)
      00040D 86               [ 8]  943 	add	a, (hl)
      00040E 48               [ 4]  944 	ld	c, b
      00040F 91               [ 4]  945 	sub	a, c
      000410 F8 0E            [12]  946 	ldhl	sp,	#14
      000412 4E               [ 8]  947 	ld	c, (hl)
      000413 81               [ 4]  948 	add	a, c
      000414 4F               [ 4]  949 	ld	c, a
                                    950 ;src/general.c:137: set_sprite_data(spritePos, 1, &font[spriteIndex * 16]); // Assuming 'font' is defined elsewhere
      000415 26 00            [ 8]  951 	ld	h, #0x00
                                    952 ;	spillPairReg hl
                                    953 ;	spillPairReg hl
      000417 6B               [ 4]  954 	ld	l, e
      000418 29               [ 8]  955 	add	hl, hl
      000419 29               [ 8]  956 	add	hl, hl
      00041A 29               [ 8]  957 	add	hl, hl
      00041B 29               [ 8]  958 	add	hl, hl
      00041C 11r00r00         [12]  959 	ld	de, #_font
      00041F 19               [ 8]  960 	add	hl, de
      000420 E5               [16]  961 	push	hl
      000421 3E 01            [ 8]  962 	ld	a, #0x01
      000423 F5               [16]  963 	push	af
      000424 33               [ 8]  964 	inc	sp
      000425 79               [ 4]  965 	ld	a, c
      000426 F5               [16]  966 	push	af
      000427 33               [ 8]  967 	inc	sp
      000428 CDr00r00         [24]  968 	call	_set_sprite_data
      00042B E8 04            [16]  969 	add	sp, #4
                                    970 ;/usr/local/opt/gbdk/include/gb/gb.h:1804: shadow_OAM[nb].tile=tile;
      00042D 69               [ 4]  971 	ld	l, c
                                    972 ;	spillPairReg hl
                                    973 ;	spillPairReg hl
      00042E 26 00            [ 8]  974 	ld	h, #0x00
                                    975 ;	spillPairReg hl
                                    976 ;	spillPairReg hl
      000430 29               [ 8]  977 	add	hl, hl
      000431 29               [ 8]  978 	add	hl, hl
      000432 5D               [ 4]  979 	ld	e, l
      000433 54               [ 4]  980 	ld	d, h
      000434 21r01r00         [12]  981 	ld	hl,#_shadow_OAM + 1
      000437 19               [ 8]  982 	add	hl,de
      000438 23               [ 8]  983 	inc	hl
      000439 71               [ 8]  984 	ld	(hl), c
                                    985 ;src/general.c:139: move_sprite(spritePos, startX + (fontspacing * i), y);
      00043A C5               [16]  986 	push	bc
      00043B D5               [16]  987 	push	de
      00043C F8 12            [12]  988 	ldhl	sp,	#18
      00043E 5E               [ 8]  989 	ld	e, (hl)
      00043F F8 19            [12]  990 	ldhl	sp,	#25
      000441 7E               [ 8]  991 	ld	a, (hl)
      000442 CDr00r00         [24]  992 	call	__muluschar
      000445 79               [ 4]  993 	ld	a, c
      000446 D1               [12]  994 	pop	de
      000447 C1               [12]  995 	pop	bc
      000448 F8 06            [12]  996 	ldhl	sp,	#6
      00044A 4E               [ 8]  997 	ld	c, (hl)
      00044B 81               [ 4]  998 	add	a, c
      00044C 4F               [ 4]  999 	ld	c, a
                                   1000 ;/usr/local/opt/gbdk/include/gb/gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      00044D 21r00r00         [12] 1001 	ld	hl, #_shadow_OAM
      000450 19               [ 8] 1002 	add	hl, de
      000451 5D               [ 4] 1003 	ld	e, l
      000452 54               [ 4] 1004 	ld	d, h
                                   1005 ;/usr/local/opt/gbdk/include/gb/gb.h:1878: itm->y=y, itm->x=x;
      000453 F8 0D            [12] 1006 	ldhl	sp,	#13
                                   1007 ;src/general.c:134: for(uint8_t i = 0; i < displayLength; i++) {
      000455 2A               [ 8] 1008 	ld	a, (hl+)
      000456 12               [ 8] 1009 	ld	(de), a
      000457 13               [ 8] 1010 	inc	de
      000458 79               [ 4] 1011 	ld	a, c
      000459 12               [ 8] 1012 	ld	(de), a
      00045A 34               [12] 1013 	inc	(hl)
      00045B 18 93            [12] 1014 	jr	00111$
      00045D                       1015 00113$:
                                   1016 ;src/general.c:142: }
      00045D E8 0F            [16] 1017 	add	sp, #15
      00045F E1               [12] 1018 	pop	hl
      000460 E8 05            [16] 1019 	add	sp, #5
      000462 E9               [ 4] 1020 	jp	(hl)
      000463                       1021 ___str_0:
      000463 25 75                 1022 	.ascii "%u"
      000465 00                    1023 	.db 0x00
                                   1024 	.area _CODE
                                   1025 	.area _INITIALIZER
                                   1026 	.area _CABS (ABS)
