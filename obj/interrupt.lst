                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14228 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module interrupt
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _init_disable_lcd_interrupt
                                     12 	.globl _init_enable_lcd_interrupt
                                     13 	.globl _init_framecounter
                                     14 	.globl _interrupt_VBL_framecounter
                                     15 	.globl _interrupt_VBL_window
                                     16 	.globl _interrupt_LCD
                                     17 	.globl _set_interrupts
                                     18 	.globl _add_LCD
                                     19 	.globl _add_VBL
                                     20 	.globl _remove_LCD
                                     21 	.globl _remove_VBL
                                     22 ;--------------------------------------------------------
                                     23 ; special function registers
                                     24 ;--------------------------------------------------------
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area _DATA
                                     29 ;--------------------------------------------------------
                                     30 ; ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area _INITIALIZED
                                     33 ;--------------------------------------------------------
                                     34 ; absolute external ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area _DABS (ABS)
                                     37 ;--------------------------------------------------------
                                     38 ; global & static initialisations
                                     39 ;--------------------------------------------------------
                                     40 	.area _HOME
                                     41 	.area _GSINIT
                                     42 	.area _GSFINAL
                                     43 	.area _GSINIT
                                     44 ;--------------------------------------------------------
                                     45 ; Home
                                     46 ;--------------------------------------------------------
                                     47 	.area _HOME
                                     48 	.area _HOME
                                     49 ;--------------------------------------------------------
                                     50 ; code
                                     51 ;--------------------------------------------------------
                                     52 	.area _CODE
                                     53 ;src/interrupt.c:8: void interrupt_LCD(void) {
                                     54 ;	---------------------------------
                                     55 ; Function interrupt_LCD
                                     56 ; ---------------------------------
      000000                         57 _interrupt_LCD::
                                     58 ;/usr/local/opt/gbdk/include/gb/gb.h:1656: WX_REG=x, WY_REG=y;
      000000 3E A7            [ 8]   59 	ld	a, #0xa7
      000002 E0r00            [12]   60 	ldh	(_WX_REG + 0), a
      000004 AF               [ 4]   61 	xor	a, a
      000005 E0r00            [12]   62 	ldh	(_WY_REG + 0), a
                                     63 ;src/interrupt.c:9: move_win(167, 0);
                                     64 ;src/interrupt.c:10: }
      000007 C9               [16]   65 	ret
                                     66 ;src/interrupt.c:11: void interrupt_VBL_window(void) {
                                     67 ;	---------------------------------
                                     68 ; Function interrupt_VBL_window
                                     69 ; ---------------------------------
      000008                         70 _interrupt_VBL_window::
                                     71 ;/usr/local/opt/gbdk/include/gb/gb.h:1656: WX_REG=x, WY_REG=y;
      000008 3E 07            [ 8]   72 	ld	a, #0x07
      00000A E0r00            [12]   73 	ldh	(_WX_REG + 0), a
      00000C AF               [ 4]   74 	xor	a, a
      00000D E0r00            [12]   75 	ldh	(_WY_REG + 0), a
                                     76 ;src/interrupt.c:12: move_win(7, 0);
                                     77 ;src/interrupt.c:13: }
      00000F C9               [16]   78 	ret
                                     79 ;src/interrupt.c:15: void interrupt_VBL_framecounter(void) {
                                     80 ;	---------------------------------
                                     81 ; Function interrupt_VBL_framecounter
                                     82 ; ---------------------------------
      000010                         83 _interrupt_VBL_framecounter::
                                     84 ;src/interrupt.c:16: frame_counter++;  // Increment the frame counter every VBlank
      000010 21r00r00         [12]   85 	ld	hl, #_frame_counter
      000013 34               [12]   86 	inc	(hl)
      000014 7E               [ 8]   87 	ld	a, (hl)
                                     88 ;src/interrupt.c:17: if (frame_counter >= 60) frame_counter = 0;
      000015 7E               [ 8]   89 	ld	a, (hl)
      000016 D6 3C            [ 8]   90 	sub	a, #0x3c
      000018 D8               [20]   91 	ret	C
      000019 36 00            [12]   92 	ld	(hl), #0x00
                                     93 ;src/interrupt.c:18: }
      00001B C9               [16]   94 	ret
                                     95 ;src/interrupt.c:20: void init_framecounter(void) {
                                     96 ;	---------------------------------
                                     97 ; Function init_framecounter
                                     98 ; ---------------------------------
      00001C                         99 _init_framecounter::
                                    100 ;src/interrupt.c:21: add_VBL(interrupt_VBL_framecounter);  // Add the VBL interrupt handler
      00001C 11r10r00         [12]  101 	ld	de, #_interrupt_VBL_framecounter
      00001F CDr00r00         [24]  102 	call	_add_VBL
                                    103 ;/usr/local/opt/gbdk/include/gb/gb.h:738: __asm__("ei");
      000022 FB               [ 4]  104 	ei
                                    105 ;src/interrupt.c:22: enable_interrupts();  // Enable interrupts globally
                                    106 ;src/interrupt.c:23: }
      000023 C9               [16]  107 	ret
                                    108 ;src/interrupt.c:25: void init_enable_lcd_interrupt(void){
                                    109 ;	---------------------------------
                                    110 ; Function init_enable_lcd_interrupt
                                    111 ; ---------------------------------
      000024                        112 _init_enable_lcd_interrupt::
                                    113 ;src/interrupt.c:27: STAT_REG = 0x40;
      000024 3E 40            [ 8]  114 	ld	a, #0x40
      000026 E0r00            [12]  115 	ldh	(_STAT_REG + 0), a
                                    116 ;src/interrupt.c:29: LYC_REG = 16;
      000028 3E 10            [ 8]  117 	ld	a, #0x10
      00002A E0r00            [12]  118 	ldh	(_LYC_REG + 0), a
                                    119 ;/usr/local/opt/gbdk/include/gb/gb.h:754: __asm__("di");
      00002C F3               [ 4]  120 	di
                                    121 ;src/interrupt.c:31: add_LCD(interrupt_LCD);
      00002D 11r00r00         [12]  122 	ld	de, #_interrupt_LCD
      000030 CDr00r00         [24]  123 	call	_add_LCD
                                    124 ;src/interrupt.c:32: add_VBL(interrupt_VBL_window);
      000033 11r08r00         [12]  125 	ld	de, #_interrupt_VBL_window
      000036 CDr00r00         [24]  126 	call	_add_VBL
                                    127 ;/usr/local/opt/gbdk/include/gb/gb.h:738: __asm__("ei");
      000039 FB               [ 4]  128 	ei
                                    129 ;src/interrupt.c:34: set_interrupts(VBL_IFLAG | LCD_IFLAG);
      00003A 3E 03            [ 8]  130 	ld	a, #0x03
                                    131 ;src/interrupt.c:35: }
      00003C C3r00r00         [16]  132 	jp	_set_interrupts
                                    133 ;src/interrupt.c:37: void init_disable_lcd_interrupt(void) {
                                    134 ;	---------------------------------
                                    135 ; Function init_disable_lcd_interrupt
                                    136 ; ---------------------------------
      00003F                        137 _init_disable_lcd_interrupt::
                                    138 ;/usr/local/opt/gbdk/include/gb/gb.h:754: __asm__("di");
      00003F F3               [ 4]  139 	di
                                    140 ;src/interrupt.c:41: remove_LCD(interrupt_LCD);
      000040 11r00r00         [12]  141 	ld	de, #_interrupt_LCD
      000043 CDr00r00         [24]  142 	call	_remove_LCD
                                    143 ;src/interrupt.c:42: remove_VBL(interrupt_VBL_window);
      000046 11r08r00         [12]  144 	ld	de, #_interrupt_VBL_window
      000049 CDr00r00         [24]  145 	call	_remove_VBL
                                    146 ;src/interrupt.c:45: STAT_REG = 0x00; // This sets the STAT_REG to a state where no LCD STAT interrupts are enabled
      00004C 3E 00            [ 8]  147 	ld	a, #0x00
      00004E E0r00            [12]  148 	ldh	(_STAT_REG + 0), a
                                    149 ;/usr/local/opt/gbdk/include/gb/gb.h:738: __asm__("ei");
      000050 FB               [ 4]  150 	ei
                                    151 ;src/interrupt.c:47: set_interrupts(VBL_IFLAG | LCD_IFLAG);
      000051 3E 03            [ 8]  152 	ld	a, #0x03
                                    153 ;src/interrupt.c:48: }
      000053 C3r00r00         [16]  154 	jp	_set_interrupts
                                    155 	.area _CODE
                                    156 	.area _INITIALIZER
                                    157 	.area _CABS (ABS)
