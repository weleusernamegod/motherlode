                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14228 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module inventory
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _materials
                                     12 	.globl _update_inventory
                                     13 	.globl _calculate_cargo
                                     14 	.globl _sell_all_ores
                                     15 ;--------------------------------------------------------
                                     16 ; special function registers
                                     17 ;--------------------------------------------------------
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area _DATA
                                     22 ;--------------------------------------------------------
                                     23 ; ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area _INITIALIZED
                           000000    26 G$materials$0_0$0==.
      000000                         27 _materials::
      000000                         28 	.ds 216
                                     29 ;--------------------------------------------------------
                                     30 ; absolute external ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area _DABS (ABS)
                                     33 ;--------------------------------------------------------
                                     34 ; global & static initialisations
                                     35 ;--------------------------------------------------------
                                     36 	.area _HOME
                                     37 	.area _GSINIT
                                     38 	.area _GSFINAL
                                     39 	.area _GSINIT
                                     40 ;--------------------------------------------------------
                                     41 ; Home
                                     42 ;--------------------------------------------------------
                                     43 	.area _HOME
                                     44 	.area _HOME
                                     45 ;--------------------------------------------------------
                                     46 ; code
                                     47 ;--------------------------------------------------------
                                     48 	.area _CODE
                           000000    49 	G$update_inventory$0$0	= .
                                     50 	.globl	G$update_inventory$0$0
                           000000    51 	C$inventory.c$44$0_0$142	= .
                                     52 	.globl	C$inventory.c$44$0_0$142
                                     53 ;src/inventory.c:44: void update_inventory(void) {
                                     54 ;	---------------------------------
                                     55 ; Function update_inventory
                                     56 ; ---------------------------------
      000000                         57 _update_inventory::
                           000000    58 	C$inventory.c$45$1_0$142	= .
                                     59 	.globl	C$inventory.c$45$1_0$142
                                     60 ;src/inventory.c:45: uint8_t material_index = level_array[depth][width];
      000000 01r00r00         [12]   61 	ld	bc, #_level_array+0
      000003 21r00r00         [12]   62 	ld	hl, #_depth
      000006 6E               [ 8]   63 	ld	l, (hl)
                                     64 ;	spillPairReg hl
                                     65 ;	spillPairReg hl
      000007 26 00            [ 8]   66 	ld	h, #0x00
                                     67 ;	spillPairReg hl
                                     68 ;	spillPairReg hl
      000009 29               [ 8]   69 	add	hl, hl
      00000A 29               [ 8]   70 	add	hl, hl
      00000B 29               [ 8]   71 	add	hl, hl
      00000C 29               [ 8]   72 	add	hl, hl
      00000D 09               [ 8]   73 	add	hl, bc
      00000E 4D               [ 4]   74 	ld	c, l
      00000F 44               [ 4]   75 	ld	b, h
      000010 21r00r00         [12]   76 	ld	hl, #_width
      000013 6E               [ 8]   77 	ld	l, (hl)
                                     78 ;	spillPairReg hl
                                     79 ;	spillPairReg hl
      000014 26 00            [ 8]   80 	ld	h, #0x00
      000016 09               [ 8]   81 	add	hl, bc
      000017 4E               [ 8]   82 	ld	c, (hl)
                           000018    83 	C$inventory.c$47$1_0$142	= .
                                     84 	.globl	C$inventory.c$47$1_0$142
                                     85 ;src/inventory.c:47: if (material_index >= COAL && material_index <= DIAMOND) {
      000018 79               [ 4]   86 	ld	a, c
      000019 D6 04            [ 8]   87 	sub	a, #0x04
      00001B 38 16            [12]   88 	jr	C, 00102$
      00001D 3E 12            [ 8]   89 	ld	a, #0x12
      00001F 91               [ 4]   90 	sub	a, c
      000020 38 11            [12]   91 	jr	C, 00102$
                           000022    92 	C$inventory.c$48$2_0$143	= .
                                     93 	.globl	C$inventory.c$48$2_0$143
                                     94 ;src/inventory.c:48: materials[material_index].inventory++;
      000022 06 00            [ 8]   95 	ld	b, #0x00
      000024 69               [ 4]   96 	ld	l, c
      000025 60               [ 4]   97 	ld	h, b
      000026 29               [ 8]   98 	add	hl, hl
      000027 29               [ 8]   99 	add	hl, hl
      000028 29               [ 8]  100 	add	hl, hl
      000029 09               [ 8]  101 	add	hl, bc
      00002A 11r00r00         [12]  102 	ld	de, #_materials
      00002D 19               [ 8]  103 	add	hl, de
      00002E 11 07 00         [12]  104 	ld	de, #0x0007
      000031 19               [ 8]  105 	add	hl, de
      000032 34               [12]  106 	inc	(hl)
      000033                        107 00102$:
                           000033   108 	C$inventory.c$51$1_0$142	= .
                                    109 	.globl	C$inventory.c$51$1_0$142
                                    110 ;src/inventory.c:51: if (material_index == BONES) {
      000033 79               [ 4]  111 	ld	a, c
      000034 D6 1E            [ 8]  112 	sub	a, #0x1e
      000036 20 13            [12]  113 	jr	NZ, 00110$
                           000038   114 	C$inventory.c$52$2_0$144	= .
                                    115 	.globl	C$inventory.c$52$2_0$144
                                    116 ;src/inventory.c:52: player.money += 1000;
      000038 21r56r01         [12]  117 	ld	hl, #(_player + 342)
      00003B 2A               [ 8]  118 	ld	a, (hl+)
      00003C 4F               [ 4]  119 	ld	c, a
      00003D 46               [ 8]  120 	ld	b, (hl)
      00003E 21 E8 03         [12]  121 	ld	hl, #0x03e8
      000041 09               [ 8]  122 	add	hl, bc
      000042 4D               [ 4]  123 	ld	c, l
      000043 44               [ 4]  124 	ld	b, h
      000044 21r56r01         [12]  125 	ld	hl, #(_player + 342)
      000047 79               [ 4]  126 	ld	a, c
      000048 22               [ 8]  127 	ld	(hl+), a
      000049 70               [ 8]  128 	ld	(hl), b
      00004A C9               [16]  129 	ret
      00004B                        130 00110$:
                           00004B   131 	C$inventory.c$53$1_0$142	= .
                                    132 	.globl	C$inventory.c$53$1_0$142
                                    133 ;src/inventory.c:53: } else if (material_index == ARTEFACT) {
      00004B 79               [ 4]  134 	ld	a, c
      00004C D6 1F            [ 8]  135 	sub	a, #0x1f
      00004E 20 13            [12]  136 	jr	NZ, 00107$
                           000050   137 	C$inventory.c$54$2_0$145	= .
                                    138 	.globl	C$inventory.c$54$2_0$145
                                    139 ;src/inventory.c:54: player.money += 5000;
      000050 21r56r01         [12]  140 	ld	hl, #(_player + 342)
      000053 2A               [ 8]  141 	ld	a, (hl+)
      000054 4F               [ 4]  142 	ld	c, a
      000055 46               [ 8]  143 	ld	b, (hl)
      000056 21 88 13         [12]  144 	ld	hl, #0x1388
      000059 09               [ 8]  145 	add	hl, bc
      00005A 4D               [ 4]  146 	ld	c, l
      00005B 44               [ 4]  147 	ld	b, h
      00005C 21r56r01         [12]  148 	ld	hl, #(_player + 342)
      00005F 79               [ 4]  149 	ld	a, c
      000060 22               [ 8]  150 	ld	(hl+), a
      000061 70               [ 8]  151 	ld	(hl), b
      000062 C9               [16]  152 	ret
      000063                        153 00107$:
                           000063   154 	C$inventory.c$55$1_0$142	= .
                                    155 	.globl	C$inventory.c$55$1_0$142
                                    156 ;src/inventory.c:55: } else if (material_index == TREASURE) {
      000063 79               [ 4]  157 	ld	a, c
      000064 D6 20            [ 8]  158 	sub	a, #0x20
      000066 C0               [20]  159 	ret	NZ
                           000067   160 	C$inventory.c$56$2_0$146	= .
                                    161 	.globl	C$inventory.c$56$2_0$146
                                    162 ;src/inventory.c:56: player.money += 10000;
      000067 21r56r01         [12]  163 	ld	hl, #(_player + 342)
      00006A 2A               [ 8]  164 	ld	a, (hl+)
      00006B 4F               [ 4]  165 	ld	c, a
      00006C 46               [ 8]  166 	ld	b, (hl)
      00006D 21 10 27         [12]  167 	ld	hl, #0x2710
      000070 09               [ 8]  168 	add	hl, bc
      000071 4D               [ 4]  169 	ld	c, l
      000072 44               [ 4]  170 	ld	b, h
      000073 21r56r01         [12]  171 	ld	hl, #(_player + 342)
      000076 79               [ 4]  172 	ld	a, c
      000077 22               [ 8]  173 	ld	(hl+), a
      000078 70               [ 8]  174 	ld	(hl), b
                           000079   175 	C$inventory.c$58$1_0$142	= .
                                    176 	.globl	C$inventory.c$58$1_0$142
                                    177 ;src/inventory.c:58: }
                           000079   178 	C$inventory.c$58$1_0$142	= .
                                    179 	.globl	C$inventory.c$58$1_0$142
                           000079   180 	XG$update_inventory$0$0	= .
                                    181 	.globl	XG$update_inventory$0$0
      000079 C9               [16]  182 	ret
                           00007A   183 	G$calculate_cargo$0$0	= .
                                    184 	.globl	G$calculate_cargo$0$0
                           00007A   185 	C$inventory.c$60$1_0$148	= .
                                    186 	.globl	C$inventory.c$60$1_0$148
                                    187 ;src/inventory.c:60: void calculate_cargo(void) {
                                    188 ;	---------------------------------
                                    189 ; Function calculate_cargo
                                    190 ; ---------------------------------
      00007A                        191 _calculate_cargo::
      00007A 3B               [ 8]  192 	dec	sp
      00007B 3B               [ 8]  193 	dec	sp
                           00007C   194 	C$inventory.c$61$2_0$148	= .
                                    195 	.globl	C$inventory.c$61$2_0$148
                                    196 ;src/inventory.c:61: int total_weight = 0;
      00007C 01 00 00         [12]  197 	ld	bc, #0x0000
                           00007F   198 	C$inventory.c$62$3_0$150	= .
                                    199 	.globl	C$inventory.c$62$3_0$150
                                    200 ;src/inventory.c:62: for (int i = COAL; i <= DIAMOND; i++) {
      00007F F8 00            [12]  201 	ldhl	sp,	#0
      000081 3E 04            [ 8]  202 	ld	a, #0x04
      000083 22               [ 8]  203 	ld	(hl+), a
      000084 AF               [ 4]  204 	xor	a, a
      000085 77               [ 8]  205 	ld	(hl), a
      000086                        206 00103$:
      000086 F8 00            [12]  207 	ldhl	sp,	#0
      000088 3E 12            [ 8]  208 	ld	a, #0x12
      00008A 96               [ 8]  209 	sub	a, (hl)
      00008B 23               [ 8]  210 	inc	hl
      00008C 3E 00            [ 8]  211 	ld	a, #0x00
      00008E 9E               [ 8]  212 	sbc	a, (hl)
      00008F 3E 00            [ 8]  213 	ld	a, #0x00
      000091 57               [ 4]  214 	ld	d, a
      000092 5E               [ 8]  215 	ld	e, (hl)
      000093 CB 7B            [ 8]  216 	bit	7, e
      000095 28 07            [12]  217 	jr	Z, 00122$
      000097 CB 7A            [ 8]  218 	bit	7, d
      000099 20 08            [12]  219 	jr	NZ, 00123$
      00009B BF               [ 4]  220 	cp	a, a
      00009C 18 05            [12]  221 	jr	00123$
      00009E                        222 00122$:
      00009E CB 7A            [ 8]  223 	bit	7, d
      0000A0 28 01            [12]  224 	jr	Z, 00123$
      0000A2 37               [ 4]  225 	scf
      0000A3                        226 00123$:
      0000A3 38 2F            [12]  227 	jr	C, 00101$
                           0000A5   228 	C$inventory.c$63$3_0$150	= .
                                    229 	.globl	C$inventory.c$63$3_0$150
                                    230 ;src/inventory.c:63: total_weight += materials[i].inventory * materials[i].weight;
      0000A5 D1               [12]  231 	pop	de
      0000A6 D5               [16]  232 	push	de
      0000A7 6B               [ 4]  233 	ld	l, e
      0000A8 62               [ 4]  234 	ld	h, d
      0000A9 29               [ 8]  235 	add	hl, hl
      0000AA 29               [ 8]  236 	add	hl, hl
      0000AB 29               [ 8]  237 	add	hl, hl
      0000AC 19               [ 8]  238 	add	hl, de
      0000AD 7D               [ 4]  239 	ld	a, l
      0000AE C6r00            [ 8]  240 	add	a, #<(_materials)
      0000B0 5F               [ 4]  241 	ld	e, a
      0000B1 7C               [ 4]  242 	ld	a, h
      0000B2 CEs00            [ 8]  243 	adc	a, #>(_materials)
      0000B4 57               [ 4]  244 	ld	d, a
      0000B5 21 07 00         [12]  245 	ld	hl, #0x0007
      0000B8 19               [ 8]  246 	add	hl, de
      0000B9 6E               [ 8]  247 	ld	l, (hl)
                                    248 ;	spillPairReg hl
      0000BA 13               [ 8]  249 	inc	de
      0000BB 13               [ 8]  250 	inc	de
      0000BC 13               [ 8]  251 	inc	de
      0000BD 13               [ 8]  252 	inc	de
      0000BE 1A               [ 8]  253 	ld	a, (de)
      0000BF 5F               [ 4]  254 	ld	e, a
      0000C0 C5               [16]  255 	push	bc
      0000C1 7D               [ 4]  256 	ld	a, l
      0000C2 CDr00r00         [24]  257 	call	__muluchar
      0000C5 69               [ 4]  258 	ld	l, c
                                    259 ;	spillPairReg hl
                                    260 ;	spillPairReg hl
      0000C6 60               [ 4]  261 	ld	h, b
                                    262 ;	spillPairReg hl
                                    263 ;	spillPairReg hl
      0000C7 C1               [12]  264 	pop	bc
      0000C8 09               [ 8]  265 	add	hl, bc
      0000C9 4D               [ 4]  266 	ld	c, l
      0000CA 44               [ 4]  267 	ld	b, h
                           0000CB   268 	C$inventory.c$62$2_0$149	= .
                                    269 	.globl	C$inventory.c$62$2_0$149
                                    270 ;src/inventory.c:62: for (int i = COAL; i <= DIAMOND; i++) {
      0000CB F8 00            [12]  271 	ldhl	sp,	#0
      0000CD 34               [12]  272 	inc	(hl)
      0000CE 20 B6            [12]  273 	jr	NZ, 00103$
      0000D0 23               [ 8]  274 	inc	hl
      0000D1 34               [12]  275 	inc	(hl)
      0000D2 18 B2            [12]  276 	jr	00103$
      0000D4                        277 00101$:
                           0000D4   278 	C$inventory.c$65$1_0$148	= .
                                    279 	.globl	C$inventory.c$65$1_0$148
                                    280 ;src/inventory.c:65: player.cargo.current_value = total_weight;
      0000D4 21rBBr00         [12]  281 	ld	hl, #(_player + 187)
      0000D7 71               [ 8]  282 	ld	(hl), c
      0000D8 23               [ 8]  283 	inc	hl
      0000D9 70               [ 8]  284 	ld	(hl), b
                           0000DA   285 	C$inventory.c$66$1_0$148	= .
                                    286 	.globl	C$inventory.c$66$1_0$148
                                    287 ;src/inventory.c:66: }
      0000DA 33               [ 8]  288 	inc	sp
      0000DB 33               [ 8]  289 	inc	sp
                           0000DC   290 	C$inventory.c$66$1_0$148	= .
                                    291 	.globl	C$inventory.c$66$1_0$148
                           0000DC   292 	XG$calculate_cargo$0$0	= .
                                    293 	.globl	XG$calculate_cargo$0$0
      0000DC C9               [16]  294 	ret
                           0000DD   295 	G$sell_all_ores$0$0	= .
                                    296 	.globl	G$sell_all_ores$0$0
                           0000DD   297 	C$inventory.c$68$1_0$152	= .
                                    298 	.globl	C$inventory.c$68$1_0$152
                                    299 ;src/inventory.c:68: void sell_all_ores(void) {
                                    300 ;	---------------------------------
                                    301 ; Function sell_all_ores
                                    302 ; ---------------------------------
      0000DD                        303 _sell_all_ores::
      0000DD E8 FC            [16]  304 	add	sp, #-4
                           0000DF   305 	C$inventory.c$69$2_0$152	= .
                                    306 	.globl	C$inventory.c$69$2_0$152
                                    307 ;src/inventory.c:69: int total_value = 0;
      0000DF AF               [ 4]  308 	xor	a, a
      0000E0 F8 00            [12]  309 	ldhl	sp,	#0
      0000E2 22               [ 8]  310 	ld	(hl+), a
                           0000E3   311 	C$inventory.c$71$3_0$154	= .
                                    312 	.globl	C$inventory.c$71$3_0$154
                                    313 ;src/inventory.c:71: for (int i = COAL; i <= DIAMOND; i++) {
      0000E3 22               [ 8]  314 	ld	(hl+), a
      0000E4 3E 04            [ 8]  315 	ld	a, #0x04
      0000E6 22               [ 8]  316 	ld	(hl+), a
      0000E7 AF               [ 4]  317 	xor	a, a
      0000E8 77               [ 8]  318 	ld	(hl), a
      0000E9                        319 00104$:
      0000E9 F8 02            [12]  320 	ldhl	sp,	#2
      0000EB 3E 12            [ 8]  321 	ld	a, #0x12
      0000ED 96               [ 8]  322 	sub	a, (hl)
      0000EE 23               [ 8]  323 	inc	hl
      0000EF 3E 00            [ 8]  324 	ld	a, #0x00
      0000F1 9E               [ 8]  325 	sbc	a, (hl)
      0000F2 3E 00            [ 8]  326 	ld	a, #0x00
      0000F4 57               [ 4]  327 	ld	d, a
      0000F5 CB 7E            [12]  328 	bit	7, (hl)
      0000F7 28 07            [12]  329 	jr	Z, 00141$
      0000F9 CB 7A            [ 8]  330 	bit	7, d
      0000FB 20 08            [12]  331 	jr	NZ, 00142$
      0000FD BF               [ 4]  332 	cp	a, a
      0000FE 18 05            [12]  333 	jr	00142$
      000100                        334 00141$:
      000100 CB 7A            [ 8]  335 	bit	7, d
      000102 28 01            [12]  336 	jr	Z, 00142$
      000104 37               [ 4]  337 	scf
      000105                        338 00142$:
      000105 38 39            [12]  339 	jr	C, 00101$
                           000107   340 	C$inventory.c$72$3_0$154	= .
                                    341 	.globl	C$inventory.c$72$3_0$154
                                    342 ;src/inventory.c:72: total_value += materials[i].inventory * materials[i].value;
      000107 F8 02            [12]  343 	ldhl	sp,#2
      000109 2A               [ 8]  344 	ld	a, (hl+)
      00010A 4F               [ 4]  345 	ld	c, a
      00010B 46               [ 8]  346 	ld	b, (hl)
      00010C 69               [ 4]  347 	ld	l, c
      00010D 60               [ 4]  348 	ld	h, b
      00010E 29               [ 8]  349 	add	hl, hl
      00010F 29               [ 8]  350 	add	hl, hl
      000110 29               [ 8]  351 	add	hl, hl
      000111 09               [ 8]  352 	add	hl, bc
      000112 01r00r00         [12]  353 	ld	bc,#_materials
      000115 09               [ 8]  354 	add	hl,bc
      000116 5D               [ 4]  355 	ld	e, l
      000117 54               [ 4]  356 	ld	d, h
      000118 21 07 00         [12]  357 	ld	hl, #0x0007
      00011B 19               [ 8]  358 	add	hl, de
      00011C 4E               [ 8]  359 	ld	c, (hl)
      00011D 21 05 00         [12]  360 	ld	hl, #0x0005
      000120 19               [ 8]  361 	add	hl, de
      000121 2A               [ 8]  362 	ld	a,	(hl+)
      000122 66               [ 8]  363 	ld	h, (hl)
                                    364 ;	spillPairReg hl
      000123 6F               [ 4]  365 	ld	l, a
                                    366 ;	spillPairReg hl
                                    367 ;	spillPairReg hl
      000124 59               [ 4]  368 	ld	e, c
      000125 16 00            [ 8]  369 	ld	d, #0x00
      000127 4D               [ 4]  370 	ld	c, l
      000128 44               [ 4]  371 	ld	b, h
      000129 CDr00r00         [24]  372 	call	__mulint
      00012C F8 00            [12]  373 	ldhl	sp,	#0
      00012E 2A               [ 8]  374 	ld	a, (hl+)
      00012F 5E               [ 8]  375 	ld	e, (hl)
                           000130   376 	C$inventory.c$71$2_0$153	= .
                                    377 	.globl	C$inventory.c$71$2_0$153
                                    378 ;src/inventory.c:71: for (int i = COAL; i <= DIAMOND; i++) {
      000130 23               [ 8]  379 	inc	hl
      000131 81               [ 4]  380 	add	a, c
      000132 4F               [ 4]  381 	ld	c, a
      000133 7B               [ 4]  382 	ld	a, e
      000134 88               [ 4]  383 	adc	a, b
      000135 47               [ 4]  384 	ld	b, a
      000136 33               [ 8]  385 	inc	sp
      000137 33               [ 8]  386 	inc	sp
      000138 C5               [16]  387 	push	bc
      000139 34               [12]  388 	inc	(hl)
      00013A 20 AD            [12]  389 	jr	NZ, 00104$
      00013C 23               [ 8]  390 	inc	hl
      00013D 34               [12]  391 	inc	(hl)
      00013E 18 A9            [12]  392 	jr	00104$
      000140                        393 00101$:
                           000140   394 	C$inventory.c$75$1_0$152	= .
                                    395 	.globl	C$inventory.c$75$1_0$152
                                    396 ;src/inventory.c:75: player.money += total_value;
      000140 21r56r01         [12]  397 	ld	hl, #(_player + 342)
      000143 2A               [ 8]  398 	ld	a, (hl+)
      000144 4F               [ 4]  399 	ld	c, a
      000145 46               [ 8]  400 	ld	b, (hl)
      000146 E1               [12]  401 	pop	hl
      000147 E5               [16]  402 	push	hl
      000148 09               [ 8]  403 	add	hl, bc
      000149 4D               [ 4]  404 	ld	c, l
      00014A 44               [ 4]  405 	ld	b, h
      00014B 21r56r01         [12]  406 	ld	hl, #(_player + 342)
      00014E 79               [ 4]  407 	ld	a, c
      00014F 22               [ 8]  408 	ld	(hl+), a
      000150 70               [ 8]  409 	ld	(hl), b
                           000151   410 	C$inventory.c$78$3_0$156	= .
                                    411 	.globl	C$inventory.c$78$3_0$156
                                    412 ;src/inventory.c:78: for (int i = COAL; i <= DIAMOND; i++) {
      000151 01 04 00         [12]  413 	ld	bc, #0x0004
      000154                        414 00107$:
      000154 58               [ 4]  415 	ld	e, b
      000155 16 00            [ 8]  416 	ld	d, #0x00
      000157 3E 12            [ 8]  417 	ld	a, #0x12
      000159 B9               [ 4]  418 	cp	a, c
      00015A 3E 00            [ 8]  419 	ld	a, #0x00
      00015C 98               [ 4]  420 	sbc	a, b
      00015D CB 7B            [ 8]  421 	bit	7, e
      00015F 28 07            [12]  422 	jr	Z, 00144$
      000161 CB 7A            [ 8]  423 	bit	7, d
      000163 20 08            [12]  424 	jr	NZ, 00145$
      000165 BF               [ 4]  425 	cp	a, a
      000166 18 05            [12]  426 	jr	00145$
      000168                        427 00144$:
      000168 CB 7A            [ 8]  428 	bit	7, d
      00016A 28 01            [12]  429 	jr	Z, 00145$
      00016C 37               [ 4]  430 	scf
      00016D                        431 00145$:
      00016D 38 13            [12]  432 	jr	C, 00102$
                           00016F   433 	C$inventory.c$79$3_0$156	= .
                                    434 	.globl	C$inventory.c$79$3_0$156
                                    435 ;src/inventory.c:79: materials[i].inventory = 0;  // Reset inventory after selling
      00016F 69               [ 4]  436 	ld	l, c
      000170 60               [ 4]  437 	ld	h, b
      000171 29               [ 8]  438 	add	hl, hl
      000172 29               [ 8]  439 	add	hl, hl
      000173 29               [ 8]  440 	add	hl, hl
      000174 09               [ 8]  441 	add	hl, bc
      000175 11r00r00         [12]  442 	ld	de, #_materials
      000178 19               [ 8]  443 	add	hl, de
      000179 11 07 00         [12]  444 	ld	de, #0x0007
      00017C 19               [ 8]  445 	add	hl, de
      00017D 36 00            [12]  446 	ld	(hl), #0x00
                           00017F   447 	C$inventory.c$78$2_0$155	= .
                                    448 	.globl	C$inventory.c$78$2_0$155
                                    449 ;src/inventory.c:78: for (int i = COAL; i <= DIAMOND; i++) {
      00017F 03               [ 8]  450 	inc	bc
      000180 18 D2            [12]  451 	jr	00107$
      000182                        452 00102$:
                           000182   453 	C$inventory.c$81$1_0$152	= .
                                    454 	.globl	C$inventory.c$81$1_0$152
                                    455 ;src/inventory.c:81: currentGameState = GAME_STATE_PLAY;
      000182 21r00r00         [12]  456 	ld	hl, #_currentGameState
      000185 36 03            [12]  457 	ld	(hl), #0x03
                           000187   458 	C$inventory.c$83$1_0$152	= .
                                    459 	.globl	C$inventory.c$83$1_0$152
                                    460 ;src/inventory.c:83: }
      000187 E8 04            [16]  461 	add	sp, #4
                           000189   462 	C$inventory.c$83$1_0$152	= .
                                    463 	.globl	C$inventory.c$83$1_0$152
                           000189   464 	XG$sell_all_ores$0$0	= .
                                    465 	.globl	XG$sell_all_ores$0$0
      000189 C9               [16]  466 	ret
                                    467 	.area _CODE
                           00018A   468 Finventory$__str_0$0_0$0 == .
      00018A                        469 ___str_0:
      00018A 45 6D 70 74 79         470 	.ascii "Empty"
      00018F 00                     471 	.db 0x00
                           000190   472 Finventory$__str_1$0_0$0 == .
      000190                        473 ___str_1:
      000190 44 69 72 74            474 	.ascii "Dirt"
      000194 00                     475 	.db 0x00
                           000195   476 Finventory$__str_2$0_0$0 == .
      000195                        477 ___str_2:
      000195 47 72 61 73 73         478 	.ascii "Grass"
      00019A 00                     479 	.db 0x00
                           00019B   480 Finventory$__str_3$0_0$0 == .
      00019B                        481 ___str_3:
      00019B 53 74 6F 6E 65         482 	.ascii "Stone"
      0001A0 00                     483 	.db 0x00
                           0001A1   484 Finventory$__str_4$0_0$0 == .
      0001A1                        485 ___str_4:
      0001A1 43 6F 61 6C            486 	.ascii "Coal"
      0001A5 00                     487 	.db 0x00
                           0001A6   488 Finventory$__str_5$0_0$0 == .
      0001A6                        489 ___str_5:
      0001A6 49 72 6F 6E            490 	.ascii "Iron"
      0001AA 00                     491 	.db 0x00
                           0001AB   492 Finventory$__str_6$0_0$0 == .
      0001AB                        493 ___str_6:
      0001AB 43 6F 70 70 65 72      494 	.ascii "Copper"
      0001B1 00                     495 	.db 0x00
                           0001B2   496 Finventory$__str_7$0_0$0 == .
      0001B2                        497 ___str_7:
      0001B2 54 69 6E               498 	.ascii "Tin"
      0001B5 00                     499 	.db 0x00
                           0001B6   500 Finventory$__str_8$0_0$0 == .
      0001B6                        501 ___str_8:
      0001B6 53 69 6C 76 65 72      502 	.ascii "Silver"
      0001BC 00                     503 	.db 0x00
                           0001BD   504 Finventory$__str_9$0_0$0 == .
      0001BD                        505 ___str_9:
      0001BD 47 6F 6C 64            506 	.ascii "Gold"
      0001C1 00                     507 	.db 0x00
                           0001C2   508 Finventory$__str_10$0_0$0 == .
      0001C2                        509 ___str_10:
      0001C2 4D 69 74 68 72 69 6C   510 	.ascii "Mithril"
      0001C9 00                     511 	.db 0x00
                           0001CA   512 Finventory$__str_11$0_0$0 == .
      0001CA                        513 ___str_11:
      0001CA 50 6C 61 74 69 6E 75   514 	.ascii "Platinum"
             6D
      0001D2 00                     515 	.db 0x00
                           0001D3   516 Finventory$__str_12$0_0$0 == .
      0001D3                        517 ___str_12:
      0001D3 54 69 74 61 6E 69 75   518 	.ascii "Titanium"
             6D
      0001DB 00                     519 	.db 0x00
                           0001DC   520 Finventory$__str_13$0_0$0 == .
      0001DC                        521 ___str_13:
      0001DC 4F 62 73 69 64 69 75   522 	.ascii "Obsidium"
             6D
      0001E4 00                     523 	.db 0x00
                           0001E5   524 Finventory$__str_14$0_0$0 == .
      0001E5                        525 ___str_14:
      0001E5 45 6C 65 6D 65 6E 74   526 	.ascii "Elementium"
             69 75 6D
      0001EF 00                     527 	.db 0x00
                           0001F0   528 Finventory$__str_15$0_0$0 == .
      0001F0                        529 ___str_15:
      0001F0 41 64 61 6D 61 6E 74   530 	.ascii "Adamantite"
             69 74 65
      0001FA 00                     531 	.db 0x00
                           0001FB   532 Finventory$__str_16$0_0$0 == .
      0001FB                        533 ___str_16:
      0001FB 45 6D 65 72 61 6C 64   534 	.ascii "Emerald"
      000202 00                     535 	.db 0x00
                           000203   536 Finventory$__str_17$0_0$0 == .
      000203                        537 ___str_17:
      000203 52 75 62 79            538 	.ascii "Ruby"
      000207 00                     539 	.db 0x00
                           000208   540 Finventory$__str_18$0_0$0 == .
      000208                        541 ___str_18:
      000208 44 69 61 6D 6F 6E 64   542 	.ascii "Diamond"
      00020F 00                     543 	.db 0x00
                           000210   544 Finventory$__str_19$0_0$0 == .
      000210                        545 ___str_19:
      000210 4C 61 76 61            546 	.ascii "Lava"
      000214 00                     547 	.db 0x00
                           000215   548 Finventory$__str_20$0_0$0 == .
      000215                        549 ___str_20:
      000215 47 61 73               550 	.ascii "Gas"
      000218 00                     551 	.db 0x00
                           000219   552 Finventory$__str_21$0_0$0 == .
      000219                        553 ___str_21:
      000219 42 6F 6E 65 73         554 	.ascii "Bones"
      00021E 00                     555 	.db 0x00
                           00021F   556 Finventory$__str_22$0_0$0 == .
      00021F                        557 ___str_22:
      00021F 41 72 74 65 66 61 63   558 	.ascii "Artefact"
             74
      000227 00                     559 	.db 0x00
                           000228   560 Finventory$__str_23$0_0$0 == .
      000228                        561 ___str_23:
      000228 54 72 65 61 73 75 72   562 	.ascii "Treasure"
             65
      000230 00                     563 	.db 0x00
                                    564 	.area _INITIALIZER
                           000000   565 Finventory$__xinit_materials$0_0$0 == .
      000000                        566 __xinit__materials:
      000000r8Ar01                  567 	.dw ___str_0
      000002 00                     568 	.db #0x00	; 0
      000003 00                     569 	.db #0x00	; 0
      000004 00                     570 	.db #0x00	; 0
      000005 00 00                  571 	.dw #0x0000
      000007 00                     572 	.db #0x00	; 0
      000008 00                     573 	.db #0x00	; 0
      000009r90r01                  574 	.dw ___str_1
      00000B 01                     575 	.db #0x01	; 1
      00000C 10                     576 	.db #0x10	; 16
      00000D 01                     577 	.db #0x01	; 1
      00000E 00 00                  578 	.dw #0x0000
      000010 00                     579 	.db #0x00	; 0
      000011 02                     580 	.db #0x02	; 2
      000012r95r01                  581 	.dw ___str_2
      000014 02                     582 	.db #0x02	; 2
      000015 10                     583 	.db #0x10	; 16
      000016 01                     584 	.db #0x01	; 1
      000017 00 00                  585 	.dw #0x0000
      000019 00                     586 	.db #0x00	; 0
      00001A 01                     587 	.db #0x01	; 1
      00001Br9Br01                  588 	.dw ___str_3
      00001D 03                     589 	.db #0x03	; 3
      00001E 00                     590 	.db #0x00	; 0
      00001F 00                     591 	.db #0x00	; 0
      000020 00 00                  592 	.dw #0x0000
      000022 00                     593 	.db #0x00	; 0
      000023 02                     594 	.db #0x02	; 2
      000024rA1r01                  595 	.dw ___str_4
      000026 04                     596 	.db #0x04	; 4
      000027 20                     597 	.db #0x20	; 32
      000028 01                     598 	.db #0x01	; 1
      000029 0F 00                  599 	.dw #0x000f
      00002B 00                     600 	.db #0x00	; 0
      00002C 03                     601 	.db #0x03	; 3
      00002DrA6r01                  602 	.dw ___str_5
      00002F 05                     603 	.db #0x05	; 5
      000030 20                     604 	.db #0x20	; 32
      000031 01                     605 	.db #0x01	; 1
      000032 1E 00                  606 	.dw #0x001e
      000034 00                     607 	.db #0x00	; 0
      000035 03                     608 	.db #0x03	; 3
      000036rABr01                  609 	.dw ___str_6
      000038 06                     610 	.db #0x06	; 6
      000039 28                     611 	.db #0x28	; 40
      00003A 02                     612 	.db #0x02	; 2
      00003B 3C 00                  613 	.dw #0x003c
      00003D 00                     614 	.db #0x00	; 0
      00003E 04                     615 	.db #0x04	; 4
      00003FrB2r01                  616 	.dw ___str_7
      000041 07                     617 	.db #0x07	; 7
      000042 2D                     618 	.db #0x2d	; 45
      000043 02                     619 	.db #0x02	; 2
      000044 50 00                  620 	.dw #0x0050
      000046 00                     621 	.db #0x00	; 0
      000047 02                     622 	.db #0x02	; 2
      000048rB6r01                  623 	.dw ___str_8
      00004A 08                     624 	.db #0x08	; 8
      00004B 32                     625 	.db #0x32	; 50	'2'
      00004C 03                     626 	.db #0x03	; 3
      00004D 64 00                  627 	.dw #0x0064
      00004F 00                     628 	.db #0x00	; 0
      000050 01                     629 	.db #0x01	; 1
      000051rBDr01                  630 	.dw ___str_9
      000053 09                     631 	.db #0x09	; 9
      000054 40                     632 	.db #0x40	; 64
      000055 03                     633 	.db #0x03	; 3
      000056 FA 00                  634 	.dw #0x00fa
      000058 00                     635 	.db #0x00	; 0
      000059 04                     636 	.db #0x04	; 4
      00005ArC2r01                  637 	.dw ___str_10
      00005C 0A                     638 	.db #0x0a	; 10
      00005D 50                     639 	.db #0x50	; 80	'P'
      00005E 04                     640 	.db #0x04	; 4
      00005F F4 01                  641 	.dw #0x01f4
      000061 00                     642 	.db #0x00	; 0
      000062 04                     643 	.db #0x04	; 4
      000063rCAr01                  644 	.dw ___str_11
      000065 0B                     645 	.db #0x0b	; 11
      000066 64                     646 	.db #0x64	; 100	'd'
      000067 05                     647 	.db #0x05	; 5
      000068 EE 02                  648 	.dw #0x02ee
      00006A 00                     649 	.db #0x00	; 0
      00006B 04                     650 	.db #0x04	; 4
      00006CrD3r01                  651 	.dw ___str_12
      00006E 0C                     652 	.db #0x0c	; 12
      00006F 78                     653 	.db #0x78	; 120	'x'
      000070 08                     654 	.db #0x08	; 8
      000071 B0 04                  655 	.dw #0x04b0
      000073 00                     656 	.db #0x00	; 0
      000074 04                     657 	.db #0x04	; 4
      000075rDCr01                  658 	.dw ___str_13
      000077 0D                     659 	.db #0x0d	; 13
      000078 96                     660 	.db #0x96	; 150
      000079 0A                     661 	.db #0x0a	; 10
      00007A 88 13                  662 	.dw #0x1388
      00007C 00                     663 	.db #0x00	; 0
      00007D 04                     664 	.db #0x04	; 4
      00007ErE5r01                  665 	.dw ___str_14
      000080 0E                     666 	.db #0x0e	; 14
      000081 C8                     667 	.db #0xc8	; 200
      000082 14                     668 	.db #0x14	; 20
      000083 10 27                  669 	.dw #0x2710
      000085 00                     670 	.db #0x00	; 0
      000086 04                     671 	.db #0x04	; 4
      000087rF0r01                  672 	.dw ___str_15
      000089 0F                     673 	.db #0x0f	; 15
      00008A FA                     674 	.db #0xfa	; 250
      00008B 1E                     675 	.db #0x1e	; 30
      00008C 98 3A                  676 	.dw #0x3a98
      00008E 00                     677 	.db #0x00	; 0
      00008F 04                     678 	.db #0x04	; 4
      000090rFBr01                  679 	.dw ___str_16
      000092 10                     680 	.db #0x10	; 16
      000093 50                     681 	.db #0x50	; 80	'P'
      000094 0A                     682 	.db #0x0a	; 10
      000095 D0 07                  683 	.dw #0x07d0
      000097 00                     684 	.db #0x00	; 0
      000098 04                     685 	.db #0x04	; 4
      000099r03r02                  686 	.dw ___str_17
      00009B 11                     687 	.db #0x11	; 17
      00009C 50                     688 	.db #0x50	; 80	'P'
      00009D 0A                     689 	.db #0x0a	; 10
      00009E 88 13                  690 	.dw #0x1388
      0000A0 00                     691 	.db #0x00	; 0
      0000A1 04                     692 	.db #0x04	; 4
      0000A2r08r02                  693 	.dw ___str_18
      0000A4 12                     694 	.db #0x12	; 18
      0000A5 A0                     695 	.db #0xa0	; 160
      0000A6 0A                     696 	.db #0x0a	; 10
      0000A7 10 27                  697 	.dw #0x2710
      0000A9 00                     698 	.db #0x00	; 0
      0000AA 04                     699 	.db #0x04	; 4
      0000ABr10r02                  700 	.dw ___str_19
      0000AD 14                     701 	.db #0x14	; 20
      0000AE 00                     702 	.db #0x00	; 0
      0000AF 00                     703 	.db #0x00	; 0
      0000B0 00 00                  704 	.dw #0x0000
      0000B2 00                     705 	.db #0x00	; 0
      0000B3 04                     706 	.db #0x04	; 4
      0000B4r15r02                  707 	.dw ___str_20
      0000B6 15                     708 	.db #0x15	; 21
      0000B7 00                     709 	.db #0x00	; 0
      0000B8 00                     710 	.db #0x00	; 0
      0000B9 00 00                  711 	.dw #0x0000
      0000BB 00                     712 	.db #0x00	; 0
      0000BC 04                     713 	.db #0x04	; 4
      0000BDr19r02                  714 	.dw ___str_21
      0000BF 1E                     715 	.db #0x1e	; 30
      0000C0 40                     716 	.db #0x40	; 64
      0000C1 00                     717 	.db #0x00	; 0
      0000C2 00 00                  718 	.dw #0x0000
      0000C4 00                     719 	.db #0x00	; 0
      0000C5 04                     720 	.db #0x04	; 4
      0000C6r1Fr02                  721 	.dw ___str_22
      0000C8 1F                     722 	.db #0x1f	; 31
      0000C9 40                     723 	.db #0x40	; 64
      0000CA 00                     724 	.db #0x00	; 0
      0000CB 00 00                  725 	.dw #0x0000
      0000CD 00                     726 	.db #0x00	; 0
      0000CE 04                     727 	.db #0x04	; 4
      0000CFr28r02                  728 	.dw ___str_23
      0000D1 20                     729 	.db #0x20	; 32
      0000D2 40                     730 	.db #0x40	; 64
      0000D3 00                     731 	.db #0x00	; 0
      0000D4 00 00                  732 	.dw #0x0000
      0000D6 00                     733 	.db #0x00	; 0
      0000D7 04                     734 	.db #0x04	; 4
                                    735 	.area _CABS (ABS)
