                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14228 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module map
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _init_progressbar
                                     12 	.globl _init_tiles
                                     13 	.globl _init_nav
                                     14 	.globl _draw_character
                                     15 	.globl _draw_hull
                                     16 	.globl _draw_fuel
                                     17 	.globl _draw_cargo
                                     18 	.globl _draw_depth
                                     19 	.globl _progressbar
                                     20 	.globl _add_block
                                     21 	.globl _clear_4bkg_tiles
                                     22 	.globl _spawn_bkg_row
                                     23 	.globl _set_4bkg_tiles
                                     24 	.globl _change_background_color
                                     25 	.globl _shuffle
                                     26 	.globl _draw_buildings
                                     27 	.globl b___func_bank_map
                                     28 	.globl ___func_bank_map
                                     29 	.globl _draw_metasprite
                                     30 	.globl _draw_text
                                     31 	.globl _rand
                                     32 	.globl _initrand
                                     33 	.globl _strcat
                                     34 	.globl _itoa
                                     35 	.globl _set_bkg_palette_entry
                                     36 	.globl _set_sprite_data
                                     37 	.globl _set_win_tiles
                                     38 	.globl _set_bkg_tiles
                                     39 	.globl _set_bkg_data
                                     40 ;--------------------------------------------------------
                                     41 ; special function registers
                                     42 ;--------------------------------------------------------
                                     43 ;--------------------------------------------------------
                                     44 ; ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area _DATA
                                     47 ;--------------------------------------------------------
                                     48 ; ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area _INITIALIZED
                                     51 ;--------------------------------------------------------
                                     52 ; absolute external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area _DABS (ABS)
                                     55 ;--------------------------------------------------------
                                     56 ; global & static initialisations
                                     57 ;--------------------------------------------------------
                                     58 	.area _HOME
                                     59 	.area _GSINIT
                                     60 	.area _GSFINAL
                                     61 	.area _GSINIT
                                     62 ;--------------------------------------------------------
                                     63 ; Home
                                     64 ;--------------------------------------------------------
                                     65 	.area _HOME
                                     66 	.area _HOME
                                     67 ;--------------------------------------------------------
                                     68 ; code
                                     69 ;--------------------------------------------------------
                                     70 	.area _CODE_1
                           000000    71 	G$__func_bank_map$0$0	= .
                                     72 	.globl	G$__func_bank_map$0$0
                           000000    73 	C$map.c$30$0_0$246	= .
                                     74 	.globl	C$map.c$30$0_0$246
                                     75 ;src/map.c:30: BANKREF(bank_map)
                                     76 ;	---------------------------------
                                     77 ; Function __func_bank_map
                                     78 ; ---------------------------------
                           000001    79 	b___func_bank_map	= 1
      000000                         80 ___func_bank_map::
                                     81 	.local b___func_bank_map 
                           000001    82 	___bank_bank_map = b___func_bank_map 
                                     83 	.globl ___bank_bank_map 
                           000000    84 	G$draw_buildings$0$0	= .
                                     85 	.globl	G$draw_buildings$0$0
                           000000    86 	C$map.c$33$1_0$249	= .
                                     87 	.globl	C$map.c$33$1_0$249
                                     88 ;src/map.c:33: void draw_buildings(void){
                                     89 ;	---------------------------------
                                     90 ; Function draw_buildings
                                     91 ; ---------------------------------
      000000                         92 _draw_buildings::
                           000000    93 	C$map.c$35$1_0$249	= .
                                     94 	.globl	C$map.c$35$1_0$249
                                     95 ;src/map.c:35: }
                           000000    96 	C$map.c$35$1_0$249	= .
                                     97 	.globl	C$map.c$35$1_0$249
                           000000    98 	XG$draw_buildings$0$0	= .
                                     99 	.globl	XG$draw_buildings$0$0
      000000 C9               [16]  100 	ret
                           000001   101 	G$shuffle$0$0	= .
                                    102 	.globl	G$shuffle$0$0
                           000001   103 	C$map.c$38$1_0$251	= .
                                    104 	.globl	C$map.c$38$1_0$251
                                    105 ;src/map.c:38: void shuffle(uint8_t array[4]) {
                                    106 ;	---------------------------------
                                    107 ; Function shuffle
                                    108 ; ---------------------------------
      000001                        109 _shuffle::
      000001 3B               [ 8]  110 	dec	sp
                           000002   111 	C$map.c$39$2_0$251	= .
                                    112 	.globl	C$map.c$39$2_0$251
                                    113 ;src/map.c:39: uint16_t seed = LY_REG;
      000002 F0r00            [12]  114 	ldh	a, (_LY_REG + 0)
      000004 6F               [ 4]  115 	ld	l, a
                                    116 ;	spillPairReg hl
                                    117 ;	spillPairReg hl
                                    118 ;	spillPairReg hl
                                    119 ;	spillPairReg hl
                           000005   120 	C$map.c$40$1_0$251	= .
                                    121 	.globl	C$map.c$40$1_0$251
                                    122 ;src/map.c:40: seed |= (uint16_t)DIV_REG << 8;
      000005 F0r00            [12]  123 	ldh	a, (_DIV_REG + 0)
      000007 4F               [ 4]  124 	ld	c, a
      000008 AF               [ 4]  125 	xor	a, a
      000009 B5               [ 4]  126 	or	a, l
                           00000A   127 	C$map.c$41$1_0$251	= .
                                    128 	.globl	C$map.c$41$1_0$251
                                    129 ;src/map.c:41: initrand(seed);
      00000A D5               [16]  130 	push	de
      00000B 41               [ 4]  131 	ld	b, c
      00000C 4F               [ 4]  132 	ld	c, a
      00000D C5               [16]  133 	push	bc
      00000E CDr00r00         [24]  134 	call	_initrand
      000011 E1               [12]  135 	pop	hl
      000012 CDr00r00         [24]  136 	call	_rand
      000015 7B               [ 4]  137 	ld	a, e
      000016 D1               [12]  138 	pop	de
      000017 E6 03            [ 8]  139 	and	a, #0x03
      000019 6F               [ 4]  140 	ld	l, a
                                    141 ;	spillPairReg hl
                                    142 ;	spillPairReg hl
                           00001A   143 	C$map.c$45$1_1$252	= .
                                    144 	.globl	C$map.c$45$1_1$252
                                    145 ;src/map.c:45: do {
      00001A                        146 00101$:
                           00001A   147 	C$map.c$46$2_1$253	= .
                                    148 	.globl	C$map.c$46$2_1$253
                                    149 ;src/map.c:46: secondSwapIndex = rand() % 4;
      00001A E5               [16]  150 	push	hl
      00001B D5               [16]  151 	push	de
      00001C CDr00r00         [24]  152 	call	_rand
      00001F 7B               [ 4]  153 	ld	a, e
      000020 D1               [12]  154 	pop	de
      000021 E1               [12]  155 	pop	hl
      000022 E6 03            [ 8]  156 	and	a, #0x03
      000024 4F               [ 4]  157 	ld	c, a
                           000025   158 	C$map.c$47$1_1$252	= .
                                    159 	.globl	C$map.c$47$1_1$252
                                    160 ;src/map.c:47: } while (firstSwapIndex == secondSwapIndex);  // Ensure it's a different index
      000025 7D               [ 4]  161 	ld	a, l
      000026 91               [ 4]  162 	sub	a, c
      000027 28 F1            [12]  163 	jr	Z, 00101$
                           000029   164 	C$map.c$50$1_2$254	= .
                                    165 	.globl	C$map.c$50$1_2$254
                                    166 ;src/map.c:50: uint8_t temp = array[firstSwapIndex];
      000029 26 00            [ 8]  167 	ld	h, #0x00
      00002B 19               [ 8]  168 	add	hl, de
      00002C 7E               [ 8]  169 	ld	a, (hl)
      00002D E5               [16]  170 	push	hl
      00002E F8 02            [12]  171 	ldhl	sp,	#2
      000030 77               [ 8]  172 	ld	(hl), a
      000031 E1               [12]  173 	pop	hl
                           000032   174 	C$map.c$51$1_2$254	= .
                                    175 	.globl	C$map.c$51$1_2$254
                                    176 ;src/map.c:51: array[firstSwapIndex] = array[secondSwapIndex];
      000032 7B               [ 4]  177 	ld	a, e
      000033 81               [ 4]  178 	add	a, c
      000034 4F               [ 4]  179 	ld	c, a
      000035 7A               [ 4]  180 	ld	a, d
      000036 CE 00            [ 8]  181 	adc	a, #0x00
      000038 47               [ 4]  182 	ld	b, a
      000039 0A               [ 8]  183 	ld	a, (bc)
      00003A 77               [ 8]  184 	ld	(hl), a
                           00003B   185 	C$map.c$52$1_2$254	= .
                                    186 	.globl	C$map.c$52$1_2$254
                                    187 ;src/map.c:52: array[secondSwapIndex] = temp;
      00003B F8 00            [12]  188 	ldhl	sp,	#0
      00003D 7E               [ 8]  189 	ld	a, (hl)
      00003E 02               [ 8]  190 	ld	(bc), a
                           00003F   191 	C$map.c$55$1_2$254	= .
                                    192 	.globl	C$map.c$55$1_2$254
                                    193 ;src/map.c:55: firstSwapIndex = rand() % 4;
      00003F D5               [16]  194 	push	de
      000040 CDr00r00         [24]  195 	call	_rand
      000043 7B               [ 4]  196 	ld	a, e
      000044 D1               [12]  197 	pop	de
      000045 E6 03            [ 8]  198 	and	a, #0x03
      000047 6F               [ 4]  199 	ld	l, a
                                    200 ;	spillPairReg hl
                                    201 ;	spillPairReg hl
                           000048   202 	C$map.c$56$1_2$254	= .
                                    203 	.globl	C$map.c$56$1_2$254
                                    204 ;src/map.c:56: do {
      000048                        205 00104$:
                           000048   206 	C$map.c$57$2_2$255	= .
                                    207 	.globl	C$map.c$57$2_2$255
                                    208 ;src/map.c:57: secondSwapIndex = rand() % 4;
      000048 E5               [16]  209 	push	hl
      000049 D5               [16]  210 	push	de
      00004A CDr00r00         [24]  211 	call	_rand
      00004D 7B               [ 4]  212 	ld	a, e
      00004E D1               [12]  213 	pop	de
      00004F E1               [12]  214 	pop	hl
      000050 E6 03            [ 8]  215 	and	a, #0x03
      000052 47               [ 4]  216 	ld	b, a
                           000053   217 	C$map.c$58$1_2$254	= .
                                    218 	.globl	C$map.c$58$1_2$254
                                    219 ;src/map.c:58: } while (firstSwapIndex == secondSwapIndex);  // Ensure it's a different index
      000053 7D               [ 4]  220 	ld	a, l
      000054 90               [ 4]  221 	sub	a, b
      000055 28 F1            [12]  222 	jr	Z, 00104$
                           000057   223 	C$map.c$60$1_2$254	= .
                                    224 	.globl	C$map.c$60$1_2$254
                                    225 ;src/map.c:60: temp = array[firstSwapIndex];
      000057 26 00            [ 8]  226 	ld	h, #0x00
      000059 19               [ 8]  227 	add	hl, de
      00005A 4E               [ 8]  228 	ld	c, (hl)
                           00005B   229 	C$map.c$61$1_2$254	= .
                                    230 	.globl	C$map.c$61$1_2$254
                                    231 ;src/map.c:61: array[firstSwapIndex] = array[secondSwapIndex];
      00005B 7B               [ 4]  232 	ld	a, e
      00005C 80               [ 4]  233 	add	a, b
      00005D 5F               [ 4]  234 	ld	e, a
      00005E 30 01            [12]  235 	jr	NC, 00139$
      000060 14               [ 4]  236 	inc	d
      000061                        237 00139$:
      000061 1A               [ 8]  238 	ld	a, (de)
      000062 77               [ 8]  239 	ld	(hl), a
                           000063   240 	C$map.c$62$1_2$254	= .
                                    241 	.globl	C$map.c$62$1_2$254
                                    242 ;src/map.c:62: array[secondSwapIndex] = temp;
      000063 79               [ 4]  243 	ld	a, c
      000064 12               [ 8]  244 	ld	(de), a
                           000065   245 	C$map.c$63$1_2$251	= .
                                    246 	.globl	C$map.c$63$1_2$251
                                    247 ;src/map.c:63: }
      000065 33               [ 8]  248 	inc	sp
                           000066   249 	C$map.c$63$1_2$251	= .
                                    250 	.globl	C$map.c$63$1_2$251
                           000066   251 	XG$shuffle$0$0	= .
                                    252 	.globl	XG$shuffle$0$0
      000066 C9               [16]  253 	ret
                           000067   254 	G$change_background_color$0$0	= .
                                    255 	.globl	G$change_background_color$0$0
                           000067   256 	C$map.c$65$1_2$257	= .
                                    257 	.globl	C$map.c$65$1_2$257
                                    258 ;src/map.c:65: void change_background_color(void) {
                                    259 ;	---------------------------------
                                    260 ; Function change_background_color
                                    261 ; ---------------------------------
      000067                        262 _change_background_color::
                           000067   263 	C$map.c$66$1_0$257	= .
                                    264 	.globl	C$map.c$66$1_0$257
                                    265 ;src/map.c:66: set_bkg_palette_entry(0,0,RGB8(255 - depth, 255, 255));
      000067 21r00r00         [12]  266 	ld	hl, #_depth
      00006A 4E               [ 8]  267 	ld	c, (hl)
      00006B 06 00            [ 8]  268 	ld	b, #0x00
      00006D 3E FF            [ 8]  269 	ld	a, #0xff
      00006F 91               [ 4]  270 	sub	a, c
      000070 4F               [ 4]  271 	ld	c, a
      000071 9F               [ 4]  272 	sbc	a, a
      000072 90               [ 4]  273 	sub	a, b
      000073 47               [ 4]  274 	ld	b, a
      000074 CB 28            [ 8]  275 	sra	b
      000076 CB 19            [ 8]  276 	rr	c
      000078 CB 28            [ 8]  277 	sra	b
      00007A CB 19            [ 8]  278 	rr	c
      00007C CB 28            [ 8]  279 	sra	b
      00007E CB 19            [ 8]  280 	rr	c
      000080 79               [ 4]  281 	ld	a, c
      000081 E6 1F            [ 8]  282 	and	a, #0x1f
      000083 F6 E0            [ 8]  283 	or	a, #0xe0
      000085 06 7F            [ 8]  284 	ld	b, #0x7f
      000087 4F               [ 4]  285 	ld	c, a
      000088 C5               [16]  286 	push	bc
      000089 AF               [ 4]  287 	xor	a, a
      00008A 0F               [ 4]  288 	rrca
      00008B F5               [16]  289 	push	af
      00008C CDr00r00         [24]  290 	call	_set_bkg_palette_entry
      00008F E8 04            [16]  291 	add	sp, #4
                           000091   292 	C$map.c$67$1_0$257	= .
                                    293 	.globl	C$map.c$67$1_0$257
                                    294 ;src/map.c:67: }
                           000091   295 	C$map.c$67$1_0$257	= .
                                    296 	.globl	C$map.c$67$1_0$257
                           000091   297 	XG$change_background_color$0$0	= .
                                    298 	.globl	XG$change_background_color$0$0
      000091 C9               [16]  299 	ret
                           000092   300 	G$set_4bkg_tiles$0$0	= .
                                    301 	.globl	G$set_4bkg_tiles$0$0
                           000092   302 	C$map.c$78$1_0$260	= .
                                    303 	.globl	C$map.c$78$1_0$260
                                    304 ;src/map.c:78: void set_4bkg_tiles(uint8_t array[][16], uint8_t x1, uint8_t y1, uint8_t r, uint8_t c) {
                                    305 ;	---------------------------------
                                    306 ; Function set_4bkg_tiles
                                    307 ; ---------------------------------
      000092                        308 _set_4bkg_tiles::
      000092 E8 E8            [16]  309 	add	sp, #-24
      000094 F8 12            [12]  310 	ldhl	sp,	#18
      000096 73               [ 8]  311 	ld	(hl), e
      000097 23               [ 8]  312 	inc	hl
      000098 72               [ 8]  313 	ld	(hl), d
      000099 2B               [ 8]  314 	dec	hl
      00009A 2B               [ 8]  315 	dec	hl
      00009B 77               [ 8]  316 	ld	(hl), a
                           00009C   317 	C$map.c$79$3_0$260	= .
                                    318 	.globl	C$map.c$79$3_0$260
                                    319 ;src/map.c:79: for (uint8_t y = y1; y < y1 + r; y++) {
      00009C F8 1A            [12]  320 	ldhl	sp,	#26
      00009E 7E               [ 8]  321 	ld	a, (hl)
      00009F F8 14            [12]  322 	ldhl	sp,	#20
      0000A1 77               [ 8]  323 	ld	(hl), a
      0000A2                        324 00134$:
      0000A2 F8 1A            [12]  325 	ldhl	sp,	#26
      0000A4 2A               [ 8]  326 	ld	a, (hl+)
      0000A5 06 00            [ 8]  327 	ld	b, #0x00
      0000A7 5E               [ 8]  328 	ld	e, (hl)
      0000A8 83               [ 4]  329 	add	a, e
      0000A9 4F               [ 4]  330 	ld	c, a
      0000AA 30 01            [12]  331 	jr	NC, 00264$
      0000AC 04               [ 4]  332 	inc	b
      0000AD                        333 00264$:
      0000AD F8 14            [12]  334 	ldhl	sp,	#20
      0000AF 7E               [ 8]  335 	ld	a, (hl)
      0000B0 F8 08            [12]  336 	ldhl	sp,	#8
      0000B2 22               [ 8]  337 	ld	(hl+), a
      0000B3 AF               [ 4]  338 	xor	a, a
      0000B4 32               [ 8]  339 	ld	(hl-), a
      0000B5 2A               [ 8]  340 	ld	a, (hl+)
      0000B6 91               [ 4]  341 	sub	a, c
      0000B7 7E               [ 8]  342 	ld	a, (hl)
      0000B8 98               [ 4]  343 	sbc	a, b
      0000B9 56               [ 8]  344 	ld	d, (hl)
      0000BA 78               [ 4]  345 	ld	a, b
      0000BB 5F               [ 4]  346 	ld	e, a
      0000BC CB 7B            [ 8]  347 	bit	7, e
      0000BE 28 07            [12]  348 	jr	Z, 00265$
      0000C0 CB 7A            [ 8]  349 	bit	7, d
      0000C2 20 08            [12]  350 	jr	NZ, 00266$
      0000C4 BF               [ 4]  351 	cp	a, a
      0000C5 18 05            [12]  352 	jr	00266$
      0000C7                        353 00265$:
      0000C7 CB 7A            [ 8]  354 	bit	7, d
      0000C9 28 01            [12]  355 	jr	Z, 00266$
      0000CB 37               [ 4]  356 	scf
      0000CC                        357 00266$:
      0000CC D2r63r03         [16]  358 	jp	NC, 00136$
                           0000CF   359 	C$map.c$80$5_0$263	= .
                                    360 	.globl	C$map.c$80$5_0$263
                                    361 ;src/map.c:80: for (uint8_t x = x1; x < x1 + c; x++) {
      0000CF F8 14            [12]  362 	ldhl	sp,	#20
      0000D1 7E               [ 8]  363 	ld	a, (hl)
      0000D2 87               [ 4]  364 	add	a, a
      0000D3 F8 0A            [12]  365 	ldhl	sp,	#10
      0000D5 77               [ 8]  366 	ld	(hl), a
      0000D6 F8 11            [12]  367 	ldhl	sp,	#17
      0000D8 7E               [ 8]  368 	ld	a, (hl)
      0000D9 F8 15            [12]  369 	ldhl	sp,	#21
      0000DB 77               [ 8]  370 	ld	(hl), a
      0000DC                        371 00131$:
      0000DC F8 11            [12]  372 	ldhl	sp,	#17
      0000DE 7E               [ 8]  373 	ld	a, (hl)
      0000DF F8 0D            [12]  374 	ldhl	sp,	#13
      0000E1 22               [ 8]  375 	ld	(hl+), a
      0000E2 36 00            [12]  376 	ld	(hl), #0x00
      0000E4 F8 1C            [12]  377 	ldhl	sp,	#28
      0000E6 7E               [ 8]  378 	ld	a, (hl)
      0000E7 F8 0F            [12]  379 	ldhl	sp,	#15
      0000E9 22               [ 8]  380 	ld	(hl+), a
      0000EA AF               [ 4]  381 	xor	a, a
      0000EB 32               [ 8]  382 	ld	(hl-), a
      0000EC 2A               [ 8]  383 	ld	a, (hl+)
      0000ED 5F               [ 4]  384 	ld	e, a
      0000EE 56               [ 8]  385 	ld	d, (hl)
      0000EF F8 0D            [12]  386 	ldhl	sp,	#13
      0000F1 2A               [ 8]  387 	ld	a,	(hl+)
      0000F2 66               [ 8]  388 	ld	h, (hl)
      0000F3 6F               [ 4]  389 	ld	l, a
      0000F4 19               [ 8]  390 	add	hl, de
      0000F5 E5               [16]  391 	push	hl
      0000F6 7D               [ 4]  392 	ld	a, l
      0000F7 F8 18            [12]  393 	ldhl	sp,	#24
      0000F9 77               [ 8]  394 	ld	(hl), a
      0000FA E1               [12]  395 	pop	hl
      0000FB 7C               [ 4]  396 	ld	a, h
      0000FC F8 17            [12]  397 	ldhl	sp,	#23
      0000FE 32               [ 8]  398 	ld	(hl-), a
      0000FF 2B               [ 8]  399 	dec	hl
      000100 7E               [ 8]  400 	ld	a, (hl)
      000101 F8 0F            [12]  401 	ldhl	sp,	#15
      000103 22               [ 8]  402 	ld	(hl+), a
      000104 36 00            [12]  403 	ld	(hl), #0x00
      000106 F8 0F            [12]  404 	ldhl	sp,	#15
      000108 5D               [ 4]  405 	ld	e, l
      000109 54               [ 4]  406 	ld	d, h
      00010A F8 16            [12]  407 	ldhl	sp,	#22
      00010C 1A               [ 8]  408 	ld	a, (de)
      00010D 13               [ 8]  409 	inc	de
      00010E 96               [ 8]  410 	sub	a, (hl)
      00010F 23               [ 8]  411 	inc	hl
      000110 1A               [ 8]  412 	ld	a, (de)
      000111 9E               [ 8]  413 	sbc	a, (hl)
      000112 1A               [ 8]  414 	ld	a, (de)
      000113 57               [ 4]  415 	ld	d, a
      000114 CB 7E            [12]  416 	bit	7, (hl)
      000116 28 07            [12]  417 	jr	Z, 00267$
      000118 CB 7A            [ 8]  418 	bit	7, d
      00011A 20 08            [12]  419 	jr	NZ, 00268$
      00011C BF               [ 4]  420 	cp	a, a
      00011D 18 05            [12]  421 	jr	00268$
      00011F                        422 00267$:
      00011F CB 7A            [ 8]  423 	bit	7, d
      000121 28 01            [12]  424 	jr	Z, 00268$
      000123 37               [ 4]  425 	scf
      000124                        426 00268$:
      000124 D2r5Dr03         [16]  427 	jp	NC, 00135$
                           000127   428 	C$map.c$81$5_0$263	= .
                                    429 	.globl	C$map.c$81$5_0$263
                                    430 ;src/map.c:81: uint8_t temp = (array[y][x] * 4) + TILESTART - 4;
      000127 F8 08            [12]  431 	ldhl	sp,	#8
      000129 7E               [ 8]  432 	ld	a, (hl)
      00012A 16 00            [ 8]  433 	ld	d, #0x00
      00012C 87               [ 4]  434 	add	a, a
      00012D CB 12            [ 8]  435 	rl	d
      00012F 87               [ 4]  436 	add	a, a
      000130 CB 12            [ 8]  437 	rl	d
      000132 87               [ 4]  438 	add	a, a
      000133 CB 12            [ 8]  439 	rl	d
      000135 87               [ 4]  440 	add	a, a
      000136 CB 12            [ 8]  441 	rl	d
      000138 5F               [ 4]  442 	ld	e, a
      000139 F8 12            [12]  443 	ldhl	sp,	#18
      00013B 2A               [ 8]  444 	ld	a,	(hl+)
      00013C 66               [ 8]  445 	ld	h, (hl)
      00013D 6F               [ 4]  446 	ld	l, a
      00013E 19               [ 8]  447 	add	hl, de
      00013F 4D               [ 4]  448 	ld	c, l
      000140 44               [ 4]  449 	ld	b, h
      000141 F8 15            [12]  450 	ldhl	sp,	#21
      000143 6E               [ 8]  451 	ld	l, (hl)
      000144 26 00            [ 8]  452 	ld	h, #0x00
      000146 09               [ 8]  453 	add	hl, bc
      000147 4D               [ 4]  454 	ld	c, l
      000148 44               [ 4]  455 	ld	b, h
      000149 0A               [ 8]  456 	ld	a, (bc)
      00014A 87               [ 4]  457 	add	a, a
      00014B 87               [ 4]  458 	add	a, a
      00014C C6 58            [ 8]  459 	add	a, #0x58
      00014E F8 17            [12]  460 	ldhl	sp,	#23
      000150 77               [ 8]  461 	ld	(hl), a
                           000151   462 	C$map.c$82$5_0$263	= .
                                    463 	.globl	C$map.c$82$5_0$263
                                    464 ;src/map.c:82: uint8_t tile_array[4] = {temp, temp + 1, temp + 2, temp + 3};
      000151 7E               [ 8]  465 	ld	a, (hl)
      000152 F8 00            [12]  466 	ldhl	sp,	#0
      000154 77               [ 8]  467 	ld	(hl), a
      000155 F8 17            [12]  468 	ldhl	sp,	#23
      000157 7E               [ 8]  469 	ld	a, (hl)
      000158 F8 10            [12]  470 	ldhl	sp,	#16
      00015A 77               [ 8]  471 	ld	(hl), a
      00015B 7E               [ 8]  472 	ld	a, (hl)
      00015C 3C               [ 4]  473 	inc	a
      00015D F8 01            [12]  474 	ldhl	sp,	#1
      00015F 77               [ 8]  475 	ld	(hl), a
      000160 F8 10            [12]  476 	ldhl	sp,	#16
      000162 7E               [ 8]  477 	ld	a, (hl)
      000163 3C               [ 4]  478 	inc	a
      000164 3C               [ 4]  479 	inc	a
      000165 F8 02            [12]  480 	ldhl	sp,	#2
      000167 77               [ 8]  481 	ld	(hl), a
      000168 F8 10            [12]  482 	ldhl	sp,	#16
      00016A 7E               [ 8]  483 	ld	a, (hl)
      00016B 3C               [ 4]  484 	inc	a
      00016C 3C               [ 4]  485 	inc	a
      00016D 3C               [ 4]  486 	inc	a
      00016E F8 03            [12]  487 	ldhl	sp,	#3
      000170 77               [ 8]  488 	ld	(hl), a
                           000171   489 	C$map.c$85$5_0$263	= .
                                    490 	.globl	C$map.c$85$5_0$263
                                    491 ;src/map.c:85: if (array[y][x] == EMPTY) {
      000171 0A               [ 8]  492 	ld	a, (bc)
                           000172   493 	C$map.c$86$2_0$260	= .
                                    494 	.globl	C$map.c$86$2_0$260
                                    495 ;src/map.c:86: for (int i = 0; i < 4; i++) tile_array[i] = 0;
      000172 B7               [ 4]  496 	or	a,a
      000173 20 3D            [12]  497 	jr	NZ, 00109$
      000175 F8 16            [12]  498 	ldhl	sp,	#22
      000177 22               [ 8]  499 	ld	(hl+), a
      000178 77               [ 8]  500 	ld	(hl), a
      000179                        501 00119$:
      000179 F8 16            [12]  502 	ldhl	sp,	#22
      00017B 2A               [ 8]  503 	ld	a, (hl+)
      00017C D6 04            [ 8]  504 	sub	a, #0x04
      00017E 7E               [ 8]  505 	ld	a, (hl)
      00017F DE 00            [ 8]  506 	sbc	a, #0x00
      000181 56               [ 8]  507 	ld	d, (hl)
      000182 3E 00            [ 8]  508 	ld	a, #0x00
      000184 CB 7F            [ 8]  509 	bit	7,a
      000186 28 07            [12]  510 	jr	Z, 00270$
      000188 CB 7A            [ 8]  511 	bit	7, d
      00018A 20 08            [12]  512 	jr	NZ, 00271$
      00018C BF               [ 4]  513 	cp	a, a
      00018D 18 05            [12]  514 	jr	00271$
      00018F                        515 00270$:
      00018F CB 7A            [ 8]  516 	bit	7, d
      000191 28 01            [12]  517 	jr	Z, 00271$
      000193 37               [ 4]  518 	scf
      000194                        519 00271$:
      000194 D2r32r02         [16]  520 	jp	NC, 00110$
      000197 E5               [16]  521 	push	hl
      000198 21 02 00         [12]  522 	ld	hl, #2
      00019B 39               [ 8]  523 	add	hl, sp
      00019C 5D               [ 4]  524 	ld	e, l
      00019D 54               [ 4]  525 	ld	d, h
      00019E E1               [12]  526 	pop	hl
      00019F F8 16            [12]  527 	ldhl	sp,	#22
      0001A1 2A               [ 8]  528 	ld	a,	(hl+)
      0001A2 66               [ 8]  529 	ld	h, (hl)
      0001A3 6F               [ 4]  530 	ld	l, a
      0001A4 19               [ 8]  531 	add	hl, de
      0001A5 5D               [ 4]  532 	ld	e, l
      0001A6 54               [ 4]  533 	ld	d, h
      0001A7 AF               [ 4]  534 	xor	a, a
      0001A8 12               [ 8]  535 	ld	(de), a
      0001A9 F8 16            [12]  536 	ldhl	sp,	#22
      0001AB 34               [12]  537 	inc	(hl)
      0001AC 20 CB            [12]  538 	jr	NZ, 00119$
      0001AE 23               [ 8]  539 	inc	hl
      0001AF 34               [12]  540 	inc	(hl)
      0001B0 18 C7            [12]  541 	jr	00119$
      0001B2                        542 00109$:
                           0001B2   543 	C$map.c$87$5_0$263	= .
                                    544 	.globl	C$map.c$87$5_0$263
                                    545 ;src/map.c:87: } else if (array[y][x] == GRAS) {
      0001B2 FE 02            [ 8]  546 	cp	a, #0x02
      0001B4 20 2D            [12]  547 	jr	NZ, 00106$
                           0001B6   548 	C$map.c$88$6_0$266	= .
                                    549 	.globl	C$map.c$88$6_0$266
                                    550 ;src/map.c:88: tile_array[0] = temp + (rand() % 4);
      0001B6 C5               [16]  551 	push	bc
      0001B7 CDr00r00         [24]  552 	call	_rand
      0001BA 7B               [ 4]  553 	ld	a, e
      0001BB C1               [12]  554 	pop	bc
      0001BC E6 03            [ 8]  555 	and	a, #0x03
      0001BE F8 10            [12]  556 	ldhl	sp,	#16
      0001C0 86               [ 8]  557 	add	a, (hl)
      0001C1 F8 00            [12]  558 	ldhl	sp,	#0
      0001C3 77               [ 8]  559 	ld	(hl), a
                           0001C4   560 	C$map.c$89$6_0$266	= .
                                    561 	.globl	C$map.c$89$6_0$266
                                    562 ;src/map.c:89: tile_array[1] = temp + (rand() % 4);
      0001C4 C5               [16]  563 	push	bc
      0001C5 CDr00r00         [24]  564 	call	_rand
      0001C8 7B               [ 4]  565 	ld	a, e
      0001C9 C1               [12]  566 	pop	bc
      0001CA E6 03            [ 8]  567 	and	a, #0x03
      0001CC F8 10            [12]  568 	ldhl	sp,	#16
      0001CE 86               [ 8]  569 	add	a, (hl)
      0001CF F8 01            [12]  570 	ldhl	sp,	#1
      0001D1 77               [ 8]  571 	ld	(hl), a
                           0001D2   572 	C$map.c$90$6_0$266	= .
                                    573 	.globl	C$map.c$90$6_0$266
                                    574 ;src/map.c:90: tile_array[2] = temp - 1;
      0001D2 F8 10            [12]  575 	ldhl	sp,	#16
      0001D4 7E               [ 8]  576 	ld	a, (hl)
      0001D5 3D               [ 4]  577 	dec	a
      0001D6 F8 02            [12]  578 	ldhl	sp,	#2
      0001D8 77               [ 8]  579 	ld	(hl), a
                           0001D9   580 	C$map.c$91$6_0$266	= .
                                    581 	.globl	C$map.c$91$6_0$266
                                    582 ;src/map.c:91: tile_array[3] = temp - 2;
      0001D9 F8 10            [12]  583 	ldhl	sp,	#16
      0001DB 7E               [ 8]  584 	ld	a, (hl)
      0001DC 3D               [ 4]  585 	dec	a
      0001DD 3D               [ 4]  586 	dec	a
      0001DE F8 03            [12]  587 	ldhl	sp,	#3
      0001E0 77               [ 8]  588 	ld	(hl), a
      0001E1 18 4F            [12]  589 	jr	00110$
      0001E3                        590 00106$:
                           0001E3   591 	C$map.c$92$5_0$263	= .
                                    592 	.globl	C$map.c$92$5_0$263
                                    593 ;src/map.c:92: } else if (array[y][x] == DIRT) {
                           0001E3   594 	C$map.c$93$2_0$260	= .
                                    595 	.globl	C$map.c$93$2_0$260
                                    596 ;src/map.c:93: for (int i = 0; i < 4; i++) tile_array[i] = temp + i;
      0001E3 3D               [ 4]  597 	dec	a
      0001E4 20 4C            [12]  598 	jr	NZ, 00110$
      0001E6 F8 16            [12]  599 	ldhl	sp,	#22
      0001E8 22               [ 8]  600 	ld	(hl+), a
      0001E9 77               [ 8]  601 	ld	(hl), a
      0001EA                        602 00122$:
      0001EA F8 16            [12]  603 	ldhl	sp,	#22
      0001EC 2A               [ 8]  604 	ld	a, (hl+)
      0001ED D6 04            [ 8]  605 	sub	a, #0x04
      0001EF 7E               [ 8]  606 	ld	a, (hl)
      0001F0 DE 00            [ 8]  607 	sbc	a, #0x00
      0001F2 56               [ 8]  608 	ld	d, (hl)
      0001F3 3E 00            [ 8]  609 	ld	a, #0x00
      0001F5 CB 7F            [ 8]  610 	bit	7,a
      0001F7 28 07            [12]  611 	jr	Z, 00277$
      0001F9 CB 7A            [ 8]  612 	bit	7, d
      0001FB 20 08            [12]  613 	jr	NZ, 00278$
      0001FD BF               [ 4]  614 	cp	a, a
      0001FE 18 05            [12]  615 	jr	00278$
      000200                        616 00277$:
      000200 CB 7A            [ 8]  617 	bit	7, d
      000202 28 01            [12]  618 	jr	Z, 00278$
      000204 37               [ 4]  619 	scf
      000205                        620 00278$:
      000205 30 20            [12]  621 	jr	NC, 00102$
      000207 E5               [16]  622 	push	hl
      000208 21 02 00         [12]  623 	ld	hl, #2
      00020B 39               [ 8]  624 	add	hl, sp
      00020C 5D               [ 4]  625 	ld	e, l
      00020D 54               [ 4]  626 	ld	d, h
      00020E E1               [12]  627 	pop	hl
      00020F F8 16            [12]  628 	ldhl	sp,	#22
      000211 2A               [ 8]  629 	ld	a,	(hl+)
      000212 66               [ 8]  630 	ld	h, (hl)
      000213 6F               [ 4]  631 	ld	l, a
      000214 19               [ 8]  632 	add	hl, de
      000215 5D               [ 4]  633 	ld	e, l
      000216 54               [ 4]  634 	ld	d, h
      000217 F8 16            [12]  635 	ldhl	sp,	#22
      000219 7E               [ 8]  636 	ld	a, (hl)
      00021A F8 10            [12]  637 	ldhl	sp,	#16
      00021C 86               [ 8]  638 	add	a, (hl)
      00021D 12               [ 8]  639 	ld	(de), a
      00021E F8 16            [12]  640 	ldhl	sp,	#22
      000220 34               [12]  641 	inc	(hl)
      000221 20 C7            [12]  642 	jr	NZ, 00122$
      000223 23               [ 8]  643 	inc	hl
      000224 34               [12]  644 	inc	(hl)
      000225 18 C3            [12]  645 	jr	00122$
      000227                        646 00102$:
                           000227   647 	C$map.c$94$6_0$267	= .
                                    648 	.globl	C$map.c$94$6_0$267
                                    649 ;src/map.c:94: shuffle(tile_array);
      000227 C5               [16]  650 	push	bc
      000228 21 02 00         [12]  651 	ld	hl, #2
      00022B 39               [ 8]  652 	add	hl, sp
      00022C 5D               [ 4]  653 	ld	e, l
      00022D 54               [ 4]  654 	ld	d, h
      00022E CDr01r00         [24]  655 	call	_shuffle
      000231 C1               [12]  656 	pop	bc
      000232                        657 00110$:
                           000232   658 	C$map.c$97$5_0$263	= .
                                    659 	.globl	C$map.c$97$5_0$263
                                    660 ;src/map.c:97: if (array[y][x] == EMPTY) {
      000232 0A               [ 8]  661 	ld	a, (bc)
      000233 B7               [ 4]  662 	or	a, a
      000234 20 19            [12]  663 	jr	NZ, 00153$
                           000236   664 	C$map.c$98$2_0$260	= .
                                    665 	.globl	C$map.c$98$2_0$260
                                    666 ;src/map.c:98: for (int i = 0; i < 4; i++) palette_array[i] = 0;
      000236 01 00 00         [12]  667 	ld	bc, #0x0000
      000239                        668 00125$:
      000239 79               [ 4]  669 	ld	a, c
      00023A D6 04            [ 8]  670 	sub	a, #0x04
      00023C 78               [ 4]  671 	ld	a, b
      00023D 17               [ 4]  672 	rla
      00023E 3F               [ 4]  673 	ccf
      00023F 1F               [ 4]  674 	rra
      000240 DE 80            [ 8]  675 	sbc	a, #0x80
      000242 D2rF2r02         [16]  676 	jp	NC, 00115$
      000245 21 04 00         [12]  677 	ld	hl, #4
      000248 39               [ 8]  678 	add	hl, sp
      000249 09               [ 8]  679 	add	hl, bc
      00024A 36 00            [12]  680 	ld	(hl), #0x00
      00024C 03               [ 8]  681 	inc	bc
      00024D 18 EA            [12]  682 	jr	00125$
                           00024F   683 	C$map.c$100$2_0$260	= .
                                    684 	.globl	C$map.c$100$2_0$260
                                    685 ;src/map.c:100: for (int i = 0; i < 4; i++) palette_array[i] = materials[(tile_array[i] + 4 - TILESTART) / 4].color_palette;
      00024F                        686 00153$:
      00024F AF               [ 4]  687 	xor	a, a
      000250 F8 16            [12]  688 	ldhl	sp,	#22
      000252 22               [ 8]  689 	ld	(hl+), a
      000253 77               [ 8]  690 	ld	(hl), a
      000254                        691 00128$:
      000254 F8 16            [12]  692 	ldhl	sp,	#22
      000256 2A               [ 8]  693 	ld	a, (hl+)
      000257 D6 04            [ 8]  694 	sub	a, #0x04
      000259 7E               [ 8]  695 	ld	a, (hl)
      00025A DE 00            [ 8]  696 	sbc	a, #0x00
      00025C 56               [ 8]  697 	ld	d, (hl)
      00025D 3E 00            [ 8]  698 	ld	a, #0x00
      00025F CB 7F            [ 8]  699 	bit	7,a
      000261 28 07            [12]  700 	jr	Z, 00280$
      000263 CB 7A            [ 8]  701 	bit	7, d
      000265 20 08            [12]  702 	jr	NZ, 00281$
      000267 BF               [ 4]  703 	cp	a, a
      000268 18 05            [12]  704 	jr	00281$
      00026A                        705 00280$:
      00026A CB 7A            [ 8]  706 	bit	7, d
      00026C 28 01            [12]  707 	jr	Z, 00281$
      00026E 37               [ 4]  708 	scf
      00026F                        709 00281$:
      00026F D2rF2r02         [16]  710 	jp	NC, 00115$
      000272 E5               [16]  711 	push	hl
      000273 21 06 00         [12]  712 	ld	hl, #6
      000276 39               [ 8]  713 	add	hl, sp
      000277 5D               [ 4]  714 	ld	e, l
      000278 54               [ 4]  715 	ld	d, h
      000279 E1               [12]  716 	pop	hl
      00027A F8 16            [12]  717 	ldhl	sp,	#22
      00027C 2A               [ 8]  718 	ld	a,	(hl+)
      00027D 66               [ 8]  719 	ld	h, (hl)
      00027E 6F               [ 4]  720 	ld	l, a
      00027F 19               [ 8]  721 	add	hl, de
      000280 E5               [16]  722 	push	hl
      000281 7D               [ 4]  723 	ld	a, l
      000282 F8 0D            [12]  724 	ldhl	sp,	#13
      000284 77               [ 8]  725 	ld	(hl), a
      000285 E1               [12]  726 	pop	hl
      000286 7C               [ 4]  727 	ld	a, h
      000287 F8 0C            [12]  728 	ldhl	sp,	#12
      000289 77               [ 8]  729 	ld	(hl), a
      00028A E5               [16]  730 	push	hl
      00028B 21 02 00         [12]  731 	ld	hl, #2
      00028E 39               [ 8]  732 	add	hl, sp
      00028F 5D               [ 4]  733 	ld	e, l
      000290 54               [ 4]  734 	ld	d, h
      000291 E1               [12]  735 	pop	hl
      000292 F8 16            [12]  736 	ldhl	sp,	#22
      000294 2A               [ 8]  737 	ld	a,	(hl+)
      000295 66               [ 8]  738 	ld	h, (hl)
      000296 6F               [ 4]  739 	ld	l, a
      000297 19               [ 8]  740 	add	hl, de
      000298 4D               [ 4]  741 	ld	c, l
      000299 44               [ 4]  742 	ld	b, h
      00029A 0A               [ 8]  743 	ld	a, (bc)
      00029B 4F               [ 4]  744 	ld	c, a
      00029C 06 00            [ 8]  745 	ld	b, #0x00
      00029E 21 A8 FF         [12]  746 	ld	hl, #0xffa8
      0002A1 09               [ 8]  747 	add	hl, bc
      0002A2 E5               [16]  748 	push	hl
      0002A3 7D               [ 4]  749 	ld	a, l
      0002A4 F8 0F            [12]  750 	ldhl	sp,	#15
      0002A6 77               [ 8]  751 	ld	(hl), a
      0002A7 E1               [12]  752 	pop	hl
      0002A8 7C               [ 4]  753 	ld	a, h
      0002A9 F8 0E            [12]  754 	ldhl	sp,	#14
      0002AB 32               [ 8]  755 	ld	(hl-), a
      0002AC 2A               [ 8]  756 	ld	a, (hl+)
      0002AD 23               [ 8]  757 	inc	hl
      0002AE 32               [ 8]  758 	ld	(hl-), a
      0002AF 2A               [ 8]  759 	ld	a, (hl+)
      0002B0 23               [ 8]  760 	inc	hl
      0002B1 32               [ 8]  761 	ld	(hl-), a
      0002B2 2B               [ 8]  762 	dec	hl
      0002B3 CB 7E            [12]  763 	bit	7, (hl)
      0002B5 28 0E            [12]  764 	jr	Z, 00138$
      0002B7 21 AB FF         [12]  765 	ld	hl, #0xffab
      0002BA 09               [ 8]  766 	add	hl, bc
      0002BB E5               [16]  767 	push	hl
      0002BC 7D               [ 4]  768 	ld	a, l
      0002BD F8 11            [12]  769 	ldhl	sp,	#17
      0002BF 77               [ 8]  770 	ld	(hl), a
      0002C0 E1               [12]  771 	pop	hl
      0002C1 7C               [ 4]  772 	ld	a, h
      0002C2 F8 10            [12]  773 	ldhl	sp,	#16
      0002C4 77               [ 8]  774 	ld	(hl), a
      0002C5                        775 00138$:
      0002C5 F8 0F            [12]  776 	ldhl	sp,#15
      0002C7 2A               [ 8]  777 	ld	a, (hl+)
      0002C8 4F               [ 4]  778 	ld	c, a
      0002C9 46               [ 8]  779 	ld	b, (hl)
      0002CA CB 28            [ 8]  780 	sra	b
      0002CC CB 19            [ 8]  781 	rr	c
      0002CE CB 28            [ 8]  782 	sra	b
      0002D0 CB 19            [ 8]  783 	rr	c
      0002D2 69               [ 4]  784 	ld	l, c
      0002D3 60               [ 4]  785 	ld	h, b
      0002D4 29               [ 8]  786 	add	hl, hl
      0002D5 29               [ 8]  787 	add	hl, hl
      0002D6 29               [ 8]  788 	add	hl, hl
      0002D7 09               [ 8]  789 	add	hl, bc
      0002D8 11r00r00         [12]  790 	ld	de, #_materials
      0002DB 19               [ 8]  791 	add	hl, de
      0002DC 01 08 00         [12]  792 	ld	bc, #0x0008
      0002DF 09               [ 8]  793 	add	hl, bc
      0002E0 4E               [ 8]  794 	ld	c, (hl)
      0002E1 F8 0B            [12]  795 	ldhl	sp,	#11
      0002E3 2A               [ 8]  796 	ld	a,	(hl+)
      0002E4 66               [ 8]  797 	ld	h, (hl)
      0002E5 6F               [ 4]  798 	ld	l, a
      0002E6 71               [ 8]  799 	ld	(hl), c
      0002E7 F8 16            [12]  800 	ldhl	sp,	#22
      0002E9 34               [12]  801 	inc	(hl)
      0002EA C2r54r02         [16]  802 	jp	NZ,00128$
      0002ED 23               [ 8]  803 	inc	hl
      0002EE 34               [12]  804 	inc	(hl)
      0002EF C3r54r02         [16]  805 	jp	00128$
      0002F2                        806 00115$:
                           0002F2   807 	C$map.c$104$5_0$263	= .
                                    808 	.globl	C$map.c$104$5_0$263
                                    809 ;src/map.c:104: VBK_REG = 0;
      0002F2 AF               [ 4]  810 	xor	a, a
      0002F3 E0r00            [12]  811 	ldh	(_VBK_REG + 0), a
                           0002F5   812 	C$map.c$105$5_0$263	= .
                                    813 	.globl	C$map.c$105$5_0$263
                                    814 ;src/map.c:105: set_bkg_tiles(2 * x, 2 * y, 2, 1, tile_array);
      0002F5 F8 15            [12]  815 	ldhl	sp,	#21
      0002F7 7E               [ 8]  816 	ld	a, (hl)
      0002F8 87               [ 4]  817 	add	a, a
      0002F9 47               [ 4]  818 	ld	b, a
      0002FA 21 00 00         [12]  819 	ld	hl, #0
      0002FD 39               [ 8]  820 	add	hl, sp
      0002FE E5               [16]  821 	push	hl
      0002FF 21 02 01         [12]  822 	ld	hl, #0x102
      000302 E5               [16]  823 	push	hl
      000303 F8 0E            [12]  824 	ldhl	sp,	#14
      000305 7E               [ 8]  825 	ld	a, (hl)
      000306 F5               [16]  826 	push	af
      000307 33               [ 8]  827 	inc	sp
      000308 C5               [16]  828 	push	bc
      000309 33               [ 8]  829 	inc	sp
      00030A CDr00r00         [24]  830 	call	_set_bkg_tiles
      00030D E8 06            [16]  831 	add	sp, #6
                           00030F   832 	C$map.c$106$5_0$263	= .
                                    833 	.globl	C$map.c$106$5_0$263
                                    834 ;src/map.c:106: set_bkg_tiles(2 * x, 2 * y + 1, 2, 1, tile_array + 2);
      00030F F8 14            [12]  835 	ldhl	sp,	#20
      000311 7E               [ 8]  836 	ld	a, (hl)
      000312 87               [ 4]  837 	add	a, a
      000313 4F               [ 4]  838 	ld	c, a
      000314 0C               [ 4]  839 	inc	c
      000315 21 02 00         [12]  840 	ld	hl, #2
      000318 39               [ 8]  841 	add	hl, sp
      000319 E5               [16]  842 	push	hl
      00031A 21 02 01         [12]  843 	ld	hl, #0x102
      00031D E5               [16]  844 	push	hl
      00031E 79               [ 4]  845 	ld	a, c
      00031F F5               [16]  846 	push	af
      000320 33               [ 8]  847 	inc	sp
      000321 C5               [16]  848 	push	bc
      000322 33               [ 8]  849 	inc	sp
      000323 CDr00r00         [24]  850 	call	_set_bkg_tiles
      000326 E8 06            [16]  851 	add	sp, #6
                           000328   852 	C$map.c$109$5_0$263	= .
                                    853 	.globl	C$map.c$109$5_0$263
                                    854 ;src/map.c:109: VBK_REG = 1;
      000328 3E 01            [ 8]  855 	ld	a, #0x01
      00032A E0r00            [12]  856 	ldh	(_VBK_REG + 0), a
                           00032C   857 	C$map.c$110$5_0$263	= .
                                    858 	.globl	C$map.c$110$5_0$263
                                    859 ;src/map.c:110: set_bkg_tiles(2 * x, 2 * y, 2, 1, palette_array);
      00032C 21 04 00         [12]  860 	ld	hl, #4
      00032F 39               [ 8]  861 	add	hl, sp
      000330 E5               [16]  862 	push	hl
      000331 21 02 01         [12]  863 	ld	hl, #0x102
      000334 E5               [16]  864 	push	hl
      000335 F8 0E            [12]  865 	ldhl	sp,	#14
      000337 7E               [ 8]  866 	ld	a, (hl)
      000338 F5               [16]  867 	push	af
      000339 33               [ 8]  868 	inc	sp
      00033A C5               [16]  869 	push	bc
      00033B 33               [ 8]  870 	inc	sp
      00033C CDr00r00         [24]  871 	call	_set_bkg_tiles
      00033F E8 06            [16]  872 	add	sp, #6
                           000341   873 	C$map.c$111$5_0$263	= .
                                    874 	.globl	C$map.c$111$5_0$263
                                    875 ;src/map.c:111: set_bkg_tiles(2 * x, 2 * y + 1, 2, 1, palette_array + 2);
      000341 21 06 00         [12]  876 	ld	hl, #6
      000344 39               [ 8]  877 	add	hl, sp
      000345 E5               [16]  878 	push	hl
      000346 21 02 01         [12]  879 	ld	hl, #0x102
      000349 E5               [16]  880 	push	hl
      00034A 79               [ 4]  881 	ld	a, c
      00034B F5               [16]  882 	push	af
      00034C 33               [ 8]  883 	inc	sp
      00034D C5               [16]  884 	push	bc
      00034E 33               [ 8]  885 	inc	sp
      00034F CDr00r00         [24]  886 	call	_set_bkg_tiles
      000352 E8 06            [16]  887 	add	sp, #6
                           000354   888 	C$map.c$114$5_0$263	= .
                                    889 	.globl	C$map.c$114$5_0$263
                                    890 ;src/map.c:114: VBK_REG = 0;
      000354 AF               [ 4]  891 	xor	a, a
      000355 E0r00            [12]  892 	ldh	(_VBK_REG + 0), a
                           000357   893 	C$map.c$80$4_0$262	= .
                                    894 	.globl	C$map.c$80$4_0$262
                                    895 ;src/map.c:80: for (uint8_t x = x1; x < x1 + c; x++) {
      000357 F8 15            [12]  896 	ldhl	sp,	#21
      000359 34               [12]  897 	inc	(hl)
      00035A C3rDCr00         [16]  898 	jp	00131$
      00035D                        899 00135$:
                           00035D   900 	C$map.c$79$2_0$260	= .
                                    901 	.globl	C$map.c$79$2_0$260
                                    902 ;src/map.c:79: for (uint8_t y = y1; y < y1 + r; y++) {
      00035D F8 14            [12]  903 	ldhl	sp,	#20
      00035F 34               [12]  904 	inc	(hl)
      000360 C3rA2r00         [16]  905 	jp	00134$
      000363                        906 00136$:
                           000363   907 	C$map.c$117$2_0$260	= .
                                    908 	.globl	C$map.c$117$2_0$260
                                    909 ;src/map.c:117: }
      000363 E8 18            [16]  910 	add	sp, #24
      000365 E1               [12]  911 	pop	hl
      000366 E8 03            [16]  912 	add	sp, #3
      000368 E9               [ 4]  913 	jp	(hl)
                           000369   914 	G$spawn_bkg_row$0$0	= .
                                    915 	.globl	G$spawn_bkg_row$0$0
                           000369   916 	C$map.c$120$2_0$274	= .
                                    917 	.globl	C$map.c$120$2_0$274
                                    918 ;src/map.c:120: void spawn_bkg_row(void) {
                                    919 ;	---------------------------------
                                    920 ; Function spawn_bkg_row
                                    921 ; ---------------------------------
      000369                        922 _spawn_bkg_row::
                           000369   923 	C$map.c$121$1_0$274	= .
                                    924 	.globl	C$map.c$121$1_0$274
                                    925 ;src/map.c:121: if (depth > 3) {
      000369 3E 03            [ 8]  926 	ld	a, #0x03
      00036B 21r00r00         [12]  927 	ld	hl, #_depth
      00036E 96               [ 8]  928 	sub	a, (hl)
      00036F D0               [20]  929 	ret	NC
                           000370   930 	C$map.c$122$2_0$275	= .
                                    931 	.globl	C$map.c$122$2_0$275
                                    932 ;src/map.c:122: if (depth - depth_offset == (8 - THRESHOLD - BOTTOM)) set_4bkg_tiles(level_array, 0, depth + 4, 1, 16);
      000370 7E               [ 8]  933 	ld	a, (hl)
      000371 0E 00            [ 8]  934 	ld	c, #0x00
      000373 21r00r00         [12]  935 	ld	hl, #_depth_offset
      000376 5E               [ 8]  936 	ld	e, (hl)
      000377 06 00            [ 8]  937 	ld	b, #0x00
      000379 93               [ 4]  938 	sub	a, e
      00037A 5F               [ 4]  939 	ld	e, a
      00037B 79               [ 4]  940 	ld	a, c
      00037C 98               [ 4]  941 	sbc	a, b
      00037D 57               [ 4]  942 	ld	d, a
      00037E 21r00r00         [12]  943 	ld	hl, #_depth
      000381 4E               [ 8]  944 	ld	c, (hl)
      000382 7B               [ 4]  945 	ld	a, e
      000383 D6 06            [ 8]  946 	sub	a, #0x06
      000385 B2               [ 4]  947 	or	a, d
      000386 20 13            [12]  948 	jr	NZ, 00104$
      000388 0C               [ 4]  949 	inc	c
      000389 0C               [ 4]  950 	inc	c
      00038A 0C               [ 4]  951 	inc	c
      00038B 0C               [ 4]  952 	inc	c
      00038C 21 01 10         [12]  953 	ld	hl, #0x1001
      00038F E5               [16]  954 	push	hl
      000390 79               [ 4]  955 	ld	a, c
      000391 F5               [16]  956 	push	af
      000392 33               [ 8]  957 	inc	sp
      000393 AF               [ 4]  958 	xor	a, a
      000394 11r00r00         [12]  959 	ld	de, #_level_array
      000397 CDr92r00         [24]  960 	call	_set_4bkg_tiles
      00039A C9               [16]  961 	ret
      00039B                        962 00104$:
                           00039B   963 	C$map.c$123$2_0$275	= .
                                    964 	.globl	C$map.c$123$2_0$275
                                    965 ;src/map.c:123: else if (depth - depth_offset == THRESHOLD) set_4bkg_tiles(level_array, 0, depth - 4, 1, 16);
      00039B 7B               [ 4]  966 	ld	a, e
      00039C D6 02            [ 8]  967 	sub	a, #0x02
      00039E B2               [ 4]  968 	or	a, d
      00039F C0               [20]  969 	ret	NZ
      0003A0 79               [ 4]  970 	ld	a, c
      0003A1 C6 FC            [ 8]  971 	add	a, #0xfc
      0003A3 47               [ 4]  972 	ld	b, a
      0003A4 21 01 10         [12]  973 	ld	hl, #0x1001
      0003A7 E5               [16]  974 	push	hl
      0003A8 C5               [16]  975 	push	bc
      0003A9 33               [ 8]  976 	inc	sp
      0003AA AF               [ 4]  977 	xor	a, a
      0003AB 11r00r00         [12]  978 	ld	de, #_level_array
      0003AE CDr92r00         [24]  979 	call	_set_4bkg_tiles
                           0003B1   980 	C$map.c$125$1_0$274	= .
                                    981 	.globl	C$map.c$125$1_0$274
                                    982 ;src/map.c:125: }
                           0003B1   983 	C$map.c$125$1_0$274	= .
                                    984 	.globl	C$map.c$125$1_0$274
                           0003B1   985 	XG$spawn_bkg_row$0$0	= .
                                    986 	.globl	XG$spawn_bkg_row$0$0
      0003B1 C9               [16]  987 	ret
                           0003B2   988 	G$clear_4bkg_tiles$0$0	= .
                                    989 	.globl	G$clear_4bkg_tiles$0$0
                           0003B2   990 	C$map.c$134$1_0$277	= .
                                    991 	.globl	C$map.c$134$1_0$277
                                    992 ;src/map.c:134: void clear_4bkg_tiles(uint8_t array[][16], uint8_t x, uint8_t y) {
                                    993 ;	---------------------------------
                                    994 ; Function clear_4bkg_tiles
                                    995 ; ---------------------------------
      0003B2                        996 _clear_4bkg_tiles::
      0003B2 4F               [ 4]  997 	ld	c, a
                           0003B3   998 	C$map.c$135$1_0$277	= .
                                    999 	.globl	C$map.c$135$1_0$277
                                   1000 ;src/map.c:135: array[y][x] = 0; // Clear the tile in the array
      0003B3 F8 02            [12] 1001 	ldhl	sp,	#2
      0003B5 6E               [ 8] 1002 	ld	l, (hl)
      0003B6 26 00            [ 8] 1003 	ld	h, #0x00
      0003B8 29               [ 8] 1004 	add	hl, hl
      0003B9 29               [ 8] 1005 	add	hl, hl
      0003BA 29               [ 8] 1006 	add	hl, hl
      0003BB 29               [ 8] 1007 	add	hl, hl
      0003BC 19               [ 8] 1008 	add	hl, de
      0003BD 06 00            [ 8] 1009 	ld	b, #0x00
      0003BF 09               [ 8] 1010 	add	hl, bc
      0003C0 36 00            [12] 1011 	ld	(hl), #0x00
                           0003C2  1012 	C$map.c$136$1_0$277	= .
                                   1013 	.globl	C$map.c$136$1_0$277
                                   1014 ;src/map.c:136: set_4bkg_tiles(array, x, y, 1, 1); // Update the background
      0003C2 21 01 01         [12] 1015 	ld	hl, #0x101
      0003C5 E5               [16] 1016 	push	hl
      0003C6 F8 04            [12] 1017 	ldhl	sp,	#4
      0003C8 7E               [ 8] 1018 	ld	a, (hl)
      0003C9 F5               [16] 1019 	push	af
      0003CA 33               [ 8] 1020 	inc	sp
      0003CB 79               [ 4] 1021 	ld	a, c
      0003CC CDr92r00         [24] 1022 	call	_set_4bkg_tiles
                           0003CF  1023 	C$map.c$137$1_0$277	= .
                                   1024 	.globl	C$map.c$137$1_0$277
                                   1025 ;src/map.c:137: }
      0003CF E1               [12] 1026 	pop	hl
      0003D0 33               [ 8] 1027 	inc	sp
      0003D1 E9               [ 4] 1028 	jp	(hl)
                           0003D2  1029 	G$add_block$0$0	= .
                                   1030 	.globl	G$add_block$0$0
                           0003D2  1031 	C$map.c$149$1_0$279	= .
                                   1032 	.globl	C$map.c$149$1_0$279
                                   1033 ;src/map.c:149: void add_block(uint8_t array[][16], uint8_t x, uint8_t y, uint8_t type) {
                                   1034 ;	---------------------------------
                                   1035 ; Function add_block
                                   1036 ; ---------------------------------
      0003D2                       1037 _add_block::
      0003D2 4F               [ 4] 1038 	ld	c, a
                           0003D3  1039 	C$map.c$150$1_0$279	= .
                                   1040 	.globl	C$map.c$150$1_0$279
                                   1041 ;src/map.c:150: array[y][x] = type;
      0003D3 F8 02            [12] 1042 	ldhl	sp,	#2
      0003D5 6E               [ 8] 1043 	ld	l, (hl)
      0003D6 26 00            [ 8] 1044 	ld	h, #0x00
      0003D8 29               [ 8] 1045 	add	hl, hl
      0003D9 29               [ 8] 1046 	add	hl, hl
      0003DA 29               [ 8] 1047 	add	hl, hl
      0003DB 29               [ 8] 1048 	add	hl, hl
      0003DC 19               [ 8] 1049 	add	hl, de
      0003DD 54               [ 4] 1050 	ld	d, h
      0003DE 7D               [ 4] 1051 	ld	a, l
      0003DF 81               [ 4] 1052 	add	a, c
      0003E0 5F               [ 4] 1053 	ld	e, a
      0003E1 30 01            [12] 1054 	jr	NC, 00103$
      0003E3 14               [ 4] 1055 	inc	d
      0003E4                       1056 00103$:
      0003E4 F8 03            [12] 1057 	ldhl	sp,	#3
                           0003E6  1058 	C$map.c$151$1_0$279	= .
                                   1059 	.globl	C$map.c$151$1_0$279
                                   1060 ;src/map.c:151: set_4bkg_tiles(level_array, x, y, 1, 1);
      0003E6 3A               [ 8] 1061 	ld	a, (hl-)
      0003E7 12               [ 8] 1062 	ld	(de), a
      0003E8 11 01 01         [12] 1063 	ld	de, #0x101
      0003EB D5               [16] 1064 	push	de
      0003EC 7E               [ 8] 1065 	ld	a, (hl)
      0003ED F5               [16] 1066 	push	af
      0003EE 33               [ 8] 1067 	inc	sp
      0003EF 79               [ 4] 1068 	ld	a, c
      0003F0 11r00r00         [12] 1069 	ld	de, #_level_array
      0003F3 CDr92r00         [24] 1070 	call	_set_4bkg_tiles
                           0003F6  1071 	C$map.c$152$1_0$279	= .
                                   1072 	.globl	C$map.c$152$1_0$279
                                   1073 ;src/map.c:152: }
      0003F6 E1               [12] 1074 	pop	hl
      0003F7 F1               [12] 1075 	pop	af
      0003F8 E9               [ 4] 1076 	jp	(hl)
                           0003F9  1077 	G$progressbar$0$0	= .
                                   1078 	.globl	G$progressbar$0$0
                           0003F9  1079 	C$map.c$164$1_0$282	= .
                                   1080 	.globl	C$map.c$164$1_0$282
                                   1081 ;src/map.c:164: void progressbar(int16_t current_value, int16_t max_value, uint8_t digits, uint8_t tilestart, uint8_t x, uint8_t y) {
                                   1082 ;	---------------------------------
                                   1083 ; Function progressbar
                                   1084 ; ---------------------------------
      0003F9                       1085 _progressbar::
      0003F9 E8 F8            [16] 1086 	add	sp, #-8
      0003FB F8 05            [12] 1087 	ldhl	sp,	#5
      0003FD 79               [ 4] 1088 	ld	a, c
      0003FE 22               [ 8] 1089 	ld	(hl+), a
      0003FF 70               [ 8] 1090 	ld	(hl), b
                           000400  1091 	C$map.c$166$1_0$281	= .
                                   1092 	.globl	C$map.c$166$1_0$281
                                   1093 ;src/map.c:166: uint8_t total_pixels = digits * 8;
      000400 F8 0A            [12] 1094 	ldhl	sp,	#10
      000402 7E               [ 8] 1095 	ld	a, (hl)
      000403 F8 00            [12] 1096 	ldhl	sp,	#0
      000405 77               [ 8] 1097 	ld	(hl), a
      000406 7E               [ 8] 1098 	ld	a, (hl)
      000407 87               [ 4] 1099 	add	a, a
      000408 87               [ 4] 1100 	add	a, a
      000409 87               [ 4] 1101 	add	a, a
                           00040A  1102 	C$map.c$167$1_0$281	= .
                                   1103 	.globl	C$map.c$167$1_0$281
                                   1104 ;src/map.c:167: uint16_t pixels_to_fill = (current_value * total_pixels) / max_value;
      00040A 4F               [ 4] 1105 	ld	c, a
      00040B 06 00            [ 8] 1106 	ld	b, #0x00
      00040D CDr00r00         [24] 1107 	call	__mulint
      000410 59               [ 4] 1108 	ld	e, c
      000411 50               [ 4] 1109 	ld	d, b
      000412 F8 05            [12] 1110 	ldhl	sp,	#5
      000414 2A               [ 8] 1111 	ld	a, (hl+)
      000415 4F               [ 4] 1112 	ld	c, a
      000416 46               [ 8] 1113 	ld	b, (hl)
      000417 CDr00r00         [24] 1114 	call	__divsint
                           00041A  1115 	C$map.c$169$5_0$285	= .
                                   1116 	.globl	C$map.c$169$5_0$285
                                   1117 ;src/map.c:169: for (uint8_t i = 0; i < digits; i++) {
      00041A F8 00            [12] 1118 	ldhl	sp,	#0
      00041C 7E               [ 8] 1119 	ld	a, (hl)
      00041D 3D               [ 4] 1120 	dec	a
      00041E 3E 01            [ 8] 1121 	ld	a, #0x01
      000420 28 01            [12] 1122 	jr	Z, 00185$
      000422 AF               [ 4] 1123 	xor	a, a
      000423                       1124 00185$:
      000423 F8 01            [12] 1125 	ldhl	sp,	#1
      000425 77               [ 8] 1126 	ld	(hl), a
      000426 F8 0D            [12] 1127 	ldhl	sp,	#13
      000428 7E               [ 8] 1128 	ld	a, (hl)
      000429 F8 02            [12] 1129 	ldhl	sp,	#2
      00042B 77               [ 8] 1130 	ld	(hl), a
      00042C F8 07            [12] 1131 	ldhl	sp,	#7
      00042E 36 00            [12] 1132 	ld	(hl), #0x00
      000430                       1133 00122$:
      000430 F8 07            [12] 1134 	ldhl	sp,	#7
      000432 7E               [ 8] 1135 	ld	a, (hl)
      000433 F8 00            [12] 1136 	ldhl	sp,	#0
      000435 96               [ 8] 1137 	sub	a, (hl)
      000436 D2r15r05         [16] 1138 	jp	NC, 00124$
                           000439  1139 	C$map.c$170$4_0$283	= .
                                   1140 	.globl	C$map.c$170$4_0$283
                                   1141 ;src/map.c:170: uint8_t tile_index = SPRITE_TILE_EMPTY; // Default to empty
      000439 1E 00            [ 8] 1142 	ld	e, #0x00
                           00043B  1143 	C$map.c$172$3_0$283	= .
                                   1144 	.globl	C$map.c$172$3_0$283
                                   1145 ;src/map.c:172: uint8_t effective_pixels = (pixels_to_fill > sprite_pixels) ? sprite_pixels : pixels_to_fill;
      00043B 3E 08            [ 8] 1146 	ld	a, #0x08
      00043D B9               [ 4] 1147 	cp	a, c
      00043E 3E 00            [ 8] 1148 	ld	a, #0x00
      000440 98               [ 4] 1149 	sbc	a, b
      000441 30 04            [12] 1150 	jr	NC, 00126$
      000443 16 08            [ 8] 1151 	ld	d, #0x08
      000445 18 01            [12] 1152 	jr	00127$
      000447                       1153 00126$:
      000447 51               [ 4] 1154 	ld	d, c
      000448                       1155 00127$:
                           000448  1156 	C$map.c$175$3_0$283	= .
                                   1157 	.globl	C$map.c$175$3_0$283
                                   1158 ;src/map.c:175: pixels_to_fill -= effective_pixels;
      000448 6A               [ 4] 1159 	ld	l, d
                                   1160 ;	spillPairReg hl
                                   1161 ;	spillPairReg hl
      000449 26 00            [ 8] 1162 	ld	h, #0x00
                                   1163 ;	spillPairReg hl
                                   1164 ;	spillPairReg hl
      00044B 79               [ 4] 1165 	ld	a, c
      00044C 95               [ 4] 1166 	sub	a, l
      00044D 4F               [ 4] 1167 	ld	c, a
      00044E 78               [ 4] 1168 	ld	a, b
      00044F 9C               [ 4] 1169 	sbc	a, h
      000450 47               [ 4] 1170 	ld	b, a
                           000451  1171 	C$map.c$178$3_0$283	= .
                                   1172 	.globl	C$map.c$178$3_0$283
                                   1173 ;src/map.c:178: switch (effective_pixels) {
      000451 3E 08            [ 8] 1174 	ld	a, #0x08
      000453 92               [ 4] 1175 	sub	a, d
      000454 DArD7r04         [16] 1176 	jp	C, 00117$
      000457 5A               [ 4] 1177 	ld	e, d
      000458 16 00            [ 8] 1178 	ld	d, #0x00
      00045A 21r61r04         [12] 1179 	ld	hl, #00186$
      00045D 19               [ 8] 1180 	add	hl, de
      00045E 19               [ 8] 1181 	add	hl, de
      00045F 19               [ 8] 1182 	add	hl, de
      000460 E9               [ 4] 1183 	jp	(hl)
      000461                       1184 00186$:
      000461 C3r7Cr04         [16] 1185 	jp	00101$
      000464 C3r80r04         [16] 1186 	jp	00102$
      000467 C3r84r04         [16] 1187 	jp	00103$
      00046A C3r88r04         [16] 1188 	jp	00104$
      00046D C3r8Cr04         [16] 1189 	jp	00105$
      000470 C3r90r04         [16] 1190 	jp	00106$
      000473 C3r94r04         [16] 1191 	jp	00107$
      000476 C3r98r04         [16] 1192 	jp	00108$
      000479 C3r9Cr04         [16] 1193 	jp	00109$
                           00047C  1194 	C$map.c$179$4_0$284	= .
                                   1195 	.globl	C$map.c$179$4_0$284
                                   1196 ;src/map.c:179: case 0: tile_index = SPRITE_TILE_EMPTY; break;
      00047C                       1197 00101$:
      00047C 1E 00            [ 8] 1198 	ld	e, #0x00
      00047E 18 57            [12] 1199 	jr	00117$
                           000480  1200 	C$map.c$180$4_0$284	= .
                                   1201 	.globl	C$map.c$180$4_0$284
                                   1202 ;src/map.c:180: case 1: tile_index = SPRITE_TILE_1_8; break;
      000480                       1203 00102$:
      000480 1E 20            [ 8] 1204 	ld	e, #0x20
      000482 18 53            [12] 1205 	jr	00117$
                           000484  1206 	C$map.c$181$4_0$284	= .
                                   1207 	.globl	C$map.c$181$4_0$284
                                   1208 ;src/map.c:181: case 2: tile_index = SPRITE_TILE_2_8; break;
      000484                       1209 00103$:
      000484 1E 21            [ 8] 1210 	ld	e, #0x21
      000486 18 4F            [12] 1211 	jr	00117$
                           000488  1212 	C$map.c$182$4_0$284	= .
                                   1213 	.globl	C$map.c$182$4_0$284
                                   1214 ;src/map.c:182: case 3: tile_index = SPRITE_TILE_3_8; break;
      000488                       1215 00104$:
      000488 1E 22            [ 8] 1216 	ld	e, #0x22
      00048A 18 4B            [12] 1217 	jr	00117$
                           00048C  1218 	C$map.c$183$4_0$284	= .
                                   1219 	.globl	C$map.c$183$4_0$284
                                   1220 ;src/map.c:183: case 4: tile_index = SPRITE_TILE_4_8; break;
      00048C                       1221 00105$:
      00048C 1E 23            [ 8] 1222 	ld	e, #0x23
      00048E 18 47            [12] 1223 	jr	00117$
                           000490  1224 	C$map.c$184$4_0$284	= .
                                   1225 	.globl	C$map.c$184$4_0$284
                                   1226 ;src/map.c:184: case 5: tile_index = SPRITE_TILE_5_8; break;
      000490                       1227 00106$:
      000490 1E 24            [ 8] 1228 	ld	e, #0x24
      000492 18 43            [12] 1229 	jr	00117$
                           000494  1230 	C$map.c$185$4_0$284	= .
                                   1231 	.globl	C$map.c$185$4_0$284
                                   1232 ;src/map.c:185: case 6: tile_index = SPRITE_TILE_6_8; break;
      000494                       1233 00107$:
      000494 1E 25            [ 8] 1234 	ld	e, #0x25
      000496 18 3F            [12] 1235 	jr	00117$
                           000498  1236 	C$map.c$186$4_0$284	= .
                                   1237 	.globl	C$map.c$186$4_0$284
                                   1238 ;src/map.c:186: case 7: tile_index = SPRITE_TILE_7_8; break;
      000498                       1239 00108$:
      000498 1E 26            [ 8] 1240 	ld	e, #0x26
      00049A 18 3B            [12] 1241 	jr	00117$
                           00049C  1242 	C$map.c$187$4_0$284	= .
                                   1243 	.globl	C$map.c$187$4_0$284
                                   1244 ;src/map.c:187: case 8: 
      00049C                       1245 00109$:
                           00049C  1246 	C$map.c$188$4_0$284	= .
                                   1247 	.globl	C$map.c$188$4_0$284
                                   1248 ;src/map.c:188: if (i == 0) { // First sprite
      00049C F8 07            [12] 1249 	ldhl	sp,	#7
      00049E 7E               [ 8] 1250 	ld	a, (hl)
      00049F B7               [ 4] 1251 	or	a, a
      0004A0 20 14            [12] 1252 	jr	NZ, 00115$
                           0004A2  1253 	C$map.c$189$5_0$285	= .
                                   1254 	.globl	C$map.c$189$5_0$285
                                   1255 ;src/map.c:189: tile_index = (digits == 1 || pixels_to_fill == 0) ? SPRITE_TILE_END : SPRITE_TILE_MID;
      0004A2 F8 01            [12] 1256 	ldhl	sp,	#1
      0004A4 CB 46            [12] 1257 	bit	0, (hl)
      0004A6 20 04            [12] 1258 	jr	NZ, 00131$
      0004A8 78               [ 4] 1259 	ld	a, b
      0004A9 B1               [ 4] 1260 	or	a, c
      0004AA 20 05            [12] 1261 	jr	NZ, 00128$
      0004AC                       1262 00131$:
      0004AC 11 27 00         [12] 1263 	ld	de, #0x0027
      0004AF 18 26            [12] 1264 	jr	00117$
      0004B1                       1265 00128$:
      0004B1 11 28 00         [12] 1266 	ld	de, #0x0028
      0004B4 18 21            [12] 1267 	jr	00117$
      0004B6                       1268 00115$:
                           0004B6  1269 	C$map.c$190$4_0$284	= .
                                   1270 	.globl	C$map.c$190$4_0$284
                                   1271 ;src/map.c:190: } else if (i == digits - 1 || pixels_to_fill == 0) { // Last sprite or no more pixels to fill
      0004B6 F8 00            [12] 1272 	ldhl	sp,	#0
      0004B8 5E               [ 8] 1273 	ld	e, (hl)
      0004B9 16 00            [ 8] 1274 	ld	d, #0x00
      0004BB 1B               [ 8] 1275 	dec	de
      0004BC F8 07            [12] 1276 	ldhl	sp,	#7
      0004BE 7E               [ 8] 1277 	ld	a, (hl)
      0004BF F8 03            [12] 1278 	ldhl	sp,	#3
      0004C1 22               [ 8] 1279 	ld	(hl+), a
      0004C2 AF               [ 4] 1280 	xor	a, a
      0004C3 32               [ 8] 1281 	ld	(hl-), a
      0004C4 7E               [ 8] 1282 	ld	a, (hl)
      0004C5 93               [ 4] 1283 	sub	a, e
      0004C6 20 05            [12] 1284 	jr	NZ, 00187$
      0004C8 23               [ 8] 1285 	inc	hl
      0004C9 7E               [ 8] 1286 	ld	a, (hl)
      0004CA 92               [ 4] 1287 	sub	a, d
      0004CB 28 04            [12] 1288 	jr	Z, 00110$
      0004CD                       1289 00187$:
      0004CD 78               [ 4] 1290 	ld	a, b
      0004CE B1               [ 4] 1291 	or	a, c
      0004CF 20 04            [12] 1292 	jr	NZ, 00111$
      0004D1                       1293 00110$:
                           0004D1  1294 	C$map.c$191$5_0$286	= .
                                   1295 	.globl	C$map.c$191$5_0$286
                                   1296 ;src/map.c:191: tile_index = SPRITE_TILE_END;
      0004D1 1E 27            [ 8] 1297 	ld	e, #0x27
      0004D3 18 02            [12] 1298 	jr	00117$
      0004D5                       1299 00111$:
                           0004D5  1300 	C$map.c$193$5_0$287	= .
                                   1301 	.globl	C$map.c$193$5_0$287
                                   1302 ;src/map.c:193: tile_index = SPRITE_TILE_MID;
      0004D5 1E 28            [ 8] 1303 	ld	e, #0x28
                           0004D7  1304 	C$map.c$196$3_0$283	= .
                                   1305 	.globl	C$map.c$196$3_0$283
                                   1306 ;src/map.c:196: }
      0004D7                       1307 00117$:
                                   1308 ;src/map.c:199: set_sprite_tile(tilestart + i, tile_index);
      0004D7 F8 0B            [12] 1309 	ldhl	sp,	#11
      0004D9 7E               [ 8] 1310 	ld	a, (hl)
      0004DA F8 07            [12] 1311 	ldhl	sp,	#7
      0004DC 86               [ 8] 1312 	add	a, (hl)
      0004DD F8 03            [12] 1313 	ldhl	sp,	#3
      0004DF 77               [ 8] 1314 	ld	(hl), a
      0004E0 56               [ 8] 1315 	ld	d, (hl)
                                   1316 ;/usr/local/opt/gbdk/include/gb/gb.h:1804: shadow_OAM[nb].tile=tile;
      0004E1 26 00            [ 8] 1317 	ld	h, #0x00
                                   1318 ;	spillPairReg hl
                                   1319 ;	spillPairReg hl
      0004E3 6A               [ 4] 1320 	ld	l, d
      0004E4 29               [ 8] 1321 	add	hl, hl
      0004E5 29               [ 8] 1322 	add	hl, hl
      0004E6 D5               [16] 1323 	push	de
      0004E7 11r00r00         [12] 1324 	ld	de, #_shadow_OAM
      0004EA 19               [ 8] 1325 	add	hl, de
      0004EB 23               [ 8] 1326 	inc	hl
      0004EC 23               [ 8] 1327 	inc	hl
      0004ED D1               [12] 1328 	pop	de
      0004EE 73               [ 8] 1329 	ld	(hl), e
                                   1330 ;src/map.c:200: move_sprite(tilestart + i, x + i * 8, y);
      0004EF F8 07            [12] 1331 	ldhl	sp,	#7
      0004F1 7E               [ 8] 1332 	ld	a, (hl)
      0004F2 87               [ 4] 1333 	add	a, a
      0004F3 87               [ 4] 1334 	add	a, a
      0004F4 87               [ 4] 1335 	add	a, a
      0004F5 F8 0C            [12] 1336 	ldhl	sp,	#12
      0004F7 5E               [ 8] 1337 	ld	e, (hl)
      0004F8 83               [ 4] 1338 	add	a, e
      0004F9 F8 04            [12] 1339 	ldhl	sp,	#4
                                   1340 ;/usr/local/opt/gbdk/include/gb/gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      0004FB 32               [ 8] 1341 	ld	(hl-), a
      0004FC 6E               [ 8] 1342 	ld	l, (hl)
      0004FD 26 00            [ 8] 1343 	ld	h, #0x00
      0004FF 29               [ 8] 1344 	add	hl, hl
      000500 29               [ 8] 1345 	add	hl, hl
      000501 11r00r00         [12] 1346 	ld	de, #_shadow_OAM
      000504 19               [ 8] 1347 	add	hl, de
      000505 5D               [ 4] 1348 	ld	e, l
      000506 54               [ 4] 1349 	ld	d, h
                                   1350 ;/usr/local/opt/gbdk/include/gb/gb.h:1878: itm->y=y, itm->x=x;
      000507 F8 02            [12] 1351 	ldhl	sp,	#2
      000509 2A               [ 8] 1352 	ld	a, (hl+)
      00050A 23               [ 8] 1353 	inc	hl
      00050B 12               [ 8] 1354 	ld	(de), a
      00050C 13               [ 8] 1355 	inc	de
      00050D 7E               [ 8] 1356 	ld	a, (hl)
      00050E 12               [ 8] 1357 	ld	(de), a
                           00050F  1358 	C$map.c$169$2_0$282	= .
                                   1359 	.globl	C$map.c$169$2_0$282
                                   1360 ;src/map.c:169: for (uint8_t i = 0; i < digits; i++) {
      00050F F8 07            [12] 1361 	ldhl	sp,	#7
      000511 34               [12] 1362 	inc	(hl)
      000512 C3r30r04         [16] 1363 	jp	00122$
      000515                       1364 00124$:
                           000515  1365 	C$map.c$202$2_0$282	= .
                                   1366 	.globl	C$map.c$202$2_0$282
                                   1367 ;src/map.c:202: }
      000515 E8 08            [16] 1368 	add	sp, #8
      000517 E1               [12] 1369 	pop	hl
      000518 E8 04            [16] 1370 	add	sp, #4
      00051A E9               [ 4] 1371 	jp	(hl)
                           00051B  1372 	G$draw_depth$0$0	= .
                                   1373 	.globl	G$draw_depth$0$0
                           00051B  1374 	C$map.c$204$2_0$295	= .
                                   1375 	.globl	C$map.c$204$2_0$295
                                   1376 ;src/map.c:204: void draw_depth(void){
                                   1377 ;	---------------------------------
                                   1378 ; Function draw_depth
                                   1379 ; ---------------------------------
      00051B                       1380 _draw_depth::
      00051B E8 F6            [16] 1381 	add	sp, #-10
                           00051D  1382 	C$map.c$206$1_0$295	= .
                                   1383 	.globl	C$map.c$206$1_0$295
                                   1384 ;src/map.c:206: itoa((depth <= EARTH_START) ? 0 : (depth - EARTH_START), string, 10);
      00051D 21 00 00         [12] 1385 	ld	hl, #0
      000520 39               [ 8] 1386 	add	hl, sp
      000521 5D               [ 4] 1387 	ld	e, l
      000522 54               [ 4] 1388 	ld	d, h
      000523 3E 05            [ 8] 1389 	ld	a, #0x05
      000525 21r00r00         [12] 1390 	ld	hl, #_depth
      000528 96               [ 8] 1391 	sub	a, (hl)
      000529 38 05            [12] 1392 	jr	C, 00103$
      00052B 01 00 00         [12] 1393 	ld	bc, #0x0000
      00052E 18 0C            [12] 1394 	jr	00104$
      000530                       1395 00103$:
      000530 FAr00r00         [16] 1396 	ld	a, (#_depth)
      000533 06 00            [ 8] 1397 	ld	b, #0x00
      000535 C6 FB            [ 8] 1398 	add	a, #0xfb
      000537 4F               [ 4] 1399 	ld	c, a
      000538 78               [ 4] 1400 	ld	a, b
      000539 CE FF            [ 8] 1401 	adc	a, #0xff
      00053B 47               [ 4] 1402 	ld	b, a
      00053C                       1403 00104$:
      00053C 3E 0A            [ 8] 1404 	ld	a, #0x0a
      00053E F5               [16] 1405 	push	af
      00053F 33               [ 8] 1406 	inc	sp
      000540 D5               [16] 1407 	push	de
      000541 C5               [16] 1408 	push	bc
      000542 CDr00r00         [24] 1409 	call	_itoa
      000545 E8 05            [16] 1410 	add	sp, #5
                           000547  1411 	C$map.c$207$1_0$295	= .
                                   1412 	.globl	C$map.c$207$1_0$295
                                   1413 ;src/map.c:207: strcat(string, "m");
      000547 01r7Er05         [12] 1414 	ld	bc, #___str_0
      00054A 21 00 00         [12] 1415 	ld	hl, #0
      00054D 39               [ 8] 1416 	add	hl, sp
      00054E 5D               [ 4] 1417 	ld	e, l
      00054F 54               [ 4] 1418 	ld	d, h
      000550 CDr00r00         [24] 1419 	call	_strcat
                           000553  1420 	C$map.c$208$1_0$295	= .
                                   1421 	.globl	C$map.c$208$1_0$295
                                   1422 ;src/map.c:208: draw_text(15,0,"Depth",5,TRUE,0);
      000553 AF               [ 4] 1423 	xor	a, a
      000554 67               [ 4] 1424 	ld	h, a
      000555 2E 01            [ 8] 1425 	ld	l, #0x01
      000557 E5               [16] 1426 	push	hl
      000558 3E 05            [ 8] 1427 	ld	a, #0x05
      00055A F5               [16] 1428 	push	af
      00055B 33               [ 8] 1429 	inc	sp
      00055C 11r80r05         [12] 1430 	ld	de, #___str_1
      00055F D5               [16] 1431 	push	de
      000560 1E 00            [ 8] 1432 	ld	e, #0x00
      000562 3E 0F            [ 8] 1433 	ld	a, #0x0f
      000564 CDr00r00         [24] 1434 	call	_draw_text
                           000567  1435 	C$map.c$209$1_0$295	= .
                                   1436 	.globl	C$map.c$209$1_0$295
                                   1437 ;src/map.c:209: draw_text(15,1,string,5,FALSE,0);
      000567 21 00 00         [12] 1438 	ld	hl, #0
      00056A 39               [ 8] 1439 	add	hl, sp
      00056B AF               [ 4] 1440 	xor	a, a
      00056C 0F               [ 4] 1441 	rrca
      00056D F5               [16] 1442 	push	af
      00056E AF               [ 4] 1443 	xor	a, a
      00056F 3E 05            [ 8] 1444 	ld	a, #0x05
      000571 F5               [16] 1445 	push	af
      000572 33               [ 8] 1446 	inc	sp
      000573 E5               [16] 1447 	push	hl
      000574 1E 01            [ 8] 1448 	ld	e, #0x01
      000576 3E 0F            [ 8] 1449 	ld	a, #0x0f
      000578 CDr00r00         [24] 1450 	call	_draw_text
                           00057B  1451 	C$map.c$210$1_0$295	= .
                                   1452 	.globl	C$map.c$210$1_0$295
                                   1453 ;src/map.c:210: }
      00057B E8 0A            [16] 1454 	add	sp, #10
                           00057D  1455 	C$map.c$210$1_0$295	= .
                                   1456 	.globl	C$map.c$210$1_0$295
                           00057D  1457 	XG$draw_depth$0$0	= .
                                   1458 	.globl	XG$draw_depth$0$0
      00057D C9               [16] 1459 	ret
                           00057E  1460 Fmap$__str_0$0_0$0 == .
      00057E                       1461 ___str_0:
      00057E 6D                    1462 	.ascii "m"
      00057F 00                    1463 	.db 0x00
                           000580  1464 Fmap$__str_1$0_0$0 == .
      000580                       1465 ___str_1:
      000580 44 65 70 74 68        1466 	.ascii "Depth"
      000585 00                    1467 	.db 0x00
                           000586  1468 	G$draw_cargo$0$0	= .
                                   1469 	.globl	G$draw_cargo$0$0
                           000586  1470 	C$map.c$212$1_0$297	= .
                                   1471 	.globl	C$map.c$212$1_0$297
                                   1472 ;src/map.c:212: void draw_cargo(void){
                                   1473 ;	---------------------------------
                                   1474 ; Function draw_cargo
                                   1475 ; ---------------------------------
      000586                       1476 _draw_cargo::
      000586 E8 EC            [16] 1477 	add	sp, #-20
                           000588  1478 	C$map.c$215$1_0$297	= .
                                   1479 	.globl	C$map.c$215$1_0$297
                                   1480 ;src/map.c:215: itoa(player.cargo.current_value, string, 10);
      000588 21rBBr00         [12] 1481 	ld	hl, #_player + 187
      00058B 2A               [ 8] 1482 	ld	a, (hl+)
      00058C 4F               [ 4] 1483 	ld	c, a
      00058D 46               [ 8] 1484 	ld	b, (hl)
      00058E 3E 0A            [ 8] 1485 	ld	a, #0x0a
      000590 F5               [16] 1486 	push	af
      000591 33               [ 8] 1487 	inc	sp
      000592 21 01 00         [12] 1488 	ld	hl, #1
      000595 39               [ 8] 1489 	add	hl, sp
      000596 E5               [16] 1490 	push	hl
      000597 C5               [16] 1491 	push	bc
      000598 CDr00r00         [24] 1492 	call	_itoa
      00059B E8 05            [16] 1493 	add	sp, #5
                           00059D  1494 	C$map.c$216$1_0$297	= .
                                   1495 	.globl	C$map.c$216$1_0$297
                                   1496 ;src/map.c:216: itoa(player.cargo.max_value, string_max, 10);
      00059D 21rBDr00         [12] 1497 	ld	hl, #_player + 189
      0005A0 2A               [ 8] 1498 	ld	a, (hl+)
      0005A1 4F               [ 4] 1499 	ld	c, a
      0005A2 46               [ 8] 1500 	ld	b, (hl)
      0005A3 3E 0A            [ 8] 1501 	ld	a, #0x0a
      0005A5 F5               [16] 1502 	push	af
      0005A6 33               [ 8] 1503 	inc	sp
      0005A7 21 0B 00         [12] 1504 	ld	hl, #11
      0005AA 39               [ 8] 1505 	add	hl, sp
      0005AB E5               [16] 1506 	push	hl
      0005AC C5               [16] 1507 	push	bc
      0005AD CDr00r00         [24] 1508 	call	_itoa
      0005B0 E8 05            [16] 1509 	add	sp, #5
                           0005B2  1510 	C$map.c$217$1_0$297	= .
                                   1511 	.globl	C$map.c$217$1_0$297
                                   1512 ;src/map.c:217: strcat(string, "/");
      0005B2 01rF9r05         [12] 1513 	ld	bc, #___str_2
      0005B5 21 00 00         [12] 1514 	ld	hl, #0
      0005B8 39               [ 8] 1515 	add	hl, sp
      0005B9 5D               [ 4] 1516 	ld	e, l
      0005BA 54               [ 4] 1517 	ld	d, h
      0005BB CDr00r00         [24] 1518 	call	_strcat
                           0005BE  1519 	C$map.c$218$1_0$297	= .
                                   1520 	.globl	C$map.c$218$1_0$297
                                   1521 ;src/map.c:218: strcat(string, string_max);
      0005BE 21 0A 00         [12] 1522 	ld	hl, #10
      0005C1 39               [ 8] 1523 	add	hl, sp
      0005C2 4D               [ 4] 1524 	ld	c, l
      0005C3 44               [ 4] 1525 	ld	b, h
      0005C4 21 00 00         [12] 1526 	ld	hl, #0
      0005C7 39               [ 8] 1527 	add	hl, sp
      0005C8 5D               [ 4] 1528 	ld	e, l
      0005C9 54               [ 4] 1529 	ld	d, h
      0005CA CDr00r00         [24] 1530 	call	_strcat
                           0005CD  1531 	C$map.c$219$1_0$297	= .
                                   1532 	.globl	C$map.c$219$1_0$297
                                   1533 ;src/map.c:219: draw_text(9,0,"Cargo",5,TRUE,0);
      0005CD AF               [ 4] 1534 	xor	a, a
      0005CE 67               [ 4] 1535 	ld	h, a
      0005CF 2E 01            [ 8] 1536 	ld	l, #0x01
      0005D1 E5               [16] 1537 	push	hl
      0005D2 3E 05            [ 8] 1538 	ld	a, #0x05
      0005D4 F5               [16] 1539 	push	af
      0005D5 33               [ 8] 1540 	inc	sp
      0005D6 11rFBr05         [12] 1541 	ld	de, #___str_3
      0005D9 D5               [16] 1542 	push	de
      0005DA 1E 00            [ 8] 1543 	ld	e, #0x00
      0005DC 3E 09            [ 8] 1544 	ld	a, #0x09
      0005DE CDr00r00         [24] 1545 	call	_draw_text
                           0005E1  1546 	C$map.c$220$1_0$297	= .
                                   1547 	.globl	C$map.c$220$1_0$297
                                   1548 ;src/map.c:220: draw_text(9,1,string,5,TRUE,0);
      0005E1 21 00 00         [12] 1549 	ld	hl, #0
      0005E4 39               [ 8] 1550 	add	hl, sp
      0005E5 AF               [ 4] 1551 	xor	a, a
      0005E6 57               [ 4] 1552 	ld	d, a
      0005E7 1E 01            [ 8] 1553 	ld	e, #0x01
      0005E9 D5               [16] 1554 	push	de
      0005EA 3E 05            [ 8] 1555 	ld	a, #0x05
      0005EC F5               [16] 1556 	push	af
      0005ED 33               [ 8] 1557 	inc	sp
      0005EE E5               [16] 1558 	push	hl
      0005EF 1E 01            [ 8] 1559 	ld	e, #0x01
      0005F1 3E 09            [ 8] 1560 	ld	a, #0x09
      0005F3 CDr00r00         [24] 1561 	call	_draw_text
                           0005F6  1562 	C$map.c$221$1_0$297	= .
                                   1563 	.globl	C$map.c$221$1_0$297
                                   1564 ;src/map.c:221: }
      0005F6 E8 14            [16] 1565 	add	sp, #20
                           0005F8  1566 	C$map.c$221$1_0$297	= .
                                   1567 	.globl	C$map.c$221$1_0$297
                           0005F8  1568 	XG$draw_cargo$0$0	= .
                                   1569 	.globl	XG$draw_cargo$0$0
      0005F8 C9               [16] 1570 	ret
                           0005F9  1571 Fmap$__str_2$0_0$0 == .
      0005F9                       1572 ___str_2:
      0005F9 2F                    1573 	.ascii "/"
      0005FA 00                    1574 	.db 0x00
                           0005FB  1575 Fmap$__str_3$0_0$0 == .
      0005FB                       1576 ___str_3:
      0005FB 43 61 72 67 6F        1577 	.ascii "Cargo"
      000600 00                    1578 	.db 0x00
                           000601  1579 	G$draw_fuel$0$0	= .
                                   1580 	.globl	G$draw_fuel$0$0
                           000601  1581 	C$map.c$223$1_0$299	= .
                                   1582 	.globl	C$map.c$223$1_0$299
                                   1583 ;src/map.c:223: void draw_fuel(void){
                                   1584 ;	---------------------------------
                                   1585 ; Function draw_fuel
                                   1586 ; ---------------------------------
      000601                       1587 _draw_fuel::
                           000601  1588 	C$map.c$224$1_0$299	= .
                                   1589 	.globl	C$map.c$224$1_0$299
                                   1590 ;src/map.c:224: progressbar(player.fuel.current_value, player.fuel.max_value, 3, 35, 44, 20);
      000601 21r12r00         [12] 1591 	ld	hl, #_player + 18
      000604 2A               [ 8] 1592 	ld	a, (hl+)
      000605 4F               [ 4] 1593 	ld	c, a
      000606 46               [ 8] 1594 	ld	b, (hl)
      000607 21r10r00         [12] 1595 	ld	hl, #_player + 16
      00060A 2A               [ 8] 1596 	ld	a,	(hl+)
      00060B 66               [ 8] 1597 	ld	h, (hl)
                                   1598 ;	spillPairReg hl
      00060C 6F               [ 4] 1599 	ld	l, a
                                   1600 ;	spillPairReg hl
                                   1601 ;	spillPairReg hl
      00060D 11 2C 14         [12] 1602 	ld	de, #0x142c
      000610 D5               [16] 1603 	push	de
      000611 11 03 23         [12] 1604 	ld	de, #0x2303
      000614 D5               [16] 1605 	push	de
      000615 5D               [ 4] 1606 	ld	e, l
      000616 54               [ 4] 1607 	ld	d, h
      000617 CDrF9r03         [24] 1608 	call	_progressbar
                           00061A  1609 	C$map.c$225$1_0$299	= .
                                   1610 	.globl	C$map.c$225$1_0$299
                                   1611 ;src/map.c:225: }
                           00061A  1612 	C$map.c$225$1_0$299	= .
                                   1613 	.globl	C$map.c$225$1_0$299
                           00061A  1614 	XG$draw_fuel$0$0	= .
                                   1615 	.globl	XG$draw_fuel$0$0
      00061A C9               [16] 1616 	ret
                           00061B  1617 	G$draw_hull$0$0	= .
                                   1618 	.globl	G$draw_hull$0$0
                           00061B  1619 	C$map.c$226$1_0$301	= .
                                   1620 	.globl	C$map.c$226$1_0$301
                                   1621 ;src/map.c:226: void draw_hull(void){
                                   1622 ;	---------------------------------
                                   1623 ; Function draw_hull
                                   1624 ; ---------------------------------
      00061B                       1625 _draw_hull::
                           00061B  1626 	C$map.c$227$1_0$301	= .
                                   1627 	.globl	C$map.c$227$1_0$301
                                   1628 ;src/map.c:227: progressbar(player.hull.current_value, player.hull.max_value, 2, 32, 12, 20);
      00061B 21r4Br00         [12] 1629 	ld	hl, #_player + 75
      00061E 2A               [ 8] 1630 	ld	a, (hl+)
      00061F 4F               [ 4] 1631 	ld	c, a
      000620 46               [ 8] 1632 	ld	b, (hl)
      000621 21r49r00         [12] 1633 	ld	hl, #_player + 73
      000624 2A               [ 8] 1634 	ld	a,	(hl+)
      000625 66               [ 8] 1635 	ld	h, (hl)
                                   1636 ;	spillPairReg hl
      000626 6F               [ 4] 1637 	ld	l, a
                                   1638 ;	spillPairReg hl
                                   1639 ;	spillPairReg hl
      000627 11 0C 14         [12] 1640 	ld	de, #0x140c
      00062A D5               [16] 1641 	push	de
      00062B 11 02 20         [12] 1642 	ld	de, #0x2002
      00062E D5               [16] 1643 	push	de
      00062F 5D               [ 4] 1644 	ld	e, l
      000630 54               [ 4] 1645 	ld	d, h
      000631 CDrF9r03         [24] 1646 	call	_progressbar
                           000634  1647 	C$map.c$228$1_0$301	= .
                                   1648 	.globl	C$map.c$228$1_0$301
                                   1649 ;src/map.c:228: }
                           000634  1650 	C$map.c$228$1_0$301	= .
                                   1651 	.globl	C$map.c$228$1_0$301
                           000634  1652 	XG$draw_hull$0$0	= .
                                   1653 	.globl	XG$draw_hull$0$0
      000634 C9               [16] 1654 	ret
                           000635  1655 	G$draw_character$0$0	= .
                                   1656 	.globl	G$draw_character$0$0
                           000635  1657 	C$map.c$231$1_0$303	= .
                                   1658 	.globl	C$map.c$231$1_0$303
                                   1659 ;src/map.c:231: void draw_character(void){
                                   1660 ;	---------------------------------
                                   1661 ; Function draw_character
                                   1662 ; ---------------------------------
      000635                       1663 _draw_character::
                           000635  1664 	C$map.c$232$1_0$303	= .
                                   1665 	.globl	C$map.c$232$1_0$303
                                   1666 ;src/map.c:232: set_sprite_data(CHARSTART, 16, rover_tiles);
      000635 11r00r00         [12] 1667 	ld	de, #_rover_tiles
      000638 D5               [16] 1668 	push	de
      000639 21 01 10         [12] 1669 	ld	hl, #0x1001
      00063C E5               [16] 1670 	push	hl
      00063D CDr00r00         [24] 1671 	call	_set_sprite_data
      000640 E8 04            [16] 1672 	add	sp, #4
                           000642  1673 	C$map.c$233$1_0$303	= .
                                   1674 	.globl	C$map.c$233$1_0$303
                                   1675 ;src/map.c:233: draw_metasprite(direction_prev);
      000642 21r00r00         [12] 1676 	ld	hl, #_direction_prev
      000645 7E               [ 8] 1677 	ld	a, (hl)
                           000646  1678 	C$map.c$234$1_0$303	= .
                                   1679 	.globl	C$map.c$234$1_0$303
                                   1680 ;src/map.c:234: }
                           000646  1681 	C$map.c$234$1_0$303	= .
                                   1682 	.globl	C$map.c$234$1_0$303
                           000646  1683 	XG$draw_character$0$0	= .
                                   1684 	.globl	XG$draw_character$0$0
      000646 C3r00r00         [16] 1685 	jp	_draw_metasprite
                           000649  1686 	G$init_nav$0$0	= .
                                   1687 	.globl	G$init_nav$0$0
                           000649  1688 	C$map.c$236$1_0$305	= .
                                   1689 	.globl	C$map.c$236$1_0$305
                                   1690 ;src/map.c:236: void init_nav(void){
                                   1691 ;	---------------------------------
                                   1692 ; Function init_nav
                                   1693 ; ---------------------------------
      000649                       1694 _init_nav::
                           000649  1695 	C$map.c$237$1_0$305	= .
                                   1696 	.globl	C$map.c$237$1_0$305
                                   1697 ;src/map.c:237: set_win_tiles(0,0,20,3,nav_map);
      000649 11r00r00         [12] 1698 	ld	de, #_nav_map
      00064C D5               [16] 1699 	push	de
      00064D 21 14 03         [12] 1700 	ld	hl, #0x314
      000650 E5               [16] 1701 	push	hl
      000651 AF               [ 4] 1702 	xor	a, a
      000652 0F               [ 4] 1703 	rrca
      000653 F5               [16] 1704 	push	af
      000654 CDr00r00         [24] 1705 	call	_set_win_tiles
      000657 E8 06            [16] 1706 	add	sp, #6
                                   1707 ;/usr/local/opt/gbdk/include/gb/gb.h:1656: WX_REG=x, WY_REG=y;
      000659 3E 07            [ 8] 1708 	ld	a, #0x07
      00065B E0r00            [12] 1709 	ldh	(_WX_REG + 0), a
      00065D AF               [ 4] 1710 	xor	a, a
      00065E E0r00            [12] 1711 	ldh	(_WY_REG + 0), a
                           000660  1712 	C$map.c$238$3_0$305	= .
                                   1713 	.globl	C$map.c$238$3_0$305
                                   1714 ;src/map.c:238: move_win(7, 0); //124
                           000660  1715 	C$map.c$239$3_0$305	= .
                                   1716 	.globl	C$map.c$239$3_0$305
                                   1717 ;src/map.c:239: }
                           000660  1718 	C$map.c$239$3_0$305	= .
                                   1719 	.globl	C$map.c$239$3_0$305
                           000660  1720 	XG$init_nav$0$0	= .
                                   1721 	.globl	XG$init_nav$0$0
      000660 C9               [16] 1722 	ret
                           000661  1723 	G$init_tiles$0$0	= .
                                   1724 	.globl	G$init_tiles$0$0
                           000661  1725 	C$map.c$241$3_0$310	= .
                                   1726 	.globl	C$map.c$241$3_0$310
                                   1727 ;src/map.c:241: void init_tiles(void){
                                   1728 ;	---------------------------------
                                   1729 ; Function init_tiles
                                   1730 ; ---------------------------------
      000661                       1731 _init_tiles::
                           000661  1732 	C$map.c$242$1_0$310	= .
                                   1733 	.globl	C$map.c$242$1_0$310
                                   1734 ;src/map.c:242: set_bkg_data(TILESTART, 28, tile_tiles);
      000661 11r00r00         [12] 1735 	ld	de, #_tile_tiles
      000664 D5               [16] 1736 	push	de
      000665 21 5C 1C         [12] 1737 	ld	hl, #0x1c5c
      000668 E5               [16] 1738 	push	hl
      000669 CDr00r00         [24] 1739 	call	_set_bkg_data
      00066C E8 04            [16] 1740 	add	sp, #4
                           00066E  1741 	C$map.c$243$1_0$310	= .
                                   1742 	.globl	C$map.c$243$1_0$310
                                   1743 ;src/map.c:243: set_bkg_data(NAVSTART, nav_TILE_COUNT, nav_tiles);
      00066E 11r00r00         [12] 1744 	ld	de, #_nav_tiles
      000671 D5               [16] 1745 	push	de
      000672 21 80 0C         [12] 1746 	ld	hl, #0xc80
      000675 E5               [16] 1747 	push	hl
      000676 CDr00r00         [24] 1748 	call	_set_bkg_data
      000679 E8 04            [16] 1749 	add	sp, #4
                           00067B  1750 	C$map.c$244$1_0$310	= .
                                   1751 	.globl	C$map.c$244$1_0$310
                                   1752 ;src/map.c:244: set_4bkg_tiles(level_array, 0, 0, 16, 16);
      00067B 21 10 10         [12] 1753 	ld	hl, #0x1010
      00067E E5               [16] 1754 	push	hl
      00067F AF               [ 4] 1755 	xor	a, a
      000680 F5               [16] 1756 	push	af
      000681 33               [ 8] 1757 	inc	sp
      000682 AF               [ 4] 1758 	xor	a, a
      000683 11r00r00         [12] 1759 	ld	de, #_level_array
      000686 CDr92r00         [24] 1760 	call	_set_4bkg_tiles
                           000689  1761 	C$map.c$245$1_0$310	= .
                                   1762 	.globl	C$map.c$245$1_0$310
                                   1763 ;src/map.c:245: }
                           000689  1764 	C$map.c$245$1_0$310	= .
                                   1765 	.globl	C$map.c$245$1_0$310
                           000689  1766 	XG$init_tiles$0$0	= .
                                   1767 	.globl	XG$init_tiles$0$0
      000689 C9               [16] 1768 	ret
                           00068A  1769 	G$init_progressbar$0$0	= .
                                   1770 	.globl	G$init_progressbar$0$0
                           00068A  1771 	C$map.c$247$1_0$312	= .
                                   1772 	.globl	C$map.c$247$1_0$312
                                   1773 ;src/map.c:247: void init_progressbar(void){
                                   1774 ;	---------------------------------
                                   1775 ; Function init_progressbar
                                   1776 ; ---------------------------------
      00068A                       1777 _init_progressbar::
                           00068A  1778 	C$map.c$248$1_0$312	= .
                                   1779 	.globl	C$map.c$248$1_0$312
                                   1780 ;src/map.c:248: set_sprite_data(SPRITE_TILE_1_8, progressbar_TILE_COUNT, progressbar_tiles);
      00068A 11r00r00         [12] 1781 	ld	de, #_progressbar_tiles
      00068D D5               [16] 1782 	push	de
      00068E 21 20 09         [12] 1783 	ld	hl, #0x920
      000691 E5               [16] 1784 	push	hl
      000692 CDr00r00         [24] 1785 	call	_set_sprite_data
      000695 E8 04            [16] 1786 	add	sp, #4
                           000697  1787 	C$map.c$249$1_0$312	= .
                                   1788 	.globl	C$map.c$249$1_0$312
                                   1789 ;src/map.c:249: progressbar(player.hull.current_value, player.hull.max_value, 2, 32, 12, 20);
      000697 21r4Br00         [12] 1790 	ld	hl, #_player + 75
      00069A 2A               [ 8] 1791 	ld	a, (hl+)
      00069B 4F               [ 4] 1792 	ld	c, a
      00069C 46               [ 8] 1793 	ld	b, (hl)
      00069D 21r49r00         [12] 1794 	ld	hl, #_player + 73
      0006A0 2A               [ 8] 1795 	ld	a,	(hl+)
      0006A1 66               [ 8] 1796 	ld	h, (hl)
                                   1797 ;	spillPairReg hl
      0006A2 6F               [ 4] 1798 	ld	l, a
                                   1799 ;	spillPairReg hl
                                   1800 ;	spillPairReg hl
      0006A3 11 0C 14         [12] 1801 	ld	de, #0x140c
      0006A6 D5               [16] 1802 	push	de
      0006A7 11 02 20         [12] 1803 	ld	de, #0x2002
      0006AA D5               [16] 1804 	push	de
      0006AB 5D               [ 4] 1805 	ld	e, l
      0006AC 54               [ 4] 1806 	ld	d, h
      0006AD CDrF9r03         [24] 1807 	call	_progressbar
                           0006B0  1808 	C$map.c$250$1_0$312	= .
                                   1809 	.globl	C$map.c$250$1_0$312
                                   1810 ;src/map.c:250: }
                           0006B0  1811 	C$map.c$250$1_0$312	= .
                                   1812 	.globl	C$map.c$250$1_0$312
                           0006B0  1813 	XG$init_progressbar$0$0	= .
                                   1814 	.globl	XG$init_progressbar$0$0
      0006B0 C9               [16] 1815 	ret
                                   1816 	.area _CODE_1
                                   1817 	.area _INITIALIZER
                                   1818 	.area _CABS (ABS)
