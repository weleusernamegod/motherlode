                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14228 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module map
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _init_progressbar
                                     12 	.globl _init_tiles
                                     13 	.globl _init_nav
                                     14 	.globl _draw_character
                                     15 	.globl _draw_hull
                                     16 	.globl _draw_fuel
                                     17 	.globl _draw_cargo
                                     18 	.globl _draw_depth
                                     19 	.globl _progressbar
                                     20 	.globl _add_block
                                     21 	.globl _clear_4bkg_tiles
                                     22 	.globl _spawn_bkg_row
                                     23 	.globl _set_4bkg_tiles
                                     24 	.globl _change_background_color
                                     25 	.globl _shuffle
                                     26 	.globl b___func_bank_map
                                     27 	.globl ___func_bank_map
                                     28 	.globl _draw_metasprite
                                     29 	.globl _draw_text
                                     30 	.globl _rand
                                     31 	.globl _initrand
                                     32 	.globl _strcat
                                     33 	.globl _itoa
                                     34 	.globl _set_bkg_palette_entry
                                     35 	.globl _set_sprite_data
                                     36 	.globl _set_win_tiles
                                     37 	.globl _set_bkg_tiles
                                     38 	.globl _set_bkg_data
                                     39 ;--------------------------------------------------------
                                     40 ; special function registers
                                     41 ;--------------------------------------------------------
                                     42 ;--------------------------------------------------------
                                     43 ; ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area _DATA
                                     46 ;--------------------------------------------------------
                                     47 ; ram data
                                     48 ;--------------------------------------------------------
                                     49 	.area _INITIALIZED
                                     50 ;--------------------------------------------------------
                                     51 ; absolute external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area _DABS (ABS)
                                     54 ;--------------------------------------------------------
                                     55 ; global & static initialisations
                                     56 ;--------------------------------------------------------
                                     57 	.area _HOME
                                     58 	.area _GSINIT
                                     59 	.area _GSFINAL
                                     60 	.area _GSINIT
                                     61 ;--------------------------------------------------------
                                     62 ; Home
                                     63 ;--------------------------------------------------------
                                     64 	.area _HOME
                                     65 	.area _HOME
                                     66 ;--------------------------------------------------------
                                     67 ; code
                                     68 ;--------------------------------------------------------
                                     69 	.area _CODE_1
                           000000    70 	G$__func_bank_map$0$0	= .
                                     71 	.globl	G$__func_bank_map$0$0
                           000000    72 	C$map.c$30$0_0$246	= .
                                     73 	.globl	C$map.c$30$0_0$246
                                     74 ;src/map.c:30: BANKREF(bank_map)
                                     75 ;	---------------------------------
                                     76 ; Function __func_bank_map
                                     77 ; ---------------------------------
                           000001    78 	b___func_bank_map	= 1
      000000                         79 ___func_bank_map::
                                     80 	.local b___func_bank_map 
                           000001    81 	___bank_bank_map = b___func_bank_map 
                                     82 	.globl ___bank_bank_map 
                           000000    83 	G$shuffle$0$0	= .
                                     84 	.globl	G$shuffle$0$0
                           000000    85 	C$map.c$33$1_0$248	= .
                                     86 	.globl	C$map.c$33$1_0$248
                                     87 ;src/map.c:33: void shuffle(uint8_t array[4]) {
                                     88 ;	---------------------------------
                                     89 ; Function shuffle
                                     90 ; ---------------------------------
      000000                         91 _shuffle::
      000000 3B               [ 8]   92 	dec	sp
                           000001    93 	C$map.c$34$2_0$248	= .
                                     94 	.globl	C$map.c$34$2_0$248
                                     95 ;src/map.c:34: uint16_t seed = LY_REG;
      000001 F0r00            [12]   96 	ldh	a, (_LY_REG + 0)
      000003 6F               [ 4]   97 	ld	l, a
                                     98 ;	spillPairReg hl
                                     99 ;	spillPairReg hl
                                    100 ;	spillPairReg hl
                                    101 ;	spillPairReg hl
                           000004   102 	C$map.c$35$1_0$248	= .
                                    103 	.globl	C$map.c$35$1_0$248
                                    104 ;src/map.c:35: seed |= (uint16_t)DIV_REG << 8;
      000004 F0r00            [12]  105 	ldh	a, (_DIV_REG + 0)
      000006 4F               [ 4]  106 	ld	c, a
      000007 AF               [ 4]  107 	xor	a, a
      000008 B5               [ 4]  108 	or	a, l
                           000009   109 	C$map.c$36$1_0$248	= .
                                    110 	.globl	C$map.c$36$1_0$248
                                    111 ;src/map.c:36: initrand(seed);
      000009 D5               [16]  112 	push	de
      00000A 41               [ 4]  113 	ld	b, c
      00000B 4F               [ 4]  114 	ld	c, a
      00000C C5               [16]  115 	push	bc
      00000D CDr00r00         [24]  116 	call	_initrand
      000010 E1               [12]  117 	pop	hl
      000011 CDr00r00         [24]  118 	call	_rand
      000014 7B               [ 4]  119 	ld	a, e
      000015 D1               [12]  120 	pop	de
      000016 E6 03            [ 8]  121 	and	a, #0x03
      000018 6F               [ 4]  122 	ld	l, a
                                    123 ;	spillPairReg hl
                                    124 ;	spillPairReg hl
                           000019   125 	C$map.c$40$1_1$249	= .
                                    126 	.globl	C$map.c$40$1_1$249
                                    127 ;src/map.c:40: do {
      000019                        128 00101$:
                           000019   129 	C$map.c$41$2_1$250	= .
                                    130 	.globl	C$map.c$41$2_1$250
                                    131 ;src/map.c:41: secondSwapIndex = rand() % 4;
      000019 E5               [16]  132 	push	hl
      00001A D5               [16]  133 	push	de
      00001B CDr00r00         [24]  134 	call	_rand
      00001E 7B               [ 4]  135 	ld	a, e
      00001F D1               [12]  136 	pop	de
      000020 E1               [12]  137 	pop	hl
      000021 E6 03            [ 8]  138 	and	a, #0x03
      000023 4F               [ 4]  139 	ld	c, a
                           000024   140 	C$map.c$42$1_1$249	= .
                                    141 	.globl	C$map.c$42$1_1$249
                                    142 ;src/map.c:42: } while (firstSwapIndex == secondSwapIndex);  // Ensure it's a different index
      000024 7D               [ 4]  143 	ld	a, l
      000025 91               [ 4]  144 	sub	a, c
      000026 28 F1            [12]  145 	jr	Z, 00101$
                           000028   146 	C$map.c$45$1_2$251	= .
                                    147 	.globl	C$map.c$45$1_2$251
                                    148 ;src/map.c:45: uint8_t temp = array[firstSwapIndex];
      000028 26 00            [ 8]  149 	ld	h, #0x00
      00002A 19               [ 8]  150 	add	hl, de
      00002B 7E               [ 8]  151 	ld	a, (hl)
      00002C E5               [16]  152 	push	hl
      00002D F8 02            [12]  153 	ldhl	sp,	#2
      00002F 77               [ 8]  154 	ld	(hl), a
      000030 E1               [12]  155 	pop	hl
                           000031   156 	C$map.c$46$1_2$251	= .
                                    157 	.globl	C$map.c$46$1_2$251
                                    158 ;src/map.c:46: array[firstSwapIndex] = array[secondSwapIndex];
      000031 7B               [ 4]  159 	ld	a, e
      000032 81               [ 4]  160 	add	a, c
      000033 4F               [ 4]  161 	ld	c, a
      000034 7A               [ 4]  162 	ld	a, d
      000035 CE 00            [ 8]  163 	adc	a, #0x00
      000037 47               [ 4]  164 	ld	b, a
      000038 0A               [ 8]  165 	ld	a, (bc)
      000039 77               [ 8]  166 	ld	(hl), a
                           00003A   167 	C$map.c$47$1_2$251	= .
                                    168 	.globl	C$map.c$47$1_2$251
                                    169 ;src/map.c:47: array[secondSwapIndex] = temp;
      00003A F8 00            [12]  170 	ldhl	sp,	#0
      00003C 7E               [ 8]  171 	ld	a, (hl)
      00003D 02               [ 8]  172 	ld	(bc), a
                           00003E   173 	C$map.c$50$1_2$251	= .
                                    174 	.globl	C$map.c$50$1_2$251
                                    175 ;src/map.c:50: firstSwapIndex = rand() % 4;
      00003E D5               [16]  176 	push	de
      00003F CDr00r00         [24]  177 	call	_rand
      000042 7B               [ 4]  178 	ld	a, e
      000043 D1               [12]  179 	pop	de
      000044 E6 03            [ 8]  180 	and	a, #0x03
      000046 6F               [ 4]  181 	ld	l, a
                                    182 ;	spillPairReg hl
                                    183 ;	spillPairReg hl
                           000047   184 	C$map.c$51$1_2$251	= .
                                    185 	.globl	C$map.c$51$1_2$251
                                    186 ;src/map.c:51: do {
      000047                        187 00104$:
                           000047   188 	C$map.c$52$2_2$252	= .
                                    189 	.globl	C$map.c$52$2_2$252
                                    190 ;src/map.c:52: secondSwapIndex = rand() % 4;
      000047 E5               [16]  191 	push	hl
      000048 D5               [16]  192 	push	de
      000049 CDr00r00         [24]  193 	call	_rand
      00004C 7B               [ 4]  194 	ld	a, e
      00004D D1               [12]  195 	pop	de
      00004E E1               [12]  196 	pop	hl
      00004F E6 03            [ 8]  197 	and	a, #0x03
      000051 47               [ 4]  198 	ld	b, a
                           000052   199 	C$map.c$53$1_2$251	= .
                                    200 	.globl	C$map.c$53$1_2$251
                                    201 ;src/map.c:53: } while (firstSwapIndex == secondSwapIndex);  // Ensure it's a different index
      000052 7D               [ 4]  202 	ld	a, l
      000053 90               [ 4]  203 	sub	a, b
      000054 28 F1            [12]  204 	jr	Z, 00104$
                           000056   205 	C$map.c$55$1_2$251	= .
                                    206 	.globl	C$map.c$55$1_2$251
                                    207 ;src/map.c:55: temp = array[firstSwapIndex];
      000056 26 00            [ 8]  208 	ld	h, #0x00
      000058 19               [ 8]  209 	add	hl, de
      000059 4E               [ 8]  210 	ld	c, (hl)
                           00005A   211 	C$map.c$56$1_2$251	= .
                                    212 	.globl	C$map.c$56$1_2$251
                                    213 ;src/map.c:56: array[firstSwapIndex] = array[secondSwapIndex];
      00005A 7B               [ 4]  214 	ld	a, e
      00005B 80               [ 4]  215 	add	a, b
      00005C 5F               [ 4]  216 	ld	e, a
      00005D 30 01            [12]  217 	jr	NC, 00139$
      00005F 14               [ 4]  218 	inc	d
      000060                        219 00139$:
      000060 1A               [ 8]  220 	ld	a, (de)
      000061 77               [ 8]  221 	ld	(hl), a
                           000062   222 	C$map.c$57$1_2$251	= .
                                    223 	.globl	C$map.c$57$1_2$251
                                    224 ;src/map.c:57: array[secondSwapIndex] = temp;
      000062 79               [ 4]  225 	ld	a, c
      000063 12               [ 8]  226 	ld	(de), a
                           000064   227 	C$map.c$58$1_2$248	= .
                                    228 	.globl	C$map.c$58$1_2$248
                                    229 ;src/map.c:58: }
      000064 33               [ 8]  230 	inc	sp
                           000065   231 	C$map.c$58$1_2$248	= .
                                    232 	.globl	C$map.c$58$1_2$248
                           000065   233 	XG$shuffle$0$0	= .
                                    234 	.globl	XG$shuffle$0$0
      000065 C9               [16]  235 	ret
                           000066   236 	G$change_background_color$0$0	= .
                                    237 	.globl	G$change_background_color$0$0
                           000066   238 	C$map.c$60$1_2$254	= .
                                    239 	.globl	C$map.c$60$1_2$254
                                    240 ;src/map.c:60: void change_background_color(void) {
                                    241 ;	---------------------------------
                                    242 ; Function change_background_color
                                    243 ; ---------------------------------
      000066                        244 _change_background_color::
                           000066   245 	C$map.c$61$1_0$254	= .
                                    246 	.globl	C$map.c$61$1_0$254
                                    247 ;src/map.c:61: set_bkg_palette_entry(0,0,RGB8(255 - 5 * depth, 255, 255));
      000066 21r00r00         [12]  248 	ld	hl, #_depth
      000069 4E               [ 8]  249 	ld	c, (hl)
      00006A 06 00            [ 8]  250 	ld	b, #0x00
      00006C 69               [ 4]  251 	ld	l, c
      00006D 60               [ 4]  252 	ld	h, b
      00006E 29               [ 8]  253 	add	hl, hl
      00006F 29               [ 8]  254 	add	hl, hl
      000070 09               [ 8]  255 	add	hl, bc
      000071 3E FF            [ 8]  256 	ld	a, #0xff
      000073 95               [ 4]  257 	sub	a, l
      000074 4F               [ 4]  258 	ld	c, a
      000075 9F               [ 4]  259 	sbc	a, a
      000076 94               [ 4]  260 	sub	a, h
      000077 47               [ 4]  261 	ld	b, a
      000078 CB 28            [ 8]  262 	sra	b
      00007A CB 19            [ 8]  263 	rr	c
      00007C CB 28            [ 8]  264 	sra	b
      00007E CB 19            [ 8]  265 	rr	c
      000080 CB 28            [ 8]  266 	sra	b
      000082 CB 19            [ 8]  267 	rr	c
      000084 79               [ 4]  268 	ld	a, c
      000085 E6 1F            [ 8]  269 	and	a, #0x1f
      000087 F6 E0            [ 8]  270 	or	a, #0xe0
      000089 06 7F            [ 8]  271 	ld	b, #0x7f
      00008B 4F               [ 4]  272 	ld	c, a
      00008C C5               [16]  273 	push	bc
      00008D AF               [ 4]  274 	xor	a, a
      00008E 0F               [ 4]  275 	rrca
      00008F F5               [16]  276 	push	af
      000090 CDr00r00         [24]  277 	call	_set_bkg_palette_entry
      000093 E8 04            [16]  278 	add	sp, #4
                           000095   279 	C$map.c$62$1_0$254	= .
                                    280 	.globl	C$map.c$62$1_0$254
                                    281 ;src/map.c:62: }
                           000095   282 	C$map.c$62$1_0$254	= .
                                    283 	.globl	C$map.c$62$1_0$254
                           000095   284 	XG$change_background_color$0$0	= .
                                    285 	.globl	XG$change_background_color$0$0
      000095 C9               [16]  286 	ret
                           000096   287 	G$set_4bkg_tiles$0$0	= .
                                    288 	.globl	G$set_4bkg_tiles$0$0
                           000096   289 	C$map.c$73$1_0$257	= .
                                    290 	.globl	C$map.c$73$1_0$257
                                    291 ;src/map.c:73: void set_4bkg_tiles(uint8_t array[][16], uint8_t x1, uint8_t y1, uint8_t r, uint8_t c) {
                                    292 ;	---------------------------------
                                    293 ; Function set_4bkg_tiles
                                    294 ; ---------------------------------
      000096                        295 _set_4bkg_tiles::
      000096 E8 E8            [16]  296 	add	sp, #-24
      000098 F8 12            [12]  297 	ldhl	sp,	#18
      00009A 73               [ 8]  298 	ld	(hl), e
      00009B 23               [ 8]  299 	inc	hl
      00009C 72               [ 8]  300 	ld	(hl), d
      00009D 2B               [ 8]  301 	dec	hl
      00009E 2B               [ 8]  302 	dec	hl
      00009F 77               [ 8]  303 	ld	(hl), a
                           0000A0   304 	C$map.c$74$3_0$257	= .
                                    305 	.globl	C$map.c$74$3_0$257
                                    306 ;src/map.c:74: for (uint8_t y = y1; y < y1 + r; y++) {
      0000A0 F8 1A            [12]  307 	ldhl	sp,	#26
      0000A2 7E               [ 8]  308 	ld	a, (hl)
      0000A3 F8 14            [12]  309 	ldhl	sp,	#20
      0000A5 77               [ 8]  310 	ld	(hl), a
      0000A6                        311 00134$:
      0000A6 F8 1A            [12]  312 	ldhl	sp,	#26
      0000A8 2A               [ 8]  313 	ld	a, (hl+)
      0000A9 06 00            [ 8]  314 	ld	b, #0x00
      0000AB 5E               [ 8]  315 	ld	e, (hl)
      0000AC 83               [ 4]  316 	add	a, e
      0000AD 4F               [ 4]  317 	ld	c, a
      0000AE 30 01            [12]  318 	jr	NC, 00264$
      0000B0 04               [ 4]  319 	inc	b
      0000B1                        320 00264$:
      0000B1 F8 14            [12]  321 	ldhl	sp,	#20
      0000B3 7E               [ 8]  322 	ld	a, (hl)
      0000B4 F8 08            [12]  323 	ldhl	sp,	#8
      0000B6 22               [ 8]  324 	ld	(hl+), a
      0000B7 AF               [ 4]  325 	xor	a, a
      0000B8 32               [ 8]  326 	ld	(hl-), a
      0000B9 2A               [ 8]  327 	ld	a, (hl+)
      0000BA 91               [ 4]  328 	sub	a, c
      0000BB 7E               [ 8]  329 	ld	a, (hl)
      0000BC 98               [ 4]  330 	sbc	a, b
      0000BD 56               [ 8]  331 	ld	d, (hl)
      0000BE 78               [ 4]  332 	ld	a, b
      0000BF 5F               [ 4]  333 	ld	e, a
      0000C0 CB 7B            [ 8]  334 	bit	7, e
      0000C2 28 07            [12]  335 	jr	Z, 00265$
      0000C4 CB 7A            [ 8]  336 	bit	7, d
      0000C6 20 08            [12]  337 	jr	NZ, 00266$
      0000C8 BF               [ 4]  338 	cp	a, a
      0000C9 18 05            [12]  339 	jr	00266$
      0000CB                        340 00265$:
      0000CB CB 7A            [ 8]  341 	bit	7, d
      0000CD 28 01            [12]  342 	jr	Z, 00266$
      0000CF 37               [ 4]  343 	scf
      0000D0                        344 00266$:
      0000D0 D2r67r03         [16]  345 	jp	NC, 00136$
                           0000D3   346 	C$map.c$75$5_0$260	= .
                                    347 	.globl	C$map.c$75$5_0$260
                                    348 ;src/map.c:75: for (uint8_t x = x1; x < x1 + c; x++) {
      0000D3 F8 14            [12]  349 	ldhl	sp,	#20
      0000D5 7E               [ 8]  350 	ld	a, (hl)
      0000D6 87               [ 4]  351 	add	a, a
      0000D7 F8 0A            [12]  352 	ldhl	sp,	#10
      0000D9 77               [ 8]  353 	ld	(hl), a
      0000DA F8 11            [12]  354 	ldhl	sp,	#17
      0000DC 7E               [ 8]  355 	ld	a, (hl)
      0000DD F8 15            [12]  356 	ldhl	sp,	#21
      0000DF 77               [ 8]  357 	ld	(hl), a
      0000E0                        358 00131$:
      0000E0 F8 11            [12]  359 	ldhl	sp,	#17
      0000E2 7E               [ 8]  360 	ld	a, (hl)
      0000E3 F8 0D            [12]  361 	ldhl	sp,	#13
      0000E5 22               [ 8]  362 	ld	(hl+), a
      0000E6 36 00            [12]  363 	ld	(hl), #0x00
      0000E8 F8 1C            [12]  364 	ldhl	sp,	#28
      0000EA 7E               [ 8]  365 	ld	a, (hl)
      0000EB F8 0F            [12]  366 	ldhl	sp,	#15
      0000ED 22               [ 8]  367 	ld	(hl+), a
      0000EE AF               [ 4]  368 	xor	a, a
      0000EF 32               [ 8]  369 	ld	(hl-), a
      0000F0 2A               [ 8]  370 	ld	a, (hl+)
      0000F1 5F               [ 4]  371 	ld	e, a
      0000F2 56               [ 8]  372 	ld	d, (hl)
      0000F3 F8 0D            [12]  373 	ldhl	sp,	#13
      0000F5 2A               [ 8]  374 	ld	a,	(hl+)
      0000F6 66               [ 8]  375 	ld	h, (hl)
      0000F7 6F               [ 4]  376 	ld	l, a
      0000F8 19               [ 8]  377 	add	hl, de
      0000F9 E5               [16]  378 	push	hl
      0000FA 7D               [ 4]  379 	ld	a, l
      0000FB F8 18            [12]  380 	ldhl	sp,	#24
      0000FD 77               [ 8]  381 	ld	(hl), a
      0000FE E1               [12]  382 	pop	hl
      0000FF 7C               [ 4]  383 	ld	a, h
      000100 F8 17            [12]  384 	ldhl	sp,	#23
      000102 32               [ 8]  385 	ld	(hl-), a
      000103 2B               [ 8]  386 	dec	hl
      000104 7E               [ 8]  387 	ld	a, (hl)
      000105 F8 0F            [12]  388 	ldhl	sp,	#15
      000107 22               [ 8]  389 	ld	(hl+), a
      000108 36 00            [12]  390 	ld	(hl), #0x00
      00010A F8 0F            [12]  391 	ldhl	sp,	#15
      00010C 5D               [ 4]  392 	ld	e, l
      00010D 54               [ 4]  393 	ld	d, h
      00010E F8 16            [12]  394 	ldhl	sp,	#22
      000110 1A               [ 8]  395 	ld	a, (de)
      000111 13               [ 8]  396 	inc	de
      000112 96               [ 8]  397 	sub	a, (hl)
      000113 23               [ 8]  398 	inc	hl
      000114 1A               [ 8]  399 	ld	a, (de)
      000115 9E               [ 8]  400 	sbc	a, (hl)
      000116 1A               [ 8]  401 	ld	a, (de)
      000117 57               [ 4]  402 	ld	d, a
      000118 CB 7E            [12]  403 	bit	7, (hl)
      00011A 28 07            [12]  404 	jr	Z, 00267$
      00011C CB 7A            [ 8]  405 	bit	7, d
      00011E 20 08            [12]  406 	jr	NZ, 00268$
      000120 BF               [ 4]  407 	cp	a, a
      000121 18 05            [12]  408 	jr	00268$
      000123                        409 00267$:
      000123 CB 7A            [ 8]  410 	bit	7, d
      000125 28 01            [12]  411 	jr	Z, 00268$
      000127 37               [ 4]  412 	scf
      000128                        413 00268$:
      000128 D2r61r03         [16]  414 	jp	NC, 00135$
                           00012B   415 	C$map.c$76$5_0$260	= .
                                    416 	.globl	C$map.c$76$5_0$260
                                    417 ;src/map.c:76: uint8_t temp = (array[y][x] * 4) + TILESTART - 4;
      00012B F8 08            [12]  418 	ldhl	sp,	#8
      00012D 7E               [ 8]  419 	ld	a, (hl)
      00012E 16 00            [ 8]  420 	ld	d, #0x00
      000130 87               [ 4]  421 	add	a, a
      000131 CB 12            [ 8]  422 	rl	d
      000133 87               [ 4]  423 	add	a, a
      000134 CB 12            [ 8]  424 	rl	d
      000136 87               [ 4]  425 	add	a, a
      000137 CB 12            [ 8]  426 	rl	d
      000139 87               [ 4]  427 	add	a, a
      00013A CB 12            [ 8]  428 	rl	d
      00013C 5F               [ 4]  429 	ld	e, a
      00013D F8 12            [12]  430 	ldhl	sp,	#18
      00013F 2A               [ 8]  431 	ld	a,	(hl+)
      000140 66               [ 8]  432 	ld	h, (hl)
      000141 6F               [ 4]  433 	ld	l, a
      000142 19               [ 8]  434 	add	hl, de
      000143 4D               [ 4]  435 	ld	c, l
      000144 44               [ 4]  436 	ld	b, h
      000145 F8 15            [12]  437 	ldhl	sp,	#21
      000147 6E               [ 8]  438 	ld	l, (hl)
      000148 26 00            [ 8]  439 	ld	h, #0x00
      00014A 09               [ 8]  440 	add	hl, bc
      00014B 4D               [ 4]  441 	ld	c, l
      00014C 44               [ 4]  442 	ld	b, h
      00014D 0A               [ 8]  443 	ld	a, (bc)
      00014E 87               [ 4]  444 	add	a, a
      00014F 87               [ 4]  445 	add	a, a
      000150 C6 58            [ 8]  446 	add	a, #0x58
      000152 F8 17            [12]  447 	ldhl	sp,	#23
      000154 77               [ 8]  448 	ld	(hl), a
                           000155   449 	C$map.c$77$5_0$260	= .
                                    450 	.globl	C$map.c$77$5_0$260
                                    451 ;src/map.c:77: uint8_t tile_array[4] = {temp, temp + 1, temp + 2, temp + 3};
      000155 7E               [ 8]  452 	ld	a, (hl)
      000156 F8 00            [12]  453 	ldhl	sp,	#0
      000158 77               [ 8]  454 	ld	(hl), a
      000159 F8 17            [12]  455 	ldhl	sp,	#23
      00015B 7E               [ 8]  456 	ld	a, (hl)
      00015C F8 10            [12]  457 	ldhl	sp,	#16
      00015E 77               [ 8]  458 	ld	(hl), a
      00015F 7E               [ 8]  459 	ld	a, (hl)
      000160 3C               [ 4]  460 	inc	a
      000161 F8 01            [12]  461 	ldhl	sp,	#1
      000163 77               [ 8]  462 	ld	(hl), a
      000164 F8 10            [12]  463 	ldhl	sp,	#16
      000166 7E               [ 8]  464 	ld	a, (hl)
      000167 3C               [ 4]  465 	inc	a
      000168 3C               [ 4]  466 	inc	a
      000169 F8 02            [12]  467 	ldhl	sp,	#2
      00016B 77               [ 8]  468 	ld	(hl), a
      00016C F8 10            [12]  469 	ldhl	sp,	#16
      00016E 7E               [ 8]  470 	ld	a, (hl)
      00016F 3C               [ 4]  471 	inc	a
      000170 3C               [ 4]  472 	inc	a
      000171 3C               [ 4]  473 	inc	a
      000172 F8 03            [12]  474 	ldhl	sp,	#3
      000174 77               [ 8]  475 	ld	(hl), a
                           000175   476 	C$map.c$80$5_0$260	= .
                                    477 	.globl	C$map.c$80$5_0$260
                                    478 ;src/map.c:80: if (array[y][x] == EMPTY) {
      000175 0A               [ 8]  479 	ld	a, (bc)
                           000176   480 	C$map.c$81$2_0$257	= .
                                    481 	.globl	C$map.c$81$2_0$257
                                    482 ;src/map.c:81: for (int i = 0; i < 4; i++) tile_array[i] = 0;
      000176 B7               [ 4]  483 	or	a,a
      000177 20 3D            [12]  484 	jr	NZ, 00109$
      000179 F8 16            [12]  485 	ldhl	sp,	#22
      00017B 22               [ 8]  486 	ld	(hl+), a
      00017C 77               [ 8]  487 	ld	(hl), a
      00017D                        488 00119$:
      00017D F8 16            [12]  489 	ldhl	sp,	#22
      00017F 2A               [ 8]  490 	ld	a, (hl+)
      000180 D6 04            [ 8]  491 	sub	a, #0x04
      000182 7E               [ 8]  492 	ld	a, (hl)
      000183 DE 00            [ 8]  493 	sbc	a, #0x00
      000185 56               [ 8]  494 	ld	d, (hl)
      000186 3E 00            [ 8]  495 	ld	a, #0x00
      000188 CB 7F            [ 8]  496 	bit	7,a
      00018A 28 07            [12]  497 	jr	Z, 00270$
      00018C CB 7A            [ 8]  498 	bit	7, d
      00018E 20 08            [12]  499 	jr	NZ, 00271$
      000190 BF               [ 4]  500 	cp	a, a
      000191 18 05            [12]  501 	jr	00271$
      000193                        502 00270$:
      000193 CB 7A            [ 8]  503 	bit	7, d
      000195 28 01            [12]  504 	jr	Z, 00271$
      000197 37               [ 4]  505 	scf
      000198                        506 00271$:
      000198 D2r36r02         [16]  507 	jp	NC, 00110$
      00019B E5               [16]  508 	push	hl
      00019C 21 02 00         [12]  509 	ld	hl, #2
      00019F 39               [ 8]  510 	add	hl, sp
      0001A0 5D               [ 4]  511 	ld	e, l
      0001A1 54               [ 4]  512 	ld	d, h
      0001A2 E1               [12]  513 	pop	hl
      0001A3 F8 16            [12]  514 	ldhl	sp,	#22
      0001A5 2A               [ 8]  515 	ld	a,	(hl+)
      0001A6 66               [ 8]  516 	ld	h, (hl)
      0001A7 6F               [ 4]  517 	ld	l, a
      0001A8 19               [ 8]  518 	add	hl, de
      0001A9 5D               [ 4]  519 	ld	e, l
      0001AA 54               [ 4]  520 	ld	d, h
      0001AB AF               [ 4]  521 	xor	a, a
      0001AC 12               [ 8]  522 	ld	(de), a
      0001AD F8 16            [12]  523 	ldhl	sp,	#22
      0001AF 34               [12]  524 	inc	(hl)
      0001B0 20 CB            [12]  525 	jr	NZ, 00119$
      0001B2 23               [ 8]  526 	inc	hl
      0001B3 34               [12]  527 	inc	(hl)
      0001B4 18 C7            [12]  528 	jr	00119$
      0001B6                        529 00109$:
                           0001B6   530 	C$map.c$82$5_0$260	= .
                                    531 	.globl	C$map.c$82$5_0$260
                                    532 ;src/map.c:82: } else if (array[y][x] == GRAS) {
      0001B6 FE 02            [ 8]  533 	cp	a, #0x02
      0001B8 20 2D            [12]  534 	jr	NZ, 00106$
                           0001BA   535 	C$map.c$83$6_0$263	= .
                                    536 	.globl	C$map.c$83$6_0$263
                                    537 ;src/map.c:83: tile_array[0] = temp + (rand() % 4);
      0001BA C5               [16]  538 	push	bc
      0001BB CDr00r00         [24]  539 	call	_rand
      0001BE 7B               [ 4]  540 	ld	a, e
      0001BF C1               [12]  541 	pop	bc
      0001C0 E6 03            [ 8]  542 	and	a, #0x03
      0001C2 F8 10            [12]  543 	ldhl	sp,	#16
      0001C4 86               [ 8]  544 	add	a, (hl)
      0001C5 F8 00            [12]  545 	ldhl	sp,	#0
      0001C7 77               [ 8]  546 	ld	(hl), a
                           0001C8   547 	C$map.c$84$6_0$263	= .
                                    548 	.globl	C$map.c$84$6_0$263
                                    549 ;src/map.c:84: tile_array[1] = temp + (rand() % 4);
      0001C8 C5               [16]  550 	push	bc
      0001C9 CDr00r00         [24]  551 	call	_rand
      0001CC 7B               [ 4]  552 	ld	a, e
      0001CD C1               [12]  553 	pop	bc
      0001CE E6 03            [ 8]  554 	and	a, #0x03
      0001D0 F8 10            [12]  555 	ldhl	sp,	#16
      0001D2 86               [ 8]  556 	add	a, (hl)
      0001D3 F8 01            [12]  557 	ldhl	sp,	#1
      0001D5 77               [ 8]  558 	ld	(hl), a
                           0001D6   559 	C$map.c$85$6_0$263	= .
                                    560 	.globl	C$map.c$85$6_0$263
                                    561 ;src/map.c:85: tile_array[2] = temp - 1;
      0001D6 F8 10            [12]  562 	ldhl	sp,	#16
      0001D8 7E               [ 8]  563 	ld	a, (hl)
      0001D9 3D               [ 4]  564 	dec	a
      0001DA F8 02            [12]  565 	ldhl	sp,	#2
      0001DC 77               [ 8]  566 	ld	(hl), a
                           0001DD   567 	C$map.c$86$6_0$263	= .
                                    568 	.globl	C$map.c$86$6_0$263
                                    569 ;src/map.c:86: tile_array[3] = temp - 2;
      0001DD F8 10            [12]  570 	ldhl	sp,	#16
      0001DF 7E               [ 8]  571 	ld	a, (hl)
      0001E0 3D               [ 4]  572 	dec	a
      0001E1 3D               [ 4]  573 	dec	a
      0001E2 F8 03            [12]  574 	ldhl	sp,	#3
      0001E4 77               [ 8]  575 	ld	(hl), a
      0001E5 18 4F            [12]  576 	jr	00110$
      0001E7                        577 00106$:
                           0001E7   578 	C$map.c$87$5_0$260	= .
                                    579 	.globl	C$map.c$87$5_0$260
                                    580 ;src/map.c:87: } else if (array[y][x] == DIRT) {
                           0001E7   581 	C$map.c$88$2_0$257	= .
                                    582 	.globl	C$map.c$88$2_0$257
                                    583 ;src/map.c:88: for (int i = 0; i < 4; i++) tile_array[i] = temp + i;
      0001E7 3D               [ 4]  584 	dec	a
      0001E8 20 4C            [12]  585 	jr	NZ, 00110$
      0001EA F8 16            [12]  586 	ldhl	sp,	#22
      0001EC 22               [ 8]  587 	ld	(hl+), a
      0001ED 77               [ 8]  588 	ld	(hl), a
      0001EE                        589 00122$:
      0001EE F8 16            [12]  590 	ldhl	sp,	#22
      0001F0 2A               [ 8]  591 	ld	a, (hl+)
      0001F1 D6 04            [ 8]  592 	sub	a, #0x04
      0001F3 7E               [ 8]  593 	ld	a, (hl)
      0001F4 DE 00            [ 8]  594 	sbc	a, #0x00
      0001F6 56               [ 8]  595 	ld	d, (hl)
      0001F7 3E 00            [ 8]  596 	ld	a, #0x00
      0001F9 CB 7F            [ 8]  597 	bit	7,a
      0001FB 28 07            [12]  598 	jr	Z, 00277$
      0001FD CB 7A            [ 8]  599 	bit	7, d
      0001FF 20 08            [12]  600 	jr	NZ, 00278$
      000201 BF               [ 4]  601 	cp	a, a
      000202 18 05            [12]  602 	jr	00278$
      000204                        603 00277$:
      000204 CB 7A            [ 8]  604 	bit	7, d
      000206 28 01            [12]  605 	jr	Z, 00278$
      000208 37               [ 4]  606 	scf
      000209                        607 00278$:
      000209 30 20            [12]  608 	jr	NC, 00102$
      00020B E5               [16]  609 	push	hl
      00020C 21 02 00         [12]  610 	ld	hl, #2
      00020F 39               [ 8]  611 	add	hl, sp
      000210 5D               [ 4]  612 	ld	e, l
      000211 54               [ 4]  613 	ld	d, h
      000212 E1               [12]  614 	pop	hl
      000213 F8 16            [12]  615 	ldhl	sp,	#22
      000215 2A               [ 8]  616 	ld	a,	(hl+)
      000216 66               [ 8]  617 	ld	h, (hl)
      000217 6F               [ 4]  618 	ld	l, a
      000218 19               [ 8]  619 	add	hl, de
      000219 5D               [ 4]  620 	ld	e, l
      00021A 54               [ 4]  621 	ld	d, h
      00021B F8 16            [12]  622 	ldhl	sp,	#22
      00021D 7E               [ 8]  623 	ld	a, (hl)
      00021E F8 10            [12]  624 	ldhl	sp,	#16
      000220 86               [ 8]  625 	add	a, (hl)
      000221 12               [ 8]  626 	ld	(de), a
      000222 F8 16            [12]  627 	ldhl	sp,	#22
      000224 34               [12]  628 	inc	(hl)
      000225 20 C7            [12]  629 	jr	NZ, 00122$
      000227 23               [ 8]  630 	inc	hl
      000228 34               [12]  631 	inc	(hl)
      000229 18 C3            [12]  632 	jr	00122$
      00022B                        633 00102$:
                           00022B   634 	C$map.c$89$6_0$264	= .
                                    635 	.globl	C$map.c$89$6_0$264
                                    636 ;src/map.c:89: shuffle(tile_array);
      00022B C5               [16]  637 	push	bc
      00022C 21 02 00         [12]  638 	ld	hl, #2
      00022F 39               [ 8]  639 	add	hl, sp
      000230 5D               [ 4]  640 	ld	e, l
      000231 54               [ 4]  641 	ld	d, h
      000232 CDr00r00         [24]  642 	call	_shuffle
      000235 C1               [12]  643 	pop	bc
      000236                        644 00110$:
                           000236   645 	C$map.c$92$5_0$260	= .
                                    646 	.globl	C$map.c$92$5_0$260
                                    647 ;src/map.c:92: if (array[y][x] == EMPTY) {
      000236 0A               [ 8]  648 	ld	a, (bc)
      000237 B7               [ 4]  649 	or	a, a
      000238 20 19            [12]  650 	jr	NZ, 00153$
                           00023A   651 	C$map.c$93$2_0$257	= .
                                    652 	.globl	C$map.c$93$2_0$257
                                    653 ;src/map.c:93: for (int i = 0; i < 4; i++) palette_array[i] = 0;
      00023A 01 00 00         [12]  654 	ld	bc, #0x0000
      00023D                        655 00125$:
      00023D 79               [ 4]  656 	ld	a, c
      00023E D6 04            [ 8]  657 	sub	a, #0x04
      000240 78               [ 4]  658 	ld	a, b
      000241 17               [ 4]  659 	rla
      000242 3F               [ 4]  660 	ccf
      000243 1F               [ 4]  661 	rra
      000244 DE 80            [ 8]  662 	sbc	a, #0x80
      000246 D2rF6r02         [16]  663 	jp	NC, 00115$
      000249 21 04 00         [12]  664 	ld	hl, #4
      00024C 39               [ 8]  665 	add	hl, sp
      00024D 09               [ 8]  666 	add	hl, bc
      00024E 36 00            [12]  667 	ld	(hl), #0x00
      000250 03               [ 8]  668 	inc	bc
      000251 18 EA            [12]  669 	jr	00125$
                           000253   670 	C$map.c$95$2_0$257	= .
                                    671 	.globl	C$map.c$95$2_0$257
                                    672 ;src/map.c:95: for (int i = 0; i < 4; i++) palette_array[i] = materials[(tile_array[i] + 4 - TILESTART) / 4].color_palette;
      000253                        673 00153$:
      000253 AF               [ 4]  674 	xor	a, a
      000254 F8 16            [12]  675 	ldhl	sp,	#22
      000256 22               [ 8]  676 	ld	(hl+), a
      000257 77               [ 8]  677 	ld	(hl), a
      000258                        678 00128$:
      000258 F8 16            [12]  679 	ldhl	sp,	#22
      00025A 2A               [ 8]  680 	ld	a, (hl+)
      00025B D6 04            [ 8]  681 	sub	a, #0x04
      00025D 7E               [ 8]  682 	ld	a, (hl)
      00025E DE 00            [ 8]  683 	sbc	a, #0x00
      000260 56               [ 8]  684 	ld	d, (hl)
      000261 3E 00            [ 8]  685 	ld	a, #0x00
      000263 CB 7F            [ 8]  686 	bit	7,a
      000265 28 07            [12]  687 	jr	Z, 00280$
      000267 CB 7A            [ 8]  688 	bit	7, d
      000269 20 08            [12]  689 	jr	NZ, 00281$
      00026B BF               [ 4]  690 	cp	a, a
      00026C 18 05            [12]  691 	jr	00281$
      00026E                        692 00280$:
      00026E CB 7A            [ 8]  693 	bit	7, d
      000270 28 01            [12]  694 	jr	Z, 00281$
      000272 37               [ 4]  695 	scf
      000273                        696 00281$:
      000273 D2rF6r02         [16]  697 	jp	NC, 00115$
      000276 E5               [16]  698 	push	hl
      000277 21 06 00         [12]  699 	ld	hl, #6
      00027A 39               [ 8]  700 	add	hl, sp
      00027B 5D               [ 4]  701 	ld	e, l
      00027C 54               [ 4]  702 	ld	d, h
      00027D E1               [12]  703 	pop	hl
      00027E F8 16            [12]  704 	ldhl	sp,	#22
      000280 2A               [ 8]  705 	ld	a,	(hl+)
      000281 66               [ 8]  706 	ld	h, (hl)
      000282 6F               [ 4]  707 	ld	l, a
      000283 19               [ 8]  708 	add	hl, de
      000284 E5               [16]  709 	push	hl
      000285 7D               [ 4]  710 	ld	a, l
      000286 F8 0D            [12]  711 	ldhl	sp,	#13
      000288 77               [ 8]  712 	ld	(hl), a
      000289 E1               [12]  713 	pop	hl
      00028A 7C               [ 4]  714 	ld	a, h
      00028B F8 0C            [12]  715 	ldhl	sp,	#12
      00028D 77               [ 8]  716 	ld	(hl), a
      00028E E5               [16]  717 	push	hl
      00028F 21 02 00         [12]  718 	ld	hl, #2
      000292 39               [ 8]  719 	add	hl, sp
      000293 5D               [ 4]  720 	ld	e, l
      000294 54               [ 4]  721 	ld	d, h
      000295 E1               [12]  722 	pop	hl
      000296 F8 16            [12]  723 	ldhl	sp,	#22
      000298 2A               [ 8]  724 	ld	a,	(hl+)
      000299 66               [ 8]  725 	ld	h, (hl)
      00029A 6F               [ 4]  726 	ld	l, a
      00029B 19               [ 8]  727 	add	hl, de
      00029C 4D               [ 4]  728 	ld	c, l
      00029D 44               [ 4]  729 	ld	b, h
      00029E 0A               [ 8]  730 	ld	a, (bc)
      00029F 4F               [ 4]  731 	ld	c, a
      0002A0 06 00            [ 8]  732 	ld	b, #0x00
      0002A2 21 A8 FF         [12]  733 	ld	hl, #0xffa8
      0002A5 09               [ 8]  734 	add	hl, bc
      0002A6 E5               [16]  735 	push	hl
      0002A7 7D               [ 4]  736 	ld	a, l
      0002A8 F8 0F            [12]  737 	ldhl	sp,	#15
      0002AA 77               [ 8]  738 	ld	(hl), a
      0002AB E1               [12]  739 	pop	hl
      0002AC 7C               [ 4]  740 	ld	a, h
      0002AD F8 0E            [12]  741 	ldhl	sp,	#14
      0002AF 32               [ 8]  742 	ld	(hl-), a
      0002B0 2A               [ 8]  743 	ld	a, (hl+)
      0002B1 23               [ 8]  744 	inc	hl
      0002B2 32               [ 8]  745 	ld	(hl-), a
      0002B3 2A               [ 8]  746 	ld	a, (hl+)
      0002B4 23               [ 8]  747 	inc	hl
      0002B5 32               [ 8]  748 	ld	(hl-), a
      0002B6 2B               [ 8]  749 	dec	hl
      0002B7 CB 7E            [12]  750 	bit	7, (hl)
      0002B9 28 0E            [12]  751 	jr	Z, 00138$
      0002BB 21 AB FF         [12]  752 	ld	hl, #0xffab
      0002BE 09               [ 8]  753 	add	hl, bc
      0002BF E5               [16]  754 	push	hl
      0002C0 7D               [ 4]  755 	ld	a, l
      0002C1 F8 11            [12]  756 	ldhl	sp,	#17
      0002C3 77               [ 8]  757 	ld	(hl), a
      0002C4 E1               [12]  758 	pop	hl
      0002C5 7C               [ 4]  759 	ld	a, h
      0002C6 F8 10            [12]  760 	ldhl	sp,	#16
      0002C8 77               [ 8]  761 	ld	(hl), a
      0002C9                        762 00138$:
      0002C9 F8 0F            [12]  763 	ldhl	sp,#15
      0002CB 2A               [ 8]  764 	ld	a, (hl+)
      0002CC 4F               [ 4]  765 	ld	c, a
      0002CD 46               [ 8]  766 	ld	b, (hl)
      0002CE CB 28            [ 8]  767 	sra	b
      0002D0 CB 19            [ 8]  768 	rr	c
      0002D2 CB 28            [ 8]  769 	sra	b
      0002D4 CB 19            [ 8]  770 	rr	c
      0002D6 69               [ 4]  771 	ld	l, c
      0002D7 60               [ 4]  772 	ld	h, b
      0002D8 29               [ 8]  773 	add	hl, hl
      0002D9 29               [ 8]  774 	add	hl, hl
      0002DA 29               [ 8]  775 	add	hl, hl
      0002DB 09               [ 8]  776 	add	hl, bc
      0002DC 11r00r00         [12]  777 	ld	de, #_materials
      0002DF 19               [ 8]  778 	add	hl, de
      0002E0 01 08 00         [12]  779 	ld	bc, #0x0008
      0002E3 09               [ 8]  780 	add	hl, bc
      0002E4 4E               [ 8]  781 	ld	c, (hl)
      0002E5 F8 0B            [12]  782 	ldhl	sp,	#11
      0002E7 2A               [ 8]  783 	ld	a,	(hl+)
      0002E8 66               [ 8]  784 	ld	h, (hl)
      0002E9 6F               [ 4]  785 	ld	l, a
      0002EA 71               [ 8]  786 	ld	(hl), c
      0002EB F8 16            [12]  787 	ldhl	sp,	#22
      0002ED 34               [12]  788 	inc	(hl)
      0002EE C2r58r02         [16]  789 	jp	NZ,00128$
      0002F1 23               [ 8]  790 	inc	hl
      0002F2 34               [12]  791 	inc	(hl)
      0002F3 C3r58r02         [16]  792 	jp	00128$
      0002F6                        793 00115$:
                           0002F6   794 	C$map.c$99$5_0$260	= .
                                    795 	.globl	C$map.c$99$5_0$260
                                    796 ;src/map.c:99: VBK_REG = 0;
      0002F6 AF               [ 4]  797 	xor	a, a
      0002F7 E0r00            [12]  798 	ldh	(_VBK_REG + 0), a
                           0002F9   799 	C$map.c$100$5_0$260	= .
                                    800 	.globl	C$map.c$100$5_0$260
                                    801 ;src/map.c:100: set_bkg_tiles(2 * x, 2 * y, 2, 1, tile_array);
      0002F9 F8 15            [12]  802 	ldhl	sp,	#21
      0002FB 7E               [ 8]  803 	ld	a, (hl)
      0002FC 87               [ 4]  804 	add	a, a
      0002FD 47               [ 4]  805 	ld	b, a
      0002FE 21 00 00         [12]  806 	ld	hl, #0
      000301 39               [ 8]  807 	add	hl, sp
      000302 E5               [16]  808 	push	hl
      000303 21 02 01         [12]  809 	ld	hl, #0x102
      000306 E5               [16]  810 	push	hl
      000307 F8 0E            [12]  811 	ldhl	sp,	#14
      000309 7E               [ 8]  812 	ld	a, (hl)
      00030A F5               [16]  813 	push	af
      00030B 33               [ 8]  814 	inc	sp
      00030C C5               [16]  815 	push	bc
      00030D 33               [ 8]  816 	inc	sp
      00030E CDr00r00         [24]  817 	call	_set_bkg_tiles
      000311 E8 06            [16]  818 	add	sp, #6
                           000313   819 	C$map.c$101$5_0$260	= .
                                    820 	.globl	C$map.c$101$5_0$260
                                    821 ;src/map.c:101: set_bkg_tiles(2 * x, 2 * y + 1, 2, 1, tile_array + 2);
      000313 F8 14            [12]  822 	ldhl	sp,	#20
      000315 7E               [ 8]  823 	ld	a, (hl)
      000316 87               [ 4]  824 	add	a, a
      000317 4F               [ 4]  825 	ld	c, a
      000318 0C               [ 4]  826 	inc	c
      000319 21 02 00         [12]  827 	ld	hl, #2
      00031C 39               [ 8]  828 	add	hl, sp
      00031D E5               [16]  829 	push	hl
      00031E 21 02 01         [12]  830 	ld	hl, #0x102
      000321 E5               [16]  831 	push	hl
      000322 79               [ 4]  832 	ld	a, c
      000323 F5               [16]  833 	push	af
      000324 33               [ 8]  834 	inc	sp
      000325 C5               [16]  835 	push	bc
      000326 33               [ 8]  836 	inc	sp
      000327 CDr00r00         [24]  837 	call	_set_bkg_tiles
      00032A E8 06            [16]  838 	add	sp, #6
                           00032C   839 	C$map.c$104$5_0$260	= .
                                    840 	.globl	C$map.c$104$5_0$260
                                    841 ;src/map.c:104: VBK_REG = 1;
      00032C 3E 01            [ 8]  842 	ld	a, #0x01
      00032E E0r00            [12]  843 	ldh	(_VBK_REG + 0), a
                           000330   844 	C$map.c$105$5_0$260	= .
                                    845 	.globl	C$map.c$105$5_0$260
                                    846 ;src/map.c:105: set_bkg_tiles(2 * x, 2 * y, 2, 1, palette_array);
      000330 21 04 00         [12]  847 	ld	hl, #4
      000333 39               [ 8]  848 	add	hl, sp
      000334 E5               [16]  849 	push	hl
      000335 21 02 01         [12]  850 	ld	hl, #0x102
      000338 E5               [16]  851 	push	hl
      000339 F8 0E            [12]  852 	ldhl	sp,	#14
      00033B 7E               [ 8]  853 	ld	a, (hl)
      00033C F5               [16]  854 	push	af
      00033D 33               [ 8]  855 	inc	sp
      00033E C5               [16]  856 	push	bc
      00033F 33               [ 8]  857 	inc	sp
      000340 CDr00r00         [24]  858 	call	_set_bkg_tiles
      000343 E8 06            [16]  859 	add	sp, #6
                           000345   860 	C$map.c$106$5_0$260	= .
                                    861 	.globl	C$map.c$106$5_0$260
                                    862 ;src/map.c:106: set_bkg_tiles(2 * x, 2 * y + 1, 2, 1, palette_array + 2);
      000345 21 06 00         [12]  863 	ld	hl, #6
      000348 39               [ 8]  864 	add	hl, sp
      000349 E5               [16]  865 	push	hl
      00034A 21 02 01         [12]  866 	ld	hl, #0x102
      00034D E5               [16]  867 	push	hl
      00034E 79               [ 4]  868 	ld	a, c
      00034F F5               [16]  869 	push	af
      000350 33               [ 8]  870 	inc	sp
      000351 C5               [16]  871 	push	bc
      000352 33               [ 8]  872 	inc	sp
      000353 CDr00r00         [24]  873 	call	_set_bkg_tiles
      000356 E8 06            [16]  874 	add	sp, #6
                           000358   875 	C$map.c$109$5_0$260	= .
                                    876 	.globl	C$map.c$109$5_0$260
                                    877 ;src/map.c:109: VBK_REG = 0;
      000358 AF               [ 4]  878 	xor	a, a
      000359 E0r00            [12]  879 	ldh	(_VBK_REG + 0), a
                           00035B   880 	C$map.c$75$4_0$259	= .
                                    881 	.globl	C$map.c$75$4_0$259
                                    882 ;src/map.c:75: for (uint8_t x = x1; x < x1 + c; x++) {
      00035B F8 15            [12]  883 	ldhl	sp,	#21
      00035D 34               [12]  884 	inc	(hl)
      00035E C3rE0r00         [16]  885 	jp	00131$
      000361                        886 00135$:
                           000361   887 	C$map.c$74$2_0$257	= .
                                    888 	.globl	C$map.c$74$2_0$257
                                    889 ;src/map.c:74: for (uint8_t y = y1; y < y1 + r; y++) {
      000361 F8 14            [12]  890 	ldhl	sp,	#20
      000363 34               [12]  891 	inc	(hl)
      000364 C3rA6r00         [16]  892 	jp	00134$
      000367                        893 00136$:
                           000367   894 	C$map.c$112$2_0$257	= .
                                    895 	.globl	C$map.c$112$2_0$257
                                    896 ;src/map.c:112: }
      000367 E8 18            [16]  897 	add	sp, #24
      000369 E1               [12]  898 	pop	hl
      00036A E8 03            [16]  899 	add	sp, #3
      00036C E9               [ 4]  900 	jp	(hl)
                           00036D   901 	G$spawn_bkg_row$0$0	= .
                                    902 	.globl	G$spawn_bkg_row$0$0
                           00036D   903 	C$map.c$115$2_0$271	= .
                                    904 	.globl	C$map.c$115$2_0$271
                                    905 ;src/map.c:115: void spawn_bkg_row(void) {
                                    906 ;	---------------------------------
                                    907 ; Function spawn_bkg_row
                                    908 ; ---------------------------------
      00036D                        909 _spawn_bkg_row::
                           00036D   910 	C$map.c$116$1_0$271	= .
                                    911 	.globl	C$map.c$116$1_0$271
                                    912 ;src/map.c:116: if (depth > 3) {
      00036D 3E 03            [ 8]  913 	ld	a, #0x03
      00036F 21r00r00         [12]  914 	ld	hl, #_depth
      000372 96               [ 8]  915 	sub	a, (hl)
      000373 D0               [20]  916 	ret	NC
                           000374   917 	C$map.c$117$2_0$272	= .
                                    918 	.globl	C$map.c$117$2_0$272
                                    919 ;src/map.c:117: if (depth - depth_offset == (8 - THRESHOLD - BOTTOM)) set_4bkg_tiles(level_array, 0, depth + 4, 1, 16);
      000374 7E               [ 8]  920 	ld	a, (hl)
      000375 0E 00            [ 8]  921 	ld	c, #0x00
      000377 21r00r00         [12]  922 	ld	hl, #_depth_offset
      00037A 5E               [ 8]  923 	ld	e, (hl)
      00037B 06 00            [ 8]  924 	ld	b, #0x00
      00037D 93               [ 4]  925 	sub	a, e
      00037E 5F               [ 4]  926 	ld	e, a
      00037F 79               [ 4]  927 	ld	a, c
      000380 98               [ 4]  928 	sbc	a, b
      000381 57               [ 4]  929 	ld	d, a
      000382 21r00r00         [12]  930 	ld	hl, #_depth
      000385 4E               [ 8]  931 	ld	c, (hl)
      000386 7B               [ 4]  932 	ld	a, e
      000387 D6 06            [ 8]  933 	sub	a, #0x06
      000389 B2               [ 4]  934 	or	a, d
      00038A 20 13            [12]  935 	jr	NZ, 00104$
      00038C 0C               [ 4]  936 	inc	c
      00038D 0C               [ 4]  937 	inc	c
      00038E 0C               [ 4]  938 	inc	c
      00038F 0C               [ 4]  939 	inc	c
      000390 21 01 10         [12]  940 	ld	hl, #0x1001
      000393 E5               [16]  941 	push	hl
      000394 79               [ 4]  942 	ld	a, c
      000395 F5               [16]  943 	push	af
      000396 33               [ 8]  944 	inc	sp
      000397 AF               [ 4]  945 	xor	a, a
      000398 11r00r00         [12]  946 	ld	de, #_level_array
      00039B CDr96r00         [24]  947 	call	_set_4bkg_tiles
      00039E C9               [16]  948 	ret
      00039F                        949 00104$:
                           00039F   950 	C$map.c$118$2_0$272	= .
                                    951 	.globl	C$map.c$118$2_0$272
                                    952 ;src/map.c:118: else if (depth - depth_offset == THRESHOLD) set_4bkg_tiles(level_array, 0, depth - 4, 1, 16);
      00039F 7B               [ 4]  953 	ld	a, e
      0003A0 D6 02            [ 8]  954 	sub	a, #0x02
      0003A2 B2               [ 4]  955 	or	a, d
      0003A3 C0               [20]  956 	ret	NZ
      0003A4 79               [ 4]  957 	ld	a, c
      0003A5 C6 FC            [ 8]  958 	add	a, #0xfc
      0003A7 47               [ 4]  959 	ld	b, a
      0003A8 21 01 10         [12]  960 	ld	hl, #0x1001
      0003AB E5               [16]  961 	push	hl
      0003AC C5               [16]  962 	push	bc
      0003AD 33               [ 8]  963 	inc	sp
      0003AE AF               [ 4]  964 	xor	a, a
      0003AF 11r00r00         [12]  965 	ld	de, #_level_array
      0003B2 CDr96r00         [24]  966 	call	_set_4bkg_tiles
                           0003B5   967 	C$map.c$120$1_0$271	= .
                                    968 	.globl	C$map.c$120$1_0$271
                                    969 ;src/map.c:120: }
                           0003B5   970 	C$map.c$120$1_0$271	= .
                                    971 	.globl	C$map.c$120$1_0$271
                           0003B5   972 	XG$spawn_bkg_row$0$0	= .
                                    973 	.globl	XG$spawn_bkg_row$0$0
      0003B5 C9               [16]  974 	ret
                           0003B6   975 	G$clear_4bkg_tiles$0$0	= .
                                    976 	.globl	G$clear_4bkg_tiles$0$0
                           0003B6   977 	C$map.c$129$1_0$274	= .
                                    978 	.globl	C$map.c$129$1_0$274
                                    979 ;src/map.c:129: void clear_4bkg_tiles(uint8_t array[][16], uint8_t x, uint8_t y) {
                                    980 ;	---------------------------------
                                    981 ; Function clear_4bkg_tiles
                                    982 ; ---------------------------------
      0003B6                        983 _clear_4bkg_tiles::
      0003B6 4F               [ 4]  984 	ld	c, a
                           0003B7   985 	C$map.c$130$1_0$274	= .
                                    986 	.globl	C$map.c$130$1_0$274
                                    987 ;src/map.c:130: array[y][x] = 0; // Clear the tile in the array
      0003B7 F8 02            [12]  988 	ldhl	sp,	#2
      0003B9 6E               [ 8]  989 	ld	l, (hl)
      0003BA 26 00            [ 8]  990 	ld	h, #0x00
      0003BC 29               [ 8]  991 	add	hl, hl
      0003BD 29               [ 8]  992 	add	hl, hl
      0003BE 29               [ 8]  993 	add	hl, hl
      0003BF 29               [ 8]  994 	add	hl, hl
      0003C0 19               [ 8]  995 	add	hl, de
      0003C1 06 00            [ 8]  996 	ld	b, #0x00
      0003C3 09               [ 8]  997 	add	hl, bc
      0003C4 36 00            [12]  998 	ld	(hl), #0x00
                           0003C6   999 	C$map.c$131$1_0$274	= .
                                   1000 	.globl	C$map.c$131$1_0$274
                                   1001 ;src/map.c:131: set_4bkg_tiles(array, x, y, 1, 1); // Update the background
      0003C6 21 01 01         [12] 1002 	ld	hl, #0x101
      0003C9 E5               [16] 1003 	push	hl
      0003CA F8 04            [12] 1004 	ldhl	sp,	#4
      0003CC 7E               [ 8] 1005 	ld	a, (hl)
      0003CD F5               [16] 1006 	push	af
      0003CE 33               [ 8] 1007 	inc	sp
      0003CF 79               [ 4] 1008 	ld	a, c
      0003D0 CDr96r00         [24] 1009 	call	_set_4bkg_tiles
                           0003D3  1010 	C$map.c$132$1_0$274	= .
                                   1011 	.globl	C$map.c$132$1_0$274
                                   1012 ;src/map.c:132: }
      0003D3 E1               [12] 1013 	pop	hl
      0003D4 33               [ 8] 1014 	inc	sp
      0003D5 E9               [ 4] 1015 	jp	(hl)
                           0003D6  1016 	G$add_block$0$0	= .
                                   1017 	.globl	G$add_block$0$0
                           0003D6  1018 	C$map.c$144$1_0$276	= .
                                   1019 	.globl	C$map.c$144$1_0$276
                                   1020 ;src/map.c:144: void add_block(uint8_t array[][16], uint8_t x, uint8_t y, uint8_t type) {
                                   1021 ;	---------------------------------
                                   1022 ; Function add_block
                                   1023 ; ---------------------------------
      0003D6                       1024 _add_block::
      0003D6 4F               [ 4] 1025 	ld	c, a
                           0003D7  1026 	C$map.c$145$1_0$276	= .
                                   1027 	.globl	C$map.c$145$1_0$276
                                   1028 ;src/map.c:145: array[y][x] = type;
      0003D7 F8 02            [12] 1029 	ldhl	sp,	#2
      0003D9 6E               [ 8] 1030 	ld	l, (hl)
      0003DA 26 00            [ 8] 1031 	ld	h, #0x00
      0003DC 29               [ 8] 1032 	add	hl, hl
      0003DD 29               [ 8] 1033 	add	hl, hl
      0003DE 29               [ 8] 1034 	add	hl, hl
      0003DF 29               [ 8] 1035 	add	hl, hl
      0003E0 19               [ 8] 1036 	add	hl, de
      0003E1 54               [ 4] 1037 	ld	d, h
      0003E2 7D               [ 4] 1038 	ld	a, l
      0003E3 81               [ 4] 1039 	add	a, c
      0003E4 5F               [ 4] 1040 	ld	e, a
      0003E5 30 01            [12] 1041 	jr	NC, 00103$
      0003E7 14               [ 4] 1042 	inc	d
      0003E8                       1043 00103$:
      0003E8 F8 03            [12] 1044 	ldhl	sp,	#3
                           0003EA  1045 	C$map.c$146$1_0$276	= .
                                   1046 	.globl	C$map.c$146$1_0$276
                                   1047 ;src/map.c:146: set_4bkg_tiles(level_array, x, y, 1, 1);
      0003EA 3A               [ 8] 1048 	ld	a, (hl-)
      0003EB 12               [ 8] 1049 	ld	(de), a
      0003EC 11 01 01         [12] 1050 	ld	de, #0x101
      0003EF D5               [16] 1051 	push	de
      0003F0 7E               [ 8] 1052 	ld	a, (hl)
      0003F1 F5               [16] 1053 	push	af
      0003F2 33               [ 8] 1054 	inc	sp
      0003F3 79               [ 4] 1055 	ld	a, c
      0003F4 11r00r00         [12] 1056 	ld	de, #_level_array
      0003F7 CDr96r00         [24] 1057 	call	_set_4bkg_tiles
                           0003FA  1058 	C$map.c$147$1_0$276	= .
                                   1059 	.globl	C$map.c$147$1_0$276
                                   1060 ;src/map.c:147: }
      0003FA E1               [12] 1061 	pop	hl
      0003FB F1               [12] 1062 	pop	af
      0003FC E9               [ 4] 1063 	jp	(hl)
                           0003FD  1064 	G$progressbar$0$0	= .
                                   1065 	.globl	G$progressbar$0$0
                           0003FD  1066 	C$map.c$159$1_0$279	= .
                                   1067 	.globl	C$map.c$159$1_0$279
                                   1068 ;src/map.c:159: void progressbar(int16_t current_value, int16_t max_value, uint8_t digits, uint8_t tilestart, uint8_t x, uint8_t y) {
                                   1069 ;	---------------------------------
                                   1070 ; Function progressbar
                                   1071 ; ---------------------------------
      0003FD                       1072 _progressbar::
      0003FD E8 F8            [16] 1073 	add	sp, #-8
      0003FF F8 05            [12] 1074 	ldhl	sp,	#5
      000401 79               [ 4] 1075 	ld	a, c
      000402 22               [ 8] 1076 	ld	(hl+), a
      000403 70               [ 8] 1077 	ld	(hl), b
                           000404  1078 	C$map.c$161$1_0$278	= .
                                   1079 	.globl	C$map.c$161$1_0$278
                                   1080 ;src/map.c:161: uint8_t total_pixels = digits * 8;
      000404 F8 0A            [12] 1081 	ldhl	sp,	#10
      000406 7E               [ 8] 1082 	ld	a, (hl)
      000407 F8 00            [12] 1083 	ldhl	sp,	#0
      000409 77               [ 8] 1084 	ld	(hl), a
      00040A 7E               [ 8] 1085 	ld	a, (hl)
      00040B 87               [ 4] 1086 	add	a, a
      00040C 87               [ 4] 1087 	add	a, a
      00040D 87               [ 4] 1088 	add	a, a
                           00040E  1089 	C$map.c$162$1_0$278	= .
                                   1090 	.globl	C$map.c$162$1_0$278
                                   1091 ;src/map.c:162: uint16_t pixels_to_fill = (current_value * total_pixels) / max_value;
      00040E 4F               [ 4] 1092 	ld	c, a
      00040F 06 00            [ 8] 1093 	ld	b, #0x00
      000411 CDr00r00         [24] 1094 	call	__mulint
      000414 59               [ 4] 1095 	ld	e, c
      000415 50               [ 4] 1096 	ld	d, b
      000416 F8 05            [12] 1097 	ldhl	sp,	#5
      000418 2A               [ 8] 1098 	ld	a, (hl+)
      000419 4F               [ 4] 1099 	ld	c, a
      00041A 46               [ 8] 1100 	ld	b, (hl)
      00041B CDr00r00         [24] 1101 	call	__divsint
                           00041E  1102 	C$map.c$164$5_0$282	= .
                                   1103 	.globl	C$map.c$164$5_0$282
                                   1104 ;src/map.c:164: for (uint8_t i = 0; i < digits; i++) {
      00041E F8 00            [12] 1105 	ldhl	sp,	#0
      000420 7E               [ 8] 1106 	ld	a, (hl)
      000421 3D               [ 4] 1107 	dec	a
      000422 3E 01            [ 8] 1108 	ld	a, #0x01
      000424 28 01            [12] 1109 	jr	Z, 00185$
      000426 AF               [ 4] 1110 	xor	a, a
      000427                       1111 00185$:
      000427 F8 01            [12] 1112 	ldhl	sp,	#1
      000429 77               [ 8] 1113 	ld	(hl), a
      00042A F8 0D            [12] 1114 	ldhl	sp,	#13
      00042C 7E               [ 8] 1115 	ld	a, (hl)
      00042D F8 02            [12] 1116 	ldhl	sp,	#2
      00042F 77               [ 8] 1117 	ld	(hl), a
      000430 F8 07            [12] 1118 	ldhl	sp,	#7
      000432 36 00            [12] 1119 	ld	(hl), #0x00
      000434                       1120 00122$:
      000434 F8 07            [12] 1121 	ldhl	sp,	#7
      000436 7E               [ 8] 1122 	ld	a, (hl)
      000437 F8 00            [12] 1123 	ldhl	sp,	#0
      000439 96               [ 8] 1124 	sub	a, (hl)
      00043A D2r19r05         [16] 1125 	jp	NC, 00124$
                           00043D  1126 	C$map.c$165$4_0$280	= .
                                   1127 	.globl	C$map.c$165$4_0$280
                                   1128 ;src/map.c:165: uint8_t tile_index = SPRITE_TILE_EMPTY; // Default to empty
      00043D 1E 00            [ 8] 1129 	ld	e, #0x00
                           00043F  1130 	C$map.c$167$3_0$280	= .
                                   1131 	.globl	C$map.c$167$3_0$280
                                   1132 ;src/map.c:167: uint8_t effective_pixels = (pixels_to_fill > sprite_pixels) ? sprite_pixels : pixels_to_fill;
      00043F 3E 08            [ 8] 1133 	ld	a, #0x08
      000441 B9               [ 4] 1134 	cp	a, c
      000442 3E 00            [ 8] 1135 	ld	a, #0x00
      000444 98               [ 4] 1136 	sbc	a, b
      000445 30 04            [12] 1137 	jr	NC, 00126$
      000447 16 08            [ 8] 1138 	ld	d, #0x08
      000449 18 01            [12] 1139 	jr	00127$
      00044B                       1140 00126$:
      00044B 51               [ 4] 1141 	ld	d, c
      00044C                       1142 00127$:
                           00044C  1143 	C$map.c$170$3_0$280	= .
                                   1144 	.globl	C$map.c$170$3_0$280
                                   1145 ;src/map.c:170: pixels_to_fill -= effective_pixels;
      00044C 6A               [ 4] 1146 	ld	l, d
                                   1147 ;	spillPairReg hl
                                   1148 ;	spillPairReg hl
      00044D 26 00            [ 8] 1149 	ld	h, #0x00
                                   1150 ;	spillPairReg hl
                                   1151 ;	spillPairReg hl
      00044F 79               [ 4] 1152 	ld	a, c
      000450 95               [ 4] 1153 	sub	a, l
      000451 4F               [ 4] 1154 	ld	c, a
      000452 78               [ 4] 1155 	ld	a, b
      000453 9C               [ 4] 1156 	sbc	a, h
      000454 47               [ 4] 1157 	ld	b, a
                           000455  1158 	C$map.c$173$3_0$280	= .
                                   1159 	.globl	C$map.c$173$3_0$280
                                   1160 ;src/map.c:173: switch (effective_pixels) {
      000455 3E 08            [ 8] 1161 	ld	a, #0x08
      000457 92               [ 4] 1162 	sub	a, d
      000458 DArDBr04         [16] 1163 	jp	C, 00117$
      00045B 5A               [ 4] 1164 	ld	e, d
      00045C 16 00            [ 8] 1165 	ld	d, #0x00
      00045E 21r65r04         [12] 1166 	ld	hl, #00186$
      000461 19               [ 8] 1167 	add	hl, de
      000462 19               [ 8] 1168 	add	hl, de
      000463 19               [ 8] 1169 	add	hl, de
      000464 E9               [ 4] 1170 	jp	(hl)
      000465                       1171 00186$:
      000465 C3r80r04         [16] 1172 	jp	00101$
      000468 C3r84r04         [16] 1173 	jp	00102$
      00046B C3r88r04         [16] 1174 	jp	00103$
      00046E C3r8Cr04         [16] 1175 	jp	00104$
      000471 C3r90r04         [16] 1176 	jp	00105$
      000474 C3r94r04         [16] 1177 	jp	00106$
      000477 C3r98r04         [16] 1178 	jp	00107$
      00047A C3r9Cr04         [16] 1179 	jp	00108$
      00047D C3rA0r04         [16] 1180 	jp	00109$
                           000480  1181 	C$map.c$174$4_0$281	= .
                                   1182 	.globl	C$map.c$174$4_0$281
                                   1183 ;src/map.c:174: case 0: tile_index = SPRITE_TILE_EMPTY; break;
      000480                       1184 00101$:
      000480 1E 00            [ 8] 1185 	ld	e, #0x00
      000482 18 57            [12] 1186 	jr	00117$
                           000484  1187 	C$map.c$175$4_0$281	= .
                                   1188 	.globl	C$map.c$175$4_0$281
                                   1189 ;src/map.c:175: case 1: tile_index = SPRITE_TILE_1_8; break;
      000484                       1190 00102$:
      000484 1E 20            [ 8] 1191 	ld	e, #0x20
      000486 18 53            [12] 1192 	jr	00117$
                           000488  1193 	C$map.c$176$4_0$281	= .
                                   1194 	.globl	C$map.c$176$4_0$281
                                   1195 ;src/map.c:176: case 2: tile_index = SPRITE_TILE_2_8; break;
      000488                       1196 00103$:
      000488 1E 21            [ 8] 1197 	ld	e, #0x21
      00048A 18 4F            [12] 1198 	jr	00117$
                           00048C  1199 	C$map.c$177$4_0$281	= .
                                   1200 	.globl	C$map.c$177$4_0$281
                                   1201 ;src/map.c:177: case 3: tile_index = SPRITE_TILE_3_8; break;
      00048C                       1202 00104$:
      00048C 1E 22            [ 8] 1203 	ld	e, #0x22
      00048E 18 4B            [12] 1204 	jr	00117$
                           000490  1205 	C$map.c$178$4_0$281	= .
                                   1206 	.globl	C$map.c$178$4_0$281
                                   1207 ;src/map.c:178: case 4: tile_index = SPRITE_TILE_4_8; break;
      000490                       1208 00105$:
      000490 1E 23            [ 8] 1209 	ld	e, #0x23
      000492 18 47            [12] 1210 	jr	00117$
                           000494  1211 	C$map.c$179$4_0$281	= .
                                   1212 	.globl	C$map.c$179$4_0$281
                                   1213 ;src/map.c:179: case 5: tile_index = SPRITE_TILE_5_8; break;
      000494                       1214 00106$:
      000494 1E 24            [ 8] 1215 	ld	e, #0x24
      000496 18 43            [12] 1216 	jr	00117$
                           000498  1217 	C$map.c$180$4_0$281	= .
                                   1218 	.globl	C$map.c$180$4_0$281
                                   1219 ;src/map.c:180: case 6: tile_index = SPRITE_TILE_6_8; break;
      000498                       1220 00107$:
      000498 1E 25            [ 8] 1221 	ld	e, #0x25
      00049A 18 3F            [12] 1222 	jr	00117$
                           00049C  1223 	C$map.c$181$4_0$281	= .
                                   1224 	.globl	C$map.c$181$4_0$281
                                   1225 ;src/map.c:181: case 7: tile_index = SPRITE_TILE_7_8; break;
      00049C                       1226 00108$:
      00049C 1E 26            [ 8] 1227 	ld	e, #0x26
      00049E 18 3B            [12] 1228 	jr	00117$
                           0004A0  1229 	C$map.c$182$4_0$281	= .
                                   1230 	.globl	C$map.c$182$4_0$281
                                   1231 ;src/map.c:182: case 8: 
      0004A0                       1232 00109$:
                           0004A0  1233 	C$map.c$183$4_0$281	= .
                                   1234 	.globl	C$map.c$183$4_0$281
                                   1235 ;src/map.c:183: if (i == 0) { // First sprite
      0004A0 F8 07            [12] 1236 	ldhl	sp,	#7
      0004A2 7E               [ 8] 1237 	ld	a, (hl)
      0004A3 B7               [ 4] 1238 	or	a, a
      0004A4 20 14            [12] 1239 	jr	NZ, 00115$
                           0004A6  1240 	C$map.c$184$5_0$282	= .
                                   1241 	.globl	C$map.c$184$5_0$282
                                   1242 ;src/map.c:184: tile_index = (digits == 1 || pixels_to_fill == 0) ? SPRITE_TILE_END : SPRITE_TILE_MID;
      0004A6 F8 01            [12] 1243 	ldhl	sp,	#1
      0004A8 CB 46            [12] 1244 	bit	0, (hl)
      0004AA 20 04            [12] 1245 	jr	NZ, 00131$
      0004AC 78               [ 4] 1246 	ld	a, b
      0004AD B1               [ 4] 1247 	or	a, c
      0004AE 20 05            [12] 1248 	jr	NZ, 00128$
      0004B0                       1249 00131$:
      0004B0 11 27 00         [12] 1250 	ld	de, #0x0027
      0004B3 18 26            [12] 1251 	jr	00117$
      0004B5                       1252 00128$:
      0004B5 11 28 00         [12] 1253 	ld	de, #0x0028
      0004B8 18 21            [12] 1254 	jr	00117$
      0004BA                       1255 00115$:
                           0004BA  1256 	C$map.c$185$4_0$281	= .
                                   1257 	.globl	C$map.c$185$4_0$281
                                   1258 ;src/map.c:185: } else if (i == digits - 1 || pixels_to_fill == 0) { // Last sprite or no more pixels to fill
      0004BA F8 00            [12] 1259 	ldhl	sp,	#0
      0004BC 5E               [ 8] 1260 	ld	e, (hl)
      0004BD 16 00            [ 8] 1261 	ld	d, #0x00
      0004BF 1B               [ 8] 1262 	dec	de
      0004C0 F8 07            [12] 1263 	ldhl	sp,	#7
      0004C2 7E               [ 8] 1264 	ld	a, (hl)
      0004C3 F8 03            [12] 1265 	ldhl	sp,	#3
      0004C5 22               [ 8] 1266 	ld	(hl+), a
      0004C6 AF               [ 4] 1267 	xor	a, a
      0004C7 32               [ 8] 1268 	ld	(hl-), a
      0004C8 7E               [ 8] 1269 	ld	a, (hl)
      0004C9 93               [ 4] 1270 	sub	a, e
      0004CA 20 05            [12] 1271 	jr	NZ, 00187$
      0004CC 23               [ 8] 1272 	inc	hl
      0004CD 7E               [ 8] 1273 	ld	a, (hl)
      0004CE 92               [ 4] 1274 	sub	a, d
      0004CF 28 04            [12] 1275 	jr	Z, 00110$
      0004D1                       1276 00187$:
      0004D1 78               [ 4] 1277 	ld	a, b
      0004D2 B1               [ 4] 1278 	or	a, c
      0004D3 20 04            [12] 1279 	jr	NZ, 00111$
      0004D5                       1280 00110$:
                           0004D5  1281 	C$map.c$186$5_0$283	= .
                                   1282 	.globl	C$map.c$186$5_0$283
                                   1283 ;src/map.c:186: tile_index = SPRITE_TILE_END;
      0004D5 1E 27            [ 8] 1284 	ld	e, #0x27
      0004D7 18 02            [12] 1285 	jr	00117$
      0004D9                       1286 00111$:
                           0004D9  1287 	C$map.c$188$5_0$284	= .
                                   1288 	.globl	C$map.c$188$5_0$284
                                   1289 ;src/map.c:188: tile_index = SPRITE_TILE_MID;
      0004D9 1E 28            [ 8] 1290 	ld	e, #0x28
                           0004DB  1291 	C$map.c$191$3_0$280	= .
                                   1292 	.globl	C$map.c$191$3_0$280
                                   1293 ;src/map.c:191: }
      0004DB                       1294 00117$:
                                   1295 ;src/map.c:194: set_sprite_tile(tilestart + i, tile_index);
      0004DB F8 0B            [12] 1296 	ldhl	sp,	#11
      0004DD 7E               [ 8] 1297 	ld	a, (hl)
      0004DE F8 07            [12] 1298 	ldhl	sp,	#7
      0004E0 86               [ 8] 1299 	add	a, (hl)
      0004E1 F8 03            [12] 1300 	ldhl	sp,	#3
      0004E3 77               [ 8] 1301 	ld	(hl), a
      0004E4 56               [ 8] 1302 	ld	d, (hl)
                                   1303 ;/usr/local/opt/gbdk/include/gb/gb.h:1804: shadow_OAM[nb].tile=tile;
      0004E5 26 00            [ 8] 1304 	ld	h, #0x00
                                   1305 ;	spillPairReg hl
                                   1306 ;	spillPairReg hl
      0004E7 6A               [ 4] 1307 	ld	l, d
      0004E8 29               [ 8] 1308 	add	hl, hl
      0004E9 29               [ 8] 1309 	add	hl, hl
      0004EA D5               [16] 1310 	push	de
      0004EB 11r00r00         [12] 1311 	ld	de, #_shadow_OAM
      0004EE 19               [ 8] 1312 	add	hl, de
      0004EF 23               [ 8] 1313 	inc	hl
      0004F0 23               [ 8] 1314 	inc	hl
      0004F1 D1               [12] 1315 	pop	de
      0004F2 73               [ 8] 1316 	ld	(hl), e
                                   1317 ;src/map.c:195: move_sprite(tilestart + i, x + i * 8, y);
      0004F3 F8 07            [12] 1318 	ldhl	sp,	#7
      0004F5 7E               [ 8] 1319 	ld	a, (hl)
      0004F6 87               [ 4] 1320 	add	a, a
      0004F7 87               [ 4] 1321 	add	a, a
      0004F8 87               [ 4] 1322 	add	a, a
      0004F9 F8 0C            [12] 1323 	ldhl	sp,	#12
      0004FB 5E               [ 8] 1324 	ld	e, (hl)
      0004FC 83               [ 4] 1325 	add	a, e
      0004FD F8 04            [12] 1326 	ldhl	sp,	#4
                                   1327 ;/usr/local/opt/gbdk/include/gb/gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      0004FF 32               [ 8] 1328 	ld	(hl-), a
      000500 6E               [ 8] 1329 	ld	l, (hl)
      000501 26 00            [ 8] 1330 	ld	h, #0x00
      000503 29               [ 8] 1331 	add	hl, hl
      000504 29               [ 8] 1332 	add	hl, hl
      000505 11r00r00         [12] 1333 	ld	de, #_shadow_OAM
      000508 19               [ 8] 1334 	add	hl, de
      000509 5D               [ 4] 1335 	ld	e, l
      00050A 54               [ 4] 1336 	ld	d, h
                                   1337 ;/usr/local/opt/gbdk/include/gb/gb.h:1878: itm->y=y, itm->x=x;
      00050B F8 02            [12] 1338 	ldhl	sp,	#2
      00050D 2A               [ 8] 1339 	ld	a, (hl+)
      00050E 23               [ 8] 1340 	inc	hl
      00050F 12               [ 8] 1341 	ld	(de), a
      000510 13               [ 8] 1342 	inc	de
      000511 7E               [ 8] 1343 	ld	a, (hl)
      000512 12               [ 8] 1344 	ld	(de), a
                           000513  1345 	C$map.c$164$2_0$279	= .
                                   1346 	.globl	C$map.c$164$2_0$279
                                   1347 ;src/map.c:164: for (uint8_t i = 0; i < digits; i++) {
      000513 F8 07            [12] 1348 	ldhl	sp,	#7
      000515 34               [12] 1349 	inc	(hl)
      000516 C3r34r04         [16] 1350 	jp	00122$
      000519                       1351 00124$:
                           000519  1352 	C$map.c$197$2_0$279	= .
                                   1353 	.globl	C$map.c$197$2_0$279
                                   1354 ;src/map.c:197: }
      000519 E8 08            [16] 1355 	add	sp, #8
      00051B E1               [12] 1356 	pop	hl
      00051C E8 04            [16] 1357 	add	sp, #4
      00051E E9               [ 4] 1358 	jp	(hl)
                           00051F  1359 	G$draw_depth$0$0	= .
                                   1360 	.globl	G$draw_depth$0$0
                           00051F  1361 	C$map.c$199$2_0$292	= .
                                   1362 	.globl	C$map.c$199$2_0$292
                                   1363 ;src/map.c:199: void draw_depth(void){
                                   1364 ;	---------------------------------
                                   1365 ; Function draw_depth
                                   1366 ; ---------------------------------
      00051F                       1367 _draw_depth::
      00051F E8 F6            [16] 1368 	add	sp, #-10
                           000521  1369 	C$map.c$201$1_0$292	= .
                                   1370 	.globl	C$map.c$201$1_0$292
                                   1371 ;src/map.c:201: itoa((depth <= EARTH_START) ? 0 : (depth - EARTH_START), string, 10);
      000521 21 00 00         [12] 1372 	ld	hl, #0
      000524 39               [ 8] 1373 	add	hl, sp
      000525 5D               [ 4] 1374 	ld	e, l
      000526 54               [ 4] 1375 	ld	d, h
      000527 3E 05            [ 8] 1376 	ld	a, #0x05
      000529 21r00r00         [12] 1377 	ld	hl, #_depth
      00052C 96               [ 8] 1378 	sub	a, (hl)
      00052D 38 05            [12] 1379 	jr	C, 00103$
      00052F 01 00 00         [12] 1380 	ld	bc, #0x0000
      000532 18 0C            [12] 1381 	jr	00104$
      000534                       1382 00103$:
      000534 FAr00r00         [16] 1383 	ld	a, (#_depth)
      000537 06 00            [ 8] 1384 	ld	b, #0x00
      000539 C6 FB            [ 8] 1385 	add	a, #0xfb
      00053B 4F               [ 4] 1386 	ld	c, a
      00053C 78               [ 4] 1387 	ld	a, b
      00053D CE FF            [ 8] 1388 	adc	a, #0xff
      00053F 47               [ 4] 1389 	ld	b, a
      000540                       1390 00104$:
      000540 3E 0A            [ 8] 1391 	ld	a, #0x0a
      000542 F5               [16] 1392 	push	af
      000543 33               [ 8] 1393 	inc	sp
      000544 D5               [16] 1394 	push	de
      000545 C5               [16] 1395 	push	bc
      000546 CDr00r00         [24] 1396 	call	_itoa
      000549 E8 05            [16] 1397 	add	sp, #5
                           00054B  1398 	C$map.c$202$1_0$292	= .
                                   1399 	.globl	C$map.c$202$1_0$292
                                   1400 ;src/map.c:202: strcat(string, "m");
      00054B 01r82r05         [12] 1401 	ld	bc, #___str_0
      00054E 21 00 00         [12] 1402 	ld	hl, #0
      000551 39               [ 8] 1403 	add	hl, sp
      000552 5D               [ 4] 1404 	ld	e, l
      000553 54               [ 4] 1405 	ld	d, h
      000554 CDr00r00         [24] 1406 	call	_strcat
                           000557  1407 	C$map.c$203$1_0$292	= .
                                   1408 	.globl	C$map.c$203$1_0$292
                                   1409 ;src/map.c:203: draw_text(15,0,"Depth",5,TRUE,0);
      000557 AF               [ 4] 1410 	xor	a, a
      000558 67               [ 4] 1411 	ld	h, a
      000559 2E 01            [ 8] 1412 	ld	l, #0x01
      00055B E5               [16] 1413 	push	hl
      00055C 3E 05            [ 8] 1414 	ld	a, #0x05
      00055E F5               [16] 1415 	push	af
      00055F 33               [ 8] 1416 	inc	sp
      000560 11r84r05         [12] 1417 	ld	de, #___str_1
      000563 D5               [16] 1418 	push	de
      000564 1E 00            [ 8] 1419 	ld	e, #0x00
      000566 3E 0F            [ 8] 1420 	ld	a, #0x0f
      000568 CDr00r00         [24] 1421 	call	_draw_text
                           00056B  1422 	C$map.c$204$1_0$292	= .
                                   1423 	.globl	C$map.c$204$1_0$292
                                   1424 ;src/map.c:204: draw_text(15,1,string,5,FALSE,0);
      00056B 21 00 00         [12] 1425 	ld	hl, #0
      00056E 39               [ 8] 1426 	add	hl, sp
      00056F AF               [ 4] 1427 	xor	a, a
      000570 0F               [ 4] 1428 	rrca
      000571 F5               [16] 1429 	push	af
      000572 AF               [ 4] 1430 	xor	a, a
      000573 3E 05            [ 8] 1431 	ld	a, #0x05
      000575 F5               [16] 1432 	push	af
      000576 33               [ 8] 1433 	inc	sp
      000577 E5               [16] 1434 	push	hl
      000578 1E 01            [ 8] 1435 	ld	e, #0x01
      00057A 3E 0F            [ 8] 1436 	ld	a, #0x0f
      00057C CDr00r00         [24] 1437 	call	_draw_text
                           00057F  1438 	C$map.c$205$1_0$292	= .
                                   1439 	.globl	C$map.c$205$1_0$292
                                   1440 ;src/map.c:205: }
      00057F E8 0A            [16] 1441 	add	sp, #10
                           000581  1442 	C$map.c$205$1_0$292	= .
                                   1443 	.globl	C$map.c$205$1_0$292
                           000581  1444 	XG$draw_depth$0$0	= .
                                   1445 	.globl	XG$draw_depth$0$0
      000581 C9               [16] 1446 	ret
                           000582  1447 Fmap$__str_0$0_0$0 == .
      000582                       1448 ___str_0:
      000582 6D                    1449 	.ascii "m"
      000583 00                    1450 	.db 0x00
                           000584  1451 Fmap$__str_1$0_0$0 == .
      000584                       1452 ___str_1:
      000584 44 65 70 74 68        1453 	.ascii "Depth"
      000589 00                    1454 	.db 0x00
                           00058A  1455 	G$draw_cargo$0$0	= .
                                   1456 	.globl	G$draw_cargo$0$0
                           00058A  1457 	C$map.c$207$1_0$294	= .
                                   1458 	.globl	C$map.c$207$1_0$294
                                   1459 ;src/map.c:207: void draw_cargo(void){
                                   1460 ;	---------------------------------
                                   1461 ; Function draw_cargo
                                   1462 ; ---------------------------------
      00058A                       1463 _draw_cargo::
      00058A E8 EC            [16] 1464 	add	sp, #-20
                           00058C  1465 	C$map.c$210$1_0$294	= .
                                   1466 	.globl	C$map.c$210$1_0$294
                                   1467 ;src/map.c:210: itoa(player.cargo.current_value, string, 10);
      00058C 21rBBr00         [12] 1468 	ld	hl, #_player + 187
      00058F 2A               [ 8] 1469 	ld	a, (hl+)
      000590 4F               [ 4] 1470 	ld	c, a
      000591 46               [ 8] 1471 	ld	b, (hl)
      000592 3E 0A            [ 8] 1472 	ld	a, #0x0a
      000594 F5               [16] 1473 	push	af
      000595 33               [ 8] 1474 	inc	sp
      000596 21 01 00         [12] 1475 	ld	hl, #1
      000599 39               [ 8] 1476 	add	hl, sp
      00059A E5               [16] 1477 	push	hl
      00059B C5               [16] 1478 	push	bc
      00059C CDr00r00         [24] 1479 	call	_itoa
      00059F E8 05            [16] 1480 	add	sp, #5
                           0005A1  1481 	C$map.c$211$1_0$294	= .
                                   1482 	.globl	C$map.c$211$1_0$294
                                   1483 ;src/map.c:211: itoa(player.cargo.max_value, string_max, 10);
      0005A1 21rBDr00         [12] 1484 	ld	hl, #_player + 189
      0005A4 2A               [ 8] 1485 	ld	a, (hl+)
      0005A5 4F               [ 4] 1486 	ld	c, a
      0005A6 46               [ 8] 1487 	ld	b, (hl)
      0005A7 3E 0A            [ 8] 1488 	ld	a, #0x0a
      0005A9 F5               [16] 1489 	push	af
      0005AA 33               [ 8] 1490 	inc	sp
      0005AB 21 0B 00         [12] 1491 	ld	hl, #11
      0005AE 39               [ 8] 1492 	add	hl, sp
      0005AF E5               [16] 1493 	push	hl
      0005B0 C5               [16] 1494 	push	bc
      0005B1 CDr00r00         [24] 1495 	call	_itoa
      0005B4 E8 05            [16] 1496 	add	sp, #5
                           0005B6  1497 	C$map.c$212$1_0$294	= .
                                   1498 	.globl	C$map.c$212$1_0$294
                                   1499 ;src/map.c:212: strcat(string, "/");
      0005B6 01rFDr05         [12] 1500 	ld	bc, #___str_2
      0005B9 21 00 00         [12] 1501 	ld	hl, #0
      0005BC 39               [ 8] 1502 	add	hl, sp
      0005BD 5D               [ 4] 1503 	ld	e, l
      0005BE 54               [ 4] 1504 	ld	d, h
      0005BF CDr00r00         [24] 1505 	call	_strcat
                           0005C2  1506 	C$map.c$213$1_0$294	= .
                                   1507 	.globl	C$map.c$213$1_0$294
                                   1508 ;src/map.c:213: strcat(string, string_max);
      0005C2 21 0A 00         [12] 1509 	ld	hl, #10
      0005C5 39               [ 8] 1510 	add	hl, sp
      0005C6 4D               [ 4] 1511 	ld	c, l
      0005C7 44               [ 4] 1512 	ld	b, h
      0005C8 21 00 00         [12] 1513 	ld	hl, #0
      0005CB 39               [ 8] 1514 	add	hl, sp
      0005CC 5D               [ 4] 1515 	ld	e, l
      0005CD 54               [ 4] 1516 	ld	d, h
      0005CE CDr00r00         [24] 1517 	call	_strcat
                           0005D1  1518 	C$map.c$214$1_0$294	= .
                                   1519 	.globl	C$map.c$214$1_0$294
                                   1520 ;src/map.c:214: draw_text(9,0,"Cargo",5,TRUE,0);
      0005D1 AF               [ 4] 1521 	xor	a, a
      0005D2 67               [ 4] 1522 	ld	h, a
      0005D3 2E 01            [ 8] 1523 	ld	l, #0x01
      0005D5 E5               [16] 1524 	push	hl
      0005D6 3E 05            [ 8] 1525 	ld	a, #0x05
      0005D8 F5               [16] 1526 	push	af
      0005D9 33               [ 8] 1527 	inc	sp
      0005DA 11rFFr05         [12] 1528 	ld	de, #___str_3
      0005DD D5               [16] 1529 	push	de
      0005DE 1E 00            [ 8] 1530 	ld	e, #0x00
      0005E0 3E 09            [ 8] 1531 	ld	a, #0x09
      0005E2 CDr00r00         [24] 1532 	call	_draw_text
                           0005E5  1533 	C$map.c$215$1_0$294	= .
                                   1534 	.globl	C$map.c$215$1_0$294
                                   1535 ;src/map.c:215: draw_text(9,1,string,5,TRUE,0);
      0005E5 21 00 00         [12] 1536 	ld	hl, #0
      0005E8 39               [ 8] 1537 	add	hl, sp
      0005E9 AF               [ 4] 1538 	xor	a, a
      0005EA 57               [ 4] 1539 	ld	d, a
      0005EB 1E 01            [ 8] 1540 	ld	e, #0x01
      0005ED D5               [16] 1541 	push	de
      0005EE 3E 05            [ 8] 1542 	ld	a, #0x05
      0005F0 F5               [16] 1543 	push	af
      0005F1 33               [ 8] 1544 	inc	sp
      0005F2 E5               [16] 1545 	push	hl
      0005F3 1E 01            [ 8] 1546 	ld	e, #0x01
      0005F5 3E 09            [ 8] 1547 	ld	a, #0x09
      0005F7 CDr00r00         [24] 1548 	call	_draw_text
                           0005FA  1549 	C$map.c$216$1_0$294	= .
                                   1550 	.globl	C$map.c$216$1_0$294
                                   1551 ;src/map.c:216: }
      0005FA E8 14            [16] 1552 	add	sp, #20
                           0005FC  1553 	C$map.c$216$1_0$294	= .
                                   1554 	.globl	C$map.c$216$1_0$294
                           0005FC  1555 	XG$draw_cargo$0$0	= .
                                   1556 	.globl	XG$draw_cargo$0$0
      0005FC C9               [16] 1557 	ret
                           0005FD  1558 Fmap$__str_2$0_0$0 == .
      0005FD                       1559 ___str_2:
      0005FD 2F                    1560 	.ascii "/"
      0005FE 00                    1561 	.db 0x00
                           0005FF  1562 Fmap$__str_3$0_0$0 == .
      0005FF                       1563 ___str_3:
      0005FF 43 61 72 67 6F        1564 	.ascii "Cargo"
      000604 00                    1565 	.db 0x00
                           000605  1566 	G$draw_fuel$0$0	= .
                                   1567 	.globl	G$draw_fuel$0$0
                           000605  1568 	C$map.c$218$1_0$296	= .
                                   1569 	.globl	C$map.c$218$1_0$296
                                   1570 ;src/map.c:218: void draw_fuel(void){
                                   1571 ;	---------------------------------
                                   1572 ; Function draw_fuel
                                   1573 ; ---------------------------------
      000605                       1574 _draw_fuel::
                           000605  1575 	C$map.c$219$1_0$296	= .
                                   1576 	.globl	C$map.c$219$1_0$296
                                   1577 ;src/map.c:219: progressbar(player.fuel.current_value, player.fuel.max_value, 3, 35, 44, 20);
      000605 21r12r00         [12] 1578 	ld	hl, #_player + 18
      000608 2A               [ 8] 1579 	ld	a, (hl+)
      000609 4F               [ 4] 1580 	ld	c, a
      00060A 46               [ 8] 1581 	ld	b, (hl)
      00060B 21r10r00         [12] 1582 	ld	hl, #_player + 16
      00060E 2A               [ 8] 1583 	ld	a,	(hl+)
      00060F 66               [ 8] 1584 	ld	h, (hl)
                                   1585 ;	spillPairReg hl
      000610 6F               [ 4] 1586 	ld	l, a
                                   1587 ;	spillPairReg hl
                                   1588 ;	spillPairReg hl
      000611 11 2C 14         [12] 1589 	ld	de, #0x142c
      000614 D5               [16] 1590 	push	de
      000615 11 03 23         [12] 1591 	ld	de, #0x2303
      000618 D5               [16] 1592 	push	de
      000619 5D               [ 4] 1593 	ld	e, l
      00061A 54               [ 4] 1594 	ld	d, h
      00061B CDrFDr03         [24] 1595 	call	_progressbar
                           00061E  1596 	C$map.c$220$1_0$296	= .
                                   1597 	.globl	C$map.c$220$1_0$296
                                   1598 ;src/map.c:220: }
                           00061E  1599 	C$map.c$220$1_0$296	= .
                                   1600 	.globl	C$map.c$220$1_0$296
                           00061E  1601 	XG$draw_fuel$0$0	= .
                                   1602 	.globl	XG$draw_fuel$0$0
      00061E C9               [16] 1603 	ret
                           00061F  1604 	G$draw_hull$0$0	= .
                                   1605 	.globl	G$draw_hull$0$0
                           00061F  1606 	C$map.c$221$1_0$298	= .
                                   1607 	.globl	C$map.c$221$1_0$298
                                   1608 ;src/map.c:221: void draw_hull(void){
                                   1609 ;	---------------------------------
                                   1610 ; Function draw_hull
                                   1611 ; ---------------------------------
      00061F                       1612 _draw_hull::
                           00061F  1613 	C$map.c$222$1_0$298	= .
                                   1614 	.globl	C$map.c$222$1_0$298
                                   1615 ;src/map.c:222: progressbar(player.hull.current_value, player.hull.max_value, 2, 32, 12, 20);
      00061F 21r4Br00         [12] 1616 	ld	hl, #_player + 75
      000622 2A               [ 8] 1617 	ld	a, (hl+)
      000623 4F               [ 4] 1618 	ld	c, a
      000624 46               [ 8] 1619 	ld	b, (hl)
      000625 21r49r00         [12] 1620 	ld	hl, #_player + 73
      000628 2A               [ 8] 1621 	ld	a,	(hl+)
      000629 66               [ 8] 1622 	ld	h, (hl)
                                   1623 ;	spillPairReg hl
      00062A 6F               [ 4] 1624 	ld	l, a
                                   1625 ;	spillPairReg hl
                                   1626 ;	spillPairReg hl
      00062B 11 0C 14         [12] 1627 	ld	de, #0x140c
      00062E D5               [16] 1628 	push	de
      00062F 11 02 20         [12] 1629 	ld	de, #0x2002
      000632 D5               [16] 1630 	push	de
      000633 5D               [ 4] 1631 	ld	e, l
      000634 54               [ 4] 1632 	ld	d, h
      000635 CDrFDr03         [24] 1633 	call	_progressbar
                           000638  1634 	C$map.c$223$1_0$298	= .
                                   1635 	.globl	C$map.c$223$1_0$298
                                   1636 ;src/map.c:223: }
                           000638  1637 	C$map.c$223$1_0$298	= .
                                   1638 	.globl	C$map.c$223$1_0$298
                           000638  1639 	XG$draw_hull$0$0	= .
                                   1640 	.globl	XG$draw_hull$0$0
      000638 C9               [16] 1641 	ret
                           000639  1642 	G$draw_character$0$0	= .
                                   1643 	.globl	G$draw_character$0$0
                           000639  1644 	C$map.c$226$1_0$300	= .
                                   1645 	.globl	C$map.c$226$1_0$300
                                   1646 ;src/map.c:226: void draw_character(void){
                                   1647 ;	---------------------------------
                                   1648 ; Function draw_character
                                   1649 ; ---------------------------------
      000639                       1650 _draw_character::
                           000639  1651 	C$map.c$227$1_0$300	= .
                                   1652 	.globl	C$map.c$227$1_0$300
                                   1653 ;src/map.c:227: set_sprite_data(CHARSTART, 16, rover_tiles);
      000639 11r00r00         [12] 1654 	ld	de, #_rover_tiles
      00063C D5               [16] 1655 	push	de
      00063D 21 01 10         [12] 1656 	ld	hl, #0x1001
      000640 E5               [16] 1657 	push	hl
      000641 CDr00r00         [24] 1658 	call	_set_sprite_data
      000644 E8 04            [16] 1659 	add	sp, #4
                           000646  1660 	C$map.c$228$1_0$300	= .
                                   1661 	.globl	C$map.c$228$1_0$300
                                   1662 ;src/map.c:228: draw_metasprite(direction_prev);
      000646 21r00r00         [12] 1663 	ld	hl, #_direction_prev
      000649 7E               [ 8] 1664 	ld	a, (hl)
                           00064A  1665 	C$map.c$229$1_0$300	= .
                                   1666 	.globl	C$map.c$229$1_0$300
                                   1667 ;src/map.c:229: }
                           00064A  1668 	C$map.c$229$1_0$300	= .
                                   1669 	.globl	C$map.c$229$1_0$300
                           00064A  1670 	XG$draw_character$0$0	= .
                                   1671 	.globl	XG$draw_character$0$0
      00064A C3r00r00         [16] 1672 	jp	_draw_metasprite
                           00064D  1673 	G$init_nav$0$0	= .
                                   1674 	.globl	G$init_nav$0$0
                           00064D  1675 	C$map.c$231$1_0$302	= .
                                   1676 	.globl	C$map.c$231$1_0$302
                                   1677 ;src/map.c:231: void init_nav(void){
                                   1678 ;	---------------------------------
                                   1679 ; Function init_nav
                                   1680 ; ---------------------------------
      00064D                       1681 _init_nav::
                           00064D  1682 	C$map.c$232$1_0$302	= .
                                   1683 	.globl	C$map.c$232$1_0$302
                                   1684 ;src/map.c:232: set_win_tiles(0,0,20,3,nav_map);
      00064D 11r00r00         [12] 1685 	ld	de, #_nav_map
      000650 D5               [16] 1686 	push	de
      000651 21 14 03         [12] 1687 	ld	hl, #0x314
      000654 E5               [16] 1688 	push	hl
      000655 AF               [ 4] 1689 	xor	a, a
      000656 0F               [ 4] 1690 	rrca
      000657 F5               [16] 1691 	push	af
      000658 CDr00r00         [24] 1692 	call	_set_win_tiles
      00065B E8 06            [16] 1693 	add	sp, #6
                                   1694 ;/usr/local/opt/gbdk/include/gb/gb.h:1656: WX_REG=x, WY_REG=y;
      00065D 3E 07            [ 8] 1695 	ld	a, #0x07
      00065F E0r00            [12] 1696 	ldh	(_WX_REG + 0), a
      000661 AF               [ 4] 1697 	xor	a, a
      000662 E0r00            [12] 1698 	ldh	(_WY_REG + 0), a
                           000664  1699 	C$map.c$233$3_0$302	= .
                                   1700 	.globl	C$map.c$233$3_0$302
                                   1701 ;src/map.c:233: move_win(7, 0); //124
                           000664  1702 	C$map.c$234$3_0$302	= .
                                   1703 	.globl	C$map.c$234$3_0$302
                                   1704 ;src/map.c:234: }
                           000664  1705 	C$map.c$234$3_0$302	= .
                                   1706 	.globl	C$map.c$234$3_0$302
                           000664  1707 	XG$init_nav$0$0	= .
                                   1708 	.globl	XG$init_nav$0$0
      000664 C9               [16] 1709 	ret
                           000665  1710 	G$init_tiles$0$0	= .
                                   1711 	.globl	G$init_tiles$0$0
                           000665  1712 	C$map.c$236$3_0$307	= .
                                   1713 	.globl	C$map.c$236$3_0$307
                                   1714 ;src/map.c:236: void init_tiles(void){
                                   1715 ;	---------------------------------
                                   1716 ; Function init_tiles
                                   1717 ; ---------------------------------
      000665                       1718 _init_tiles::
                           000665  1719 	C$map.c$237$1_0$307	= .
                                   1720 	.globl	C$map.c$237$1_0$307
                                   1721 ;src/map.c:237: set_bkg_data(TILESTART, 28, tile_tiles);
      000665 11r00r00         [12] 1722 	ld	de, #_tile_tiles
      000668 D5               [16] 1723 	push	de
      000669 21 5C 1C         [12] 1724 	ld	hl, #0x1c5c
      00066C E5               [16] 1725 	push	hl
      00066D CDr00r00         [24] 1726 	call	_set_bkg_data
      000670 E8 04            [16] 1727 	add	sp, #4
                           000672  1728 	C$map.c$238$1_0$307	= .
                                   1729 	.globl	C$map.c$238$1_0$307
                                   1730 ;src/map.c:238: set_bkg_data(NAVSTART, nav_TILE_COUNT, nav_tiles);
      000672 11r00r00         [12] 1731 	ld	de, #_nav_tiles
      000675 D5               [16] 1732 	push	de
      000676 21 80 0C         [12] 1733 	ld	hl, #0xc80
      000679 E5               [16] 1734 	push	hl
      00067A CDr00r00         [24] 1735 	call	_set_bkg_data
      00067D E8 04            [16] 1736 	add	sp, #4
                           00067F  1737 	C$map.c$239$1_0$307	= .
                                   1738 	.globl	C$map.c$239$1_0$307
                                   1739 ;src/map.c:239: set_4bkg_tiles(level_array, 0, 0, 16, 16);
      00067F 21 10 10         [12] 1740 	ld	hl, #0x1010
      000682 E5               [16] 1741 	push	hl
      000683 AF               [ 4] 1742 	xor	a, a
      000684 F5               [16] 1743 	push	af
      000685 33               [ 8] 1744 	inc	sp
      000686 AF               [ 4] 1745 	xor	a, a
      000687 11r00r00         [12] 1746 	ld	de, #_level_array
      00068A CDr96r00         [24] 1747 	call	_set_4bkg_tiles
                           00068D  1748 	C$map.c$240$1_0$307	= .
                                   1749 	.globl	C$map.c$240$1_0$307
                                   1750 ;src/map.c:240: }
                           00068D  1751 	C$map.c$240$1_0$307	= .
                                   1752 	.globl	C$map.c$240$1_0$307
                           00068D  1753 	XG$init_tiles$0$0	= .
                                   1754 	.globl	XG$init_tiles$0$0
      00068D C9               [16] 1755 	ret
                           00068E  1756 	G$init_progressbar$0$0	= .
                                   1757 	.globl	G$init_progressbar$0$0
                           00068E  1758 	C$map.c$242$1_0$309	= .
                                   1759 	.globl	C$map.c$242$1_0$309
                                   1760 ;src/map.c:242: void init_progressbar(void){
                                   1761 ;	---------------------------------
                                   1762 ; Function init_progressbar
                                   1763 ; ---------------------------------
      00068E                       1764 _init_progressbar::
                           00068E  1765 	C$map.c$243$1_0$309	= .
                                   1766 	.globl	C$map.c$243$1_0$309
                                   1767 ;src/map.c:243: set_sprite_data(SPRITE_TILE_1_8, progressbar_TILE_COUNT, progressbar_tiles);
      00068E 11r00r00         [12] 1768 	ld	de, #_progressbar_tiles
      000691 D5               [16] 1769 	push	de
      000692 21 20 09         [12] 1770 	ld	hl, #0x920
      000695 E5               [16] 1771 	push	hl
      000696 CDr00r00         [24] 1772 	call	_set_sprite_data
      000699 E8 04            [16] 1773 	add	sp, #4
                           00069B  1774 	C$map.c$244$1_0$309	= .
                                   1775 	.globl	C$map.c$244$1_0$309
                                   1776 ;src/map.c:244: progressbar(player.hull.current_value, player.hull.max_value, 2, 32, 12, 20);
      00069B 21r4Br00         [12] 1777 	ld	hl, #_player + 75
      00069E 2A               [ 8] 1778 	ld	a, (hl+)
      00069F 4F               [ 4] 1779 	ld	c, a
      0006A0 46               [ 8] 1780 	ld	b, (hl)
      0006A1 21r49r00         [12] 1781 	ld	hl, #_player + 73
      0006A4 2A               [ 8] 1782 	ld	a,	(hl+)
      0006A5 66               [ 8] 1783 	ld	h, (hl)
                                   1784 ;	spillPairReg hl
      0006A6 6F               [ 4] 1785 	ld	l, a
                                   1786 ;	spillPairReg hl
                                   1787 ;	spillPairReg hl
      0006A7 11 0C 14         [12] 1788 	ld	de, #0x140c
      0006AA D5               [16] 1789 	push	de
      0006AB 11 02 20         [12] 1790 	ld	de, #0x2002
      0006AE D5               [16] 1791 	push	de
      0006AF 5D               [ 4] 1792 	ld	e, l
      0006B0 54               [ 4] 1793 	ld	d, h
      0006B1 CDrFDr03         [24] 1794 	call	_progressbar
                           0006B4  1795 	C$map.c$245$1_0$309	= .
                                   1796 	.globl	C$map.c$245$1_0$309
                                   1797 ;src/map.c:245: }
                           0006B4  1798 	C$map.c$245$1_0$309	= .
                                   1799 	.globl	C$map.c$245$1_0$309
                           0006B4  1800 	XG$init_progressbar$0$0	= .
                                   1801 	.globl	XG$init_progressbar$0$0
      0006B4 C9               [16] 1802 	ret
                                   1803 	.area _CODE_1
                                   1804 	.area _INITIALIZER
                                   1805 	.area _CABS (ABS)
