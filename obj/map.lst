                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.3.2 #14228 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module map
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _init_progressbar
                                     12 	.globl _init_tiles
                                     13 	.globl _init_nav
                                     14 	.globl _draw_character
                                     15 	.globl _draw_hull
                                     16 	.globl _draw_fuel
                                     17 	.globl _draw_cargo
                                     18 	.globl _draw_depth
                                     19 	.globl _progressbar
                                     20 	.globl _add_block
                                     21 	.globl _clear_4bkg_tiles
                                     22 	.globl _spawn_bkg_row
                                     23 	.globl _set_4bkg_tiles
                                     24 	.globl _change_background_color
                                     25 	.globl _shuffle
                                     26 	.globl _draw_buildings
                                     27 	.globl b___func_bank_map
                                     28 	.globl ___func_bank_map
                                     29 	.globl _draw_metasprite
                                     30 	.globl _draw_text
                                     31 	.globl _rand
                                     32 	.globl _initrand
                                     33 	.globl _strcat
                                     34 	.globl _itoa
                                     35 	.globl _set_bkg_palette_entry
                                     36 	.globl _set_sprite_data
                                     37 	.globl _set_win_tiles
                                     38 	.globl _set_bkg_tiles
                                     39 	.globl _set_bkg_data
                                     40 ;--------------------------------------------------------
                                     41 ; special function registers
                                     42 ;--------------------------------------------------------
                                     43 ;--------------------------------------------------------
                                     44 ; ram data
                                     45 ;--------------------------------------------------------
                                     46 	.area _DATA
                                     47 ;--------------------------------------------------------
                                     48 ; ram data
                                     49 ;--------------------------------------------------------
                                     50 	.area _INITIALIZED
                                     51 ;--------------------------------------------------------
                                     52 ; absolute external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area _DABS (ABS)
                                     55 ;--------------------------------------------------------
                                     56 ; global & static initialisations
                                     57 ;--------------------------------------------------------
                                     58 	.area _HOME
                                     59 	.area _GSINIT
                                     60 	.area _GSFINAL
                                     61 	.area _GSINIT
                                     62 ;--------------------------------------------------------
                                     63 ; Home
                                     64 ;--------------------------------------------------------
                                     65 	.area _HOME
                                     66 	.area _HOME
                                     67 ;--------------------------------------------------------
                                     68 ; code
                                     69 ;--------------------------------------------------------
                                     70 	.area _CODE_1
                           000000    71 	G$__func_bank_map$0$0	= .
                                     72 	.globl	G$__func_bank_map$0$0
                           000000    73 	C$map.c$30$0_0$246	= .
                                     74 	.globl	C$map.c$30$0_0$246
                                     75 ;src/map.c:30: BANKREF(bank_map)
                                     76 ;	---------------------------------
                                     77 ; Function __func_bank_map
                                     78 ; ---------------------------------
                           000001    79 	b___func_bank_map	= 1
      000000                         80 ___func_bank_map::
                                     81 	.local b___func_bank_map 
                           000001    82 	___bank_bank_map = b___func_bank_map 
                                     83 	.globl ___bank_bank_map 
                           000000    84 	G$draw_buildings$0$0	= .
                                     85 	.globl	G$draw_buildings$0$0
                           000000    86 	C$map.c$33$1_0$249	= .
                                     87 	.globl	C$map.c$33$1_0$249
                                     88 ;src/map.c:33: void draw_buildings(void){
                                     89 ;	---------------------------------
                                     90 ; Function draw_buildings
                                     91 ; ---------------------------------
      000000                         92 _draw_buildings::
                           000000    93 	C$map.c$35$1_0$249	= .
                                     94 	.globl	C$map.c$35$1_0$249
                                     95 ;src/map.c:35: }
                           000000    96 	C$map.c$35$1_0$249	= .
                                     97 	.globl	C$map.c$35$1_0$249
                           000000    98 	XG$draw_buildings$0$0	= .
                                     99 	.globl	XG$draw_buildings$0$0
      000000 C9               [16]  100 	ret
                           000001   101 	G$shuffle$0$0	= .
                                    102 	.globl	G$shuffle$0$0
                           000001   103 	C$map.c$38$1_0$251	= .
                                    104 	.globl	C$map.c$38$1_0$251
                                    105 ;src/map.c:38: void shuffle(uint8_t array[4]) {
                                    106 ;	---------------------------------
                                    107 ; Function shuffle
                                    108 ; ---------------------------------
      000001                        109 _shuffle::
      000001 3B               [ 8]  110 	dec	sp
                           000002   111 	C$map.c$39$2_0$251	= .
                                    112 	.globl	C$map.c$39$2_0$251
                                    113 ;src/map.c:39: uint16_t seed = LY_REG;
      000002 F0r00            [12]  114 	ldh	a, (_LY_REG + 0)
      000004 6F               [ 4]  115 	ld	l, a
                                    116 ;	spillPairReg hl
                                    117 ;	spillPairReg hl
                                    118 ;	spillPairReg hl
                                    119 ;	spillPairReg hl
                           000005   120 	C$map.c$40$1_0$251	= .
                                    121 	.globl	C$map.c$40$1_0$251
                                    122 ;src/map.c:40: seed |= (uint16_t)DIV_REG << 8;
      000005 F0r00            [12]  123 	ldh	a, (_DIV_REG + 0)
      000007 4F               [ 4]  124 	ld	c, a
      000008 AF               [ 4]  125 	xor	a, a
      000009 B5               [ 4]  126 	or	a, l
                           00000A   127 	C$map.c$41$1_0$251	= .
                                    128 	.globl	C$map.c$41$1_0$251
                                    129 ;src/map.c:41: initrand(seed);
      00000A D5               [16]  130 	push	de
      00000B 41               [ 4]  131 	ld	b, c
      00000C 4F               [ 4]  132 	ld	c, a
      00000D C5               [16]  133 	push	bc
      00000E CDr00r00         [24]  134 	call	_initrand
      000011 E1               [12]  135 	pop	hl
      000012 CDr00r00         [24]  136 	call	_rand
      000015 7B               [ 4]  137 	ld	a, e
      000016 D1               [12]  138 	pop	de
      000017 E6 03            [ 8]  139 	and	a, #0x03
      000019 6F               [ 4]  140 	ld	l, a
                                    141 ;	spillPairReg hl
                                    142 ;	spillPairReg hl
                           00001A   143 	C$map.c$45$1_1$252	= .
                                    144 	.globl	C$map.c$45$1_1$252
                                    145 ;src/map.c:45: do {
      00001A                        146 00101$:
                           00001A   147 	C$map.c$46$2_1$253	= .
                                    148 	.globl	C$map.c$46$2_1$253
                                    149 ;src/map.c:46: secondSwapIndex = rand() % 4;
      00001A E5               [16]  150 	push	hl
      00001B D5               [16]  151 	push	de
      00001C CDr00r00         [24]  152 	call	_rand
      00001F 7B               [ 4]  153 	ld	a, e
      000020 D1               [12]  154 	pop	de
      000021 E1               [12]  155 	pop	hl
      000022 E6 03            [ 8]  156 	and	a, #0x03
      000024 4F               [ 4]  157 	ld	c, a
                           000025   158 	C$map.c$47$1_1$252	= .
                                    159 	.globl	C$map.c$47$1_1$252
                                    160 ;src/map.c:47: } while (firstSwapIndex == secondSwapIndex);  // Ensure it's a different index
      000025 7D               [ 4]  161 	ld	a, l
      000026 91               [ 4]  162 	sub	a, c
      000027 28 F1            [12]  163 	jr	Z, 00101$
                           000029   164 	C$map.c$50$1_2$254	= .
                                    165 	.globl	C$map.c$50$1_2$254
                                    166 ;src/map.c:50: uint8_t temp = array[firstSwapIndex];
      000029 26 00            [ 8]  167 	ld	h, #0x00
      00002B 19               [ 8]  168 	add	hl, de
      00002C 7E               [ 8]  169 	ld	a, (hl)
      00002D E5               [16]  170 	push	hl
      00002E F8 02            [12]  171 	ldhl	sp,	#2
      000030 77               [ 8]  172 	ld	(hl), a
      000031 E1               [12]  173 	pop	hl
                           000032   174 	C$map.c$51$1_2$254	= .
                                    175 	.globl	C$map.c$51$1_2$254
                                    176 ;src/map.c:51: array[firstSwapIndex] = array[secondSwapIndex];
      000032 7B               [ 4]  177 	ld	a, e
      000033 81               [ 4]  178 	add	a, c
      000034 4F               [ 4]  179 	ld	c, a
      000035 7A               [ 4]  180 	ld	a, d
      000036 CE 00            [ 8]  181 	adc	a, #0x00
      000038 47               [ 4]  182 	ld	b, a
      000039 0A               [ 8]  183 	ld	a, (bc)
      00003A 77               [ 8]  184 	ld	(hl), a
                           00003B   185 	C$map.c$52$1_2$254	= .
                                    186 	.globl	C$map.c$52$1_2$254
                                    187 ;src/map.c:52: array[secondSwapIndex] = temp;
      00003B F8 00            [12]  188 	ldhl	sp,	#0
      00003D 7E               [ 8]  189 	ld	a, (hl)
      00003E 02               [ 8]  190 	ld	(bc), a
                           00003F   191 	C$map.c$55$1_2$254	= .
                                    192 	.globl	C$map.c$55$1_2$254
                                    193 ;src/map.c:55: firstSwapIndex = rand() % 4;
      00003F D5               [16]  194 	push	de
      000040 CDr00r00         [24]  195 	call	_rand
      000043 7B               [ 4]  196 	ld	a, e
      000044 D1               [12]  197 	pop	de
      000045 E6 03            [ 8]  198 	and	a, #0x03
      000047 6F               [ 4]  199 	ld	l, a
                                    200 ;	spillPairReg hl
                                    201 ;	spillPairReg hl
                           000048   202 	C$map.c$56$1_2$254	= .
                                    203 	.globl	C$map.c$56$1_2$254
                                    204 ;src/map.c:56: do {
      000048                        205 00104$:
                           000048   206 	C$map.c$57$2_2$255	= .
                                    207 	.globl	C$map.c$57$2_2$255
                                    208 ;src/map.c:57: secondSwapIndex = rand() % 4;
      000048 E5               [16]  209 	push	hl
      000049 D5               [16]  210 	push	de
      00004A CDr00r00         [24]  211 	call	_rand
      00004D 7B               [ 4]  212 	ld	a, e
      00004E D1               [12]  213 	pop	de
      00004F E1               [12]  214 	pop	hl
      000050 E6 03            [ 8]  215 	and	a, #0x03
      000052 47               [ 4]  216 	ld	b, a
                           000053   217 	C$map.c$58$1_2$254	= .
                                    218 	.globl	C$map.c$58$1_2$254
                                    219 ;src/map.c:58: } while (firstSwapIndex == secondSwapIndex);  // Ensure it's a different index
      000053 7D               [ 4]  220 	ld	a, l
      000054 90               [ 4]  221 	sub	a, b
      000055 28 F1            [12]  222 	jr	Z, 00104$
                           000057   223 	C$map.c$60$1_2$254	= .
                                    224 	.globl	C$map.c$60$1_2$254
                                    225 ;src/map.c:60: temp = array[firstSwapIndex];
      000057 26 00            [ 8]  226 	ld	h, #0x00
      000059 19               [ 8]  227 	add	hl, de
      00005A 4E               [ 8]  228 	ld	c, (hl)
                           00005B   229 	C$map.c$61$1_2$254	= .
                                    230 	.globl	C$map.c$61$1_2$254
                                    231 ;src/map.c:61: array[firstSwapIndex] = array[secondSwapIndex];
      00005B 7B               [ 4]  232 	ld	a, e
      00005C 80               [ 4]  233 	add	a, b
      00005D 5F               [ 4]  234 	ld	e, a
      00005E 30 01            [12]  235 	jr	NC, 00139$
      000060 14               [ 4]  236 	inc	d
      000061                        237 00139$:
      000061 1A               [ 8]  238 	ld	a, (de)
      000062 77               [ 8]  239 	ld	(hl), a
                           000063   240 	C$map.c$62$1_2$254	= .
                                    241 	.globl	C$map.c$62$1_2$254
                                    242 ;src/map.c:62: array[secondSwapIndex] = temp;
      000063 79               [ 4]  243 	ld	a, c
      000064 12               [ 8]  244 	ld	(de), a
                           000065   245 	C$map.c$63$1_2$251	= .
                                    246 	.globl	C$map.c$63$1_2$251
                                    247 ;src/map.c:63: }
      000065 33               [ 8]  248 	inc	sp
                           000066   249 	C$map.c$63$1_2$251	= .
                                    250 	.globl	C$map.c$63$1_2$251
                           000066   251 	XG$shuffle$0$0	= .
                                    252 	.globl	XG$shuffle$0$0
      000066 C9               [16]  253 	ret
                           000067   254 	G$change_background_color$0$0	= .
                                    255 	.globl	G$change_background_color$0$0
                           000067   256 	C$map.c$65$1_2$257	= .
                                    257 	.globl	C$map.c$65$1_2$257
                                    258 ;src/map.c:65: void change_background_color(void) {
                                    259 ;	---------------------------------
                                    260 ; Function change_background_color
                                    261 ; ---------------------------------
      000067                        262 _change_background_color::
                           000067   263 	C$map.c$66$1_0$257	= .
                                    264 	.globl	C$map.c$66$1_0$257
                                    265 ;src/map.c:66: set_bkg_palette_entry(0,0,RGB8(255 - (scroll_y.h + depth_pixel.h), 255, 255));
      000067 FAr01r00         [16]  266 	ld	a, (#(_scroll_y + 1) + 0)
      00006A 4F               [ 4]  267 	ld	c, a
      00006B 06 00            [ 8]  268 	ld	b, #0x00
      00006D FAr01r00         [16]  269 	ld	a, (#(_depth_pixel + 1) + 0)
      000070 6F               [ 4]  270 	ld	l, a
                                    271 ;	spillPairReg hl
                                    272 ;	spillPairReg hl
      000071 26 00            [ 8]  273 	ld	h, #0x00
                                    274 ;	spillPairReg hl
                                    275 ;	spillPairReg hl
      000073 09               [ 8]  276 	add	hl, bc
      000074 3E FF            [ 8]  277 	ld	a, #0xff
      000076 95               [ 4]  278 	sub	a, l
      000077 4F               [ 4]  279 	ld	c, a
      000078 9F               [ 4]  280 	sbc	a, a
      000079 94               [ 4]  281 	sub	a, h
      00007A 47               [ 4]  282 	ld	b, a
      00007B CB 28            [ 8]  283 	sra	b
      00007D CB 19            [ 8]  284 	rr	c
      00007F CB 28            [ 8]  285 	sra	b
      000081 CB 19            [ 8]  286 	rr	c
      000083 CB 28            [ 8]  287 	sra	b
      000085 CB 19            [ 8]  288 	rr	c
      000087 79               [ 4]  289 	ld	a, c
      000088 E6 1F            [ 8]  290 	and	a, #0x1f
      00008A F6 E0            [ 8]  291 	or	a, #0xe0
      00008C 06 7F            [ 8]  292 	ld	b, #0x7f
      00008E 4F               [ 4]  293 	ld	c, a
      00008F C5               [16]  294 	push	bc
      000090 AF               [ 4]  295 	xor	a, a
      000091 0F               [ 4]  296 	rrca
      000092 F5               [16]  297 	push	af
      000093 CDr00r00         [24]  298 	call	_set_bkg_palette_entry
      000096 E8 04            [16]  299 	add	sp, #4
                           000098   300 	C$map.c$67$1_0$257	= .
                                    301 	.globl	C$map.c$67$1_0$257
                                    302 ;src/map.c:67: }
                           000098   303 	C$map.c$67$1_0$257	= .
                                    304 	.globl	C$map.c$67$1_0$257
                           000098   305 	XG$change_background_color$0$0	= .
                                    306 	.globl	XG$change_background_color$0$0
      000098 C9               [16]  307 	ret
                           000099   308 	G$set_4bkg_tiles$0$0	= .
                                    309 	.globl	G$set_4bkg_tiles$0$0
                           000099   310 	C$map.c$78$1_0$260	= .
                                    311 	.globl	C$map.c$78$1_0$260
                                    312 ;src/map.c:78: void set_4bkg_tiles(uint8_t array[][16], uint8_t x1, uint8_t y1, uint8_t r, uint8_t c) {
                                    313 ;	---------------------------------
                                    314 ; Function set_4bkg_tiles
                                    315 ; ---------------------------------
      000099                        316 _set_4bkg_tiles::
      000099 E8 E8            [16]  317 	add	sp, #-24
      00009B F8 12            [12]  318 	ldhl	sp,	#18
      00009D 73               [ 8]  319 	ld	(hl), e
      00009E 23               [ 8]  320 	inc	hl
      00009F 72               [ 8]  321 	ld	(hl), d
      0000A0 2B               [ 8]  322 	dec	hl
      0000A1 2B               [ 8]  323 	dec	hl
      0000A2 77               [ 8]  324 	ld	(hl), a
                           0000A3   325 	C$map.c$79$3_0$260	= .
                                    326 	.globl	C$map.c$79$3_0$260
                                    327 ;src/map.c:79: for (uint8_t y = y1; y < y1 + r; y++) {
      0000A3 F8 1A            [12]  328 	ldhl	sp,	#26
      0000A5 7E               [ 8]  329 	ld	a, (hl)
      0000A6 F8 14            [12]  330 	ldhl	sp,	#20
      0000A8 77               [ 8]  331 	ld	(hl), a
      0000A9                        332 00134$:
      0000A9 F8 1A            [12]  333 	ldhl	sp,	#26
      0000AB 2A               [ 8]  334 	ld	a, (hl+)
      0000AC 06 00            [ 8]  335 	ld	b, #0x00
      0000AE 5E               [ 8]  336 	ld	e, (hl)
      0000AF 83               [ 4]  337 	add	a, e
      0000B0 4F               [ 4]  338 	ld	c, a
      0000B1 30 01            [12]  339 	jr	NC, 00264$
      0000B3 04               [ 4]  340 	inc	b
      0000B4                        341 00264$:
      0000B4 F8 14            [12]  342 	ldhl	sp,	#20
      0000B6 7E               [ 8]  343 	ld	a, (hl)
      0000B7 F8 08            [12]  344 	ldhl	sp,	#8
      0000B9 22               [ 8]  345 	ld	(hl+), a
      0000BA AF               [ 4]  346 	xor	a, a
      0000BB 32               [ 8]  347 	ld	(hl-), a
      0000BC 2A               [ 8]  348 	ld	a, (hl+)
      0000BD 91               [ 4]  349 	sub	a, c
      0000BE 7E               [ 8]  350 	ld	a, (hl)
      0000BF 98               [ 4]  351 	sbc	a, b
      0000C0 56               [ 8]  352 	ld	d, (hl)
      0000C1 78               [ 4]  353 	ld	a, b
      0000C2 5F               [ 4]  354 	ld	e, a
      0000C3 CB 7B            [ 8]  355 	bit	7, e
      0000C5 28 07            [12]  356 	jr	Z, 00265$
      0000C7 CB 7A            [ 8]  357 	bit	7, d
      0000C9 20 08            [12]  358 	jr	NZ, 00266$
      0000CB BF               [ 4]  359 	cp	a, a
      0000CC 18 05            [12]  360 	jr	00266$
      0000CE                        361 00265$:
      0000CE CB 7A            [ 8]  362 	bit	7, d
      0000D0 28 01            [12]  363 	jr	Z, 00266$
      0000D2 37               [ 4]  364 	scf
      0000D3                        365 00266$:
      0000D3 D2r6Ar03         [16]  366 	jp	NC, 00136$
                           0000D6   367 	C$map.c$80$5_0$263	= .
                                    368 	.globl	C$map.c$80$5_0$263
                                    369 ;src/map.c:80: for (uint8_t x = x1; x < x1 + c; x++) {
      0000D6 F8 14            [12]  370 	ldhl	sp,	#20
      0000D8 7E               [ 8]  371 	ld	a, (hl)
      0000D9 87               [ 4]  372 	add	a, a
      0000DA F8 0A            [12]  373 	ldhl	sp,	#10
      0000DC 77               [ 8]  374 	ld	(hl), a
      0000DD F8 11            [12]  375 	ldhl	sp,	#17
      0000DF 7E               [ 8]  376 	ld	a, (hl)
      0000E0 F8 15            [12]  377 	ldhl	sp,	#21
      0000E2 77               [ 8]  378 	ld	(hl), a
      0000E3                        379 00131$:
      0000E3 F8 11            [12]  380 	ldhl	sp,	#17
      0000E5 7E               [ 8]  381 	ld	a, (hl)
      0000E6 F8 0D            [12]  382 	ldhl	sp,	#13
      0000E8 22               [ 8]  383 	ld	(hl+), a
      0000E9 36 00            [12]  384 	ld	(hl), #0x00
      0000EB F8 1C            [12]  385 	ldhl	sp,	#28
      0000ED 7E               [ 8]  386 	ld	a, (hl)
      0000EE F8 0F            [12]  387 	ldhl	sp,	#15
      0000F0 22               [ 8]  388 	ld	(hl+), a
      0000F1 AF               [ 4]  389 	xor	a, a
      0000F2 32               [ 8]  390 	ld	(hl-), a
      0000F3 2A               [ 8]  391 	ld	a, (hl+)
      0000F4 5F               [ 4]  392 	ld	e, a
      0000F5 56               [ 8]  393 	ld	d, (hl)
      0000F6 F8 0D            [12]  394 	ldhl	sp,	#13
      0000F8 2A               [ 8]  395 	ld	a,	(hl+)
      0000F9 66               [ 8]  396 	ld	h, (hl)
      0000FA 6F               [ 4]  397 	ld	l, a
      0000FB 19               [ 8]  398 	add	hl, de
      0000FC E5               [16]  399 	push	hl
      0000FD 7D               [ 4]  400 	ld	a, l
      0000FE F8 18            [12]  401 	ldhl	sp,	#24
      000100 77               [ 8]  402 	ld	(hl), a
      000101 E1               [12]  403 	pop	hl
      000102 7C               [ 4]  404 	ld	a, h
      000103 F8 17            [12]  405 	ldhl	sp,	#23
      000105 32               [ 8]  406 	ld	(hl-), a
      000106 2B               [ 8]  407 	dec	hl
      000107 7E               [ 8]  408 	ld	a, (hl)
      000108 F8 0F            [12]  409 	ldhl	sp,	#15
      00010A 22               [ 8]  410 	ld	(hl+), a
      00010B 36 00            [12]  411 	ld	(hl), #0x00
      00010D F8 0F            [12]  412 	ldhl	sp,	#15
      00010F 5D               [ 4]  413 	ld	e, l
      000110 54               [ 4]  414 	ld	d, h
      000111 F8 16            [12]  415 	ldhl	sp,	#22
      000113 1A               [ 8]  416 	ld	a, (de)
      000114 13               [ 8]  417 	inc	de
      000115 96               [ 8]  418 	sub	a, (hl)
      000116 23               [ 8]  419 	inc	hl
      000117 1A               [ 8]  420 	ld	a, (de)
      000118 9E               [ 8]  421 	sbc	a, (hl)
      000119 1A               [ 8]  422 	ld	a, (de)
      00011A 57               [ 4]  423 	ld	d, a
      00011B CB 7E            [12]  424 	bit	7, (hl)
      00011D 28 07            [12]  425 	jr	Z, 00267$
      00011F CB 7A            [ 8]  426 	bit	7, d
      000121 20 08            [12]  427 	jr	NZ, 00268$
      000123 BF               [ 4]  428 	cp	a, a
      000124 18 05            [12]  429 	jr	00268$
      000126                        430 00267$:
      000126 CB 7A            [ 8]  431 	bit	7, d
      000128 28 01            [12]  432 	jr	Z, 00268$
      00012A 37               [ 4]  433 	scf
      00012B                        434 00268$:
      00012B D2r64r03         [16]  435 	jp	NC, 00135$
                           00012E   436 	C$map.c$81$5_0$263	= .
                                    437 	.globl	C$map.c$81$5_0$263
                                    438 ;src/map.c:81: uint8_t temp = (array[y][x] * 4) + TILESTART - 4;
      00012E F8 08            [12]  439 	ldhl	sp,	#8
      000130 7E               [ 8]  440 	ld	a, (hl)
      000131 16 00            [ 8]  441 	ld	d, #0x00
      000133 87               [ 4]  442 	add	a, a
      000134 CB 12            [ 8]  443 	rl	d
      000136 87               [ 4]  444 	add	a, a
      000137 CB 12            [ 8]  445 	rl	d
      000139 87               [ 4]  446 	add	a, a
      00013A CB 12            [ 8]  447 	rl	d
      00013C 87               [ 4]  448 	add	a, a
      00013D CB 12            [ 8]  449 	rl	d
      00013F 5F               [ 4]  450 	ld	e, a
      000140 F8 12            [12]  451 	ldhl	sp,	#18
      000142 2A               [ 8]  452 	ld	a,	(hl+)
      000143 66               [ 8]  453 	ld	h, (hl)
      000144 6F               [ 4]  454 	ld	l, a
      000145 19               [ 8]  455 	add	hl, de
      000146 4D               [ 4]  456 	ld	c, l
      000147 44               [ 4]  457 	ld	b, h
      000148 F8 15            [12]  458 	ldhl	sp,	#21
      00014A 6E               [ 8]  459 	ld	l, (hl)
      00014B 26 00            [ 8]  460 	ld	h, #0x00
      00014D 09               [ 8]  461 	add	hl, bc
      00014E 4D               [ 4]  462 	ld	c, l
      00014F 44               [ 4]  463 	ld	b, h
      000150 0A               [ 8]  464 	ld	a, (bc)
      000151 87               [ 4]  465 	add	a, a
      000152 87               [ 4]  466 	add	a, a
      000153 C6 58            [ 8]  467 	add	a, #0x58
      000155 F8 17            [12]  468 	ldhl	sp,	#23
      000157 77               [ 8]  469 	ld	(hl), a
                           000158   470 	C$map.c$82$5_0$263	= .
                                    471 	.globl	C$map.c$82$5_0$263
                                    472 ;src/map.c:82: uint8_t tile_array[4] = {temp, temp + 1, temp + 2, temp + 3};
      000158 7E               [ 8]  473 	ld	a, (hl)
      000159 F8 00            [12]  474 	ldhl	sp,	#0
      00015B 77               [ 8]  475 	ld	(hl), a
      00015C F8 17            [12]  476 	ldhl	sp,	#23
      00015E 7E               [ 8]  477 	ld	a, (hl)
      00015F F8 10            [12]  478 	ldhl	sp,	#16
      000161 77               [ 8]  479 	ld	(hl), a
      000162 7E               [ 8]  480 	ld	a, (hl)
      000163 3C               [ 4]  481 	inc	a
      000164 F8 01            [12]  482 	ldhl	sp,	#1
      000166 77               [ 8]  483 	ld	(hl), a
      000167 F8 10            [12]  484 	ldhl	sp,	#16
      000169 7E               [ 8]  485 	ld	a, (hl)
      00016A 3C               [ 4]  486 	inc	a
      00016B 3C               [ 4]  487 	inc	a
      00016C F8 02            [12]  488 	ldhl	sp,	#2
      00016E 77               [ 8]  489 	ld	(hl), a
      00016F F8 10            [12]  490 	ldhl	sp,	#16
      000171 7E               [ 8]  491 	ld	a, (hl)
      000172 3C               [ 4]  492 	inc	a
      000173 3C               [ 4]  493 	inc	a
      000174 3C               [ 4]  494 	inc	a
      000175 F8 03            [12]  495 	ldhl	sp,	#3
      000177 77               [ 8]  496 	ld	(hl), a
                           000178   497 	C$map.c$85$5_0$263	= .
                                    498 	.globl	C$map.c$85$5_0$263
                                    499 ;src/map.c:85: if (array[y][x] == EMPTY) {
      000178 0A               [ 8]  500 	ld	a, (bc)
                           000179   501 	C$map.c$86$2_0$260	= .
                                    502 	.globl	C$map.c$86$2_0$260
                                    503 ;src/map.c:86: for (int i = 0; i < 4; i++) tile_array[i] = 0;
      000179 B7               [ 4]  504 	or	a,a
      00017A 20 3D            [12]  505 	jr	NZ, 00109$
      00017C F8 16            [12]  506 	ldhl	sp,	#22
      00017E 22               [ 8]  507 	ld	(hl+), a
      00017F 77               [ 8]  508 	ld	(hl), a
      000180                        509 00119$:
      000180 F8 16            [12]  510 	ldhl	sp,	#22
      000182 2A               [ 8]  511 	ld	a, (hl+)
      000183 D6 04            [ 8]  512 	sub	a, #0x04
      000185 7E               [ 8]  513 	ld	a, (hl)
      000186 DE 00            [ 8]  514 	sbc	a, #0x00
      000188 56               [ 8]  515 	ld	d, (hl)
      000189 3E 00            [ 8]  516 	ld	a, #0x00
      00018B CB 7F            [ 8]  517 	bit	7,a
      00018D 28 07            [12]  518 	jr	Z, 00270$
      00018F CB 7A            [ 8]  519 	bit	7, d
      000191 20 08            [12]  520 	jr	NZ, 00271$
      000193 BF               [ 4]  521 	cp	a, a
      000194 18 05            [12]  522 	jr	00271$
      000196                        523 00270$:
      000196 CB 7A            [ 8]  524 	bit	7, d
      000198 28 01            [12]  525 	jr	Z, 00271$
      00019A 37               [ 4]  526 	scf
      00019B                        527 00271$:
      00019B D2r39r02         [16]  528 	jp	NC, 00110$
      00019E E5               [16]  529 	push	hl
      00019F 21 02 00         [12]  530 	ld	hl, #2
      0001A2 39               [ 8]  531 	add	hl, sp
      0001A3 5D               [ 4]  532 	ld	e, l
      0001A4 54               [ 4]  533 	ld	d, h
      0001A5 E1               [12]  534 	pop	hl
      0001A6 F8 16            [12]  535 	ldhl	sp,	#22
      0001A8 2A               [ 8]  536 	ld	a,	(hl+)
      0001A9 66               [ 8]  537 	ld	h, (hl)
      0001AA 6F               [ 4]  538 	ld	l, a
      0001AB 19               [ 8]  539 	add	hl, de
      0001AC 5D               [ 4]  540 	ld	e, l
      0001AD 54               [ 4]  541 	ld	d, h
      0001AE AF               [ 4]  542 	xor	a, a
      0001AF 12               [ 8]  543 	ld	(de), a
      0001B0 F8 16            [12]  544 	ldhl	sp,	#22
      0001B2 34               [12]  545 	inc	(hl)
      0001B3 20 CB            [12]  546 	jr	NZ, 00119$
      0001B5 23               [ 8]  547 	inc	hl
      0001B6 34               [12]  548 	inc	(hl)
      0001B7 18 C7            [12]  549 	jr	00119$
      0001B9                        550 00109$:
                           0001B9   551 	C$map.c$87$5_0$263	= .
                                    552 	.globl	C$map.c$87$5_0$263
                                    553 ;src/map.c:87: } else if (array[y][x] == GRAS) {
      0001B9 FE 02            [ 8]  554 	cp	a, #0x02
      0001BB 20 2D            [12]  555 	jr	NZ, 00106$
                           0001BD   556 	C$map.c$88$6_0$266	= .
                                    557 	.globl	C$map.c$88$6_0$266
                                    558 ;src/map.c:88: tile_array[0] = temp + (rand() % 4);
      0001BD C5               [16]  559 	push	bc
      0001BE CDr00r00         [24]  560 	call	_rand
      0001C1 7B               [ 4]  561 	ld	a, e
      0001C2 C1               [12]  562 	pop	bc
      0001C3 E6 03            [ 8]  563 	and	a, #0x03
      0001C5 F8 10            [12]  564 	ldhl	sp,	#16
      0001C7 86               [ 8]  565 	add	a, (hl)
      0001C8 F8 00            [12]  566 	ldhl	sp,	#0
      0001CA 77               [ 8]  567 	ld	(hl), a
                           0001CB   568 	C$map.c$89$6_0$266	= .
                                    569 	.globl	C$map.c$89$6_0$266
                                    570 ;src/map.c:89: tile_array[1] = temp + (rand() % 4);
      0001CB C5               [16]  571 	push	bc
      0001CC CDr00r00         [24]  572 	call	_rand
      0001CF 7B               [ 4]  573 	ld	a, e
      0001D0 C1               [12]  574 	pop	bc
      0001D1 E6 03            [ 8]  575 	and	a, #0x03
      0001D3 F8 10            [12]  576 	ldhl	sp,	#16
      0001D5 86               [ 8]  577 	add	a, (hl)
      0001D6 F8 01            [12]  578 	ldhl	sp,	#1
      0001D8 77               [ 8]  579 	ld	(hl), a
                           0001D9   580 	C$map.c$90$6_0$266	= .
                                    581 	.globl	C$map.c$90$6_0$266
                                    582 ;src/map.c:90: tile_array[2] = temp - 1;
      0001D9 F8 10            [12]  583 	ldhl	sp,	#16
      0001DB 7E               [ 8]  584 	ld	a, (hl)
      0001DC 3D               [ 4]  585 	dec	a
      0001DD F8 02            [12]  586 	ldhl	sp,	#2
      0001DF 77               [ 8]  587 	ld	(hl), a
                           0001E0   588 	C$map.c$91$6_0$266	= .
                                    589 	.globl	C$map.c$91$6_0$266
                                    590 ;src/map.c:91: tile_array[3] = temp - 2;
      0001E0 F8 10            [12]  591 	ldhl	sp,	#16
      0001E2 7E               [ 8]  592 	ld	a, (hl)
      0001E3 3D               [ 4]  593 	dec	a
      0001E4 3D               [ 4]  594 	dec	a
      0001E5 F8 03            [12]  595 	ldhl	sp,	#3
      0001E7 77               [ 8]  596 	ld	(hl), a
      0001E8 18 4F            [12]  597 	jr	00110$
      0001EA                        598 00106$:
                           0001EA   599 	C$map.c$92$5_0$263	= .
                                    600 	.globl	C$map.c$92$5_0$263
                                    601 ;src/map.c:92: } else if (array[y][x] == DIRT) {
                           0001EA   602 	C$map.c$93$2_0$260	= .
                                    603 	.globl	C$map.c$93$2_0$260
                                    604 ;src/map.c:93: for (int i = 0; i < 4; i++) tile_array[i] = temp + i;
      0001EA 3D               [ 4]  605 	dec	a
      0001EB 20 4C            [12]  606 	jr	NZ, 00110$
      0001ED F8 16            [12]  607 	ldhl	sp,	#22
      0001EF 22               [ 8]  608 	ld	(hl+), a
      0001F0 77               [ 8]  609 	ld	(hl), a
      0001F1                        610 00122$:
      0001F1 F8 16            [12]  611 	ldhl	sp,	#22
      0001F3 2A               [ 8]  612 	ld	a, (hl+)
      0001F4 D6 04            [ 8]  613 	sub	a, #0x04
      0001F6 7E               [ 8]  614 	ld	a, (hl)
      0001F7 DE 00            [ 8]  615 	sbc	a, #0x00
      0001F9 56               [ 8]  616 	ld	d, (hl)
      0001FA 3E 00            [ 8]  617 	ld	a, #0x00
      0001FC CB 7F            [ 8]  618 	bit	7,a
      0001FE 28 07            [12]  619 	jr	Z, 00277$
      000200 CB 7A            [ 8]  620 	bit	7, d
      000202 20 08            [12]  621 	jr	NZ, 00278$
      000204 BF               [ 4]  622 	cp	a, a
      000205 18 05            [12]  623 	jr	00278$
      000207                        624 00277$:
      000207 CB 7A            [ 8]  625 	bit	7, d
      000209 28 01            [12]  626 	jr	Z, 00278$
      00020B 37               [ 4]  627 	scf
      00020C                        628 00278$:
      00020C 30 20            [12]  629 	jr	NC, 00102$
      00020E E5               [16]  630 	push	hl
      00020F 21 02 00         [12]  631 	ld	hl, #2
      000212 39               [ 8]  632 	add	hl, sp
      000213 5D               [ 4]  633 	ld	e, l
      000214 54               [ 4]  634 	ld	d, h
      000215 E1               [12]  635 	pop	hl
      000216 F8 16            [12]  636 	ldhl	sp,	#22
      000218 2A               [ 8]  637 	ld	a,	(hl+)
      000219 66               [ 8]  638 	ld	h, (hl)
      00021A 6F               [ 4]  639 	ld	l, a
      00021B 19               [ 8]  640 	add	hl, de
      00021C 5D               [ 4]  641 	ld	e, l
      00021D 54               [ 4]  642 	ld	d, h
      00021E F8 16            [12]  643 	ldhl	sp,	#22
      000220 7E               [ 8]  644 	ld	a, (hl)
      000221 F8 10            [12]  645 	ldhl	sp,	#16
      000223 86               [ 8]  646 	add	a, (hl)
      000224 12               [ 8]  647 	ld	(de), a
      000225 F8 16            [12]  648 	ldhl	sp,	#22
      000227 34               [12]  649 	inc	(hl)
      000228 20 C7            [12]  650 	jr	NZ, 00122$
      00022A 23               [ 8]  651 	inc	hl
      00022B 34               [12]  652 	inc	(hl)
      00022C 18 C3            [12]  653 	jr	00122$
      00022E                        654 00102$:
                           00022E   655 	C$map.c$94$6_0$267	= .
                                    656 	.globl	C$map.c$94$6_0$267
                                    657 ;src/map.c:94: shuffle(tile_array);
      00022E C5               [16]  658 	push	bc
      00022F 21 02 00         [12]  659 	ld	hl, #2
      000232 39               [ 8]  660 	add	hl, sp
      000233 5D               [ 4]  661 	ld	e, l
      000234 54               [ 4]  662 	ld	d, h
      000235 CDr01r00         [24]  663 	call	_shuffle
      000238 C1               [12]  664 	pop	bc
      000239                        665 00110$:
                           000239   666 	C$map.c$97$5_0$263	= .
                                    667 	.globl	C$map.c$97$5_0$263
                                    668 ;src/map.c:97: if (array[y][x] == EMPTY) {
      000239 0A               [ 8]  669 	ld	a, (bc)
      00023A B7               [ 4]  670 	or	a, a
      00023B 20 19            [12]  671 	jr	NZ, 00153$
                           00023D   672 	C$map.c$98$2_0$260	= .
                                    673 	.globl	C$map.c$98$2_0$260
                                    674 ;src/map.c:98: for (int i = 0; i < 4; i++) palette_array[i] = 0;
      00023D 01 00 00         [12]  675 	ld	bc, #0x0000
      000240                        676 00125$:
      000240 79               [ 4]  677 	ld	a, c
      000241 D6 04            [ 8]  678 	sub	a, #0x04
      000243 78               [ 4]  679 	ld	a, b
      000244 17               [ 4]  680 	rla
      000245 3F               [ 4]  681 	ccf
      000246 1F               [ 4]  682 	rra
      000247 DE 80            [ 8]  683 	sbc	a, #0x80
      000249 D2rF9r02         [16]  684 	jp	NC, 00115$
      00024C 21 04 00         [12]  685 	ld	hl, #4
      00024F 39               [ 8]  686 	add	hl, sp
      000250 09               [ 8]  687 	add	hl, bc
      000251 36 00            [12]  688 	ld	(hl), #0x00
      000253 03               [ 8]  689 	inc	bc
      000254 18 EA            [12]  690 	jr	00125$
                           000256   691 	C$map.c$100$2_0$260	= .
                                    692 	.globl	C$map.c$100$2_0$260
                                    693 ;src/map.c:100: for (int i = 0; i < 4; i++) palette_array[i] = materials[(tile_array[i] + 4 - TILESTART) / 4].color_palette;
      000256                        694 00153$:
      000256 AF               [ 4]  695 	xor	a, a
      000257 F8 16            [12]  696 	ldhl	sp,	#22
      000259 22               [ 8]  697 	ld	(hl+), a
      00025A 77               [ 8]  698 	ld	(hl), a
      00025B                        699 00128$:
      00025B F8 16            [12]  700 	ldhl	sp,	#22
      00025D 2A               [ 8]  701 	ld	a, (hl+)
      00025E D6 04            [ 8]  702 	sub	a, #0x04
      000260 7E               [ 8]  703 	ld	a, (hl)
      000261 DE 00            [ 8]  704 	sbc	a, #0x00
      000263 56               [ 8]  705 	ld	d, (hl)
      000264 3E 00            [ 8]  706 	ld	a, #0x00
      000266 CB 7F            [ 8]  707 	bit	7,a
      000268 28 07            [12]  708 	jr	Z, 00280$
      00026A CB 7A            [ 8]  709 	bit	7, d
      00026C 20 08            [12]  710 	jr	NZ, 00281$
      00026E BF               [ 4]  711 	cp	a, a
      00026F 18 05            [12]  712 	jr	00281$
      000271                        713 00280$:
      000271 CB 7A            [ 8]  714 	bit	7, d
      000273 28 01            [12]  715 	jr	Z, 00281$
      000275 37               [ 4]  716 	scf
      000276                        717 00281$:
      000276 D2rF9r02         [16]  718 	jp	NC, 00115$
      000279 E5               [16]  719 	push	hl
      00027A 21 06 00         [12]  720 	ld	hl, #6
      00027D 39               [ 8]  721 	add	hl, sp
      00027E 5D               [ 4]  722 	ld	e, l
      00027F 54               [ 4]  723 	ld	d, h
      000280 E1               [12]  724 	pop	hl
      000281 F8 16            [12]  725 	ldhl	sp,	#22
      000283 2A               [ 8]  726 	ld	a,	(hl+)
      000284 66               [ 8]  727 	ld	h, (hl)
      000285 6F               [ 4]  728 	ld	l, a
      000286 19               [ 8]  729 	add	hl, de
      000287 E5               [16]  730 	push	hl
      000288 7D               [ 4]  731 	ld	a, l
      000289 F8 0D            [12]  732 	ldhl	sp,	#13
      00028B 77               [ 8]  733 	ld	(hl), a
      00028C E1               [12]  734 	pop	hl
      00028D 7C               [ 4]  735 	ld	a, h
      00028E F8 0C            [12]  736 	ldhl	sp,	#12
      000290 77               [ 8]  737 	ld	(hl), a
      000291 E5               [16]  738 	push	hl
      000292 21 02 00         [12]  739 	ld	hl, #2
      000295 39               [ 8]  740 	add	hl, sp
      000296 5D               [ 4]  741 	ld	e, l
      000297 54               [ 4]  742 	ld	d, h
      000298 E1               [12]  743 	pop	hl
      000299 F8 16            [12]  744 	ldhl	sp,	#22
      00029B 2A               [ 8]  745 	ld	a,	(hl+)
      00029C 66               [ 8]  746 	ld	h, (hl)
      00029D 6F               [ 4]  747 	ld	l, a
      00029E 19               [ 8]  748 	add	hl, de
      00029F 4D               [ 4]  749 	ld	c, l
      0002A0 44               [ 4]  750 	ld	b, h
      0002A1 0A               [ 8]  751 	ld	a, (bc)
      0002A2 4F               [ 4]  752 	ld	c, a
      0002A3 06 00            [ 8]  753 	ld	b, #0x00
      0002A5 21 A8 FF         [12]  754 	ld	hl, #0xffa8
      0002A8 09               [ 8]  755 	add	hl, bc
      0002A9 E5               [16]  756 	push	hl
      0002AA 7D               [ 4]  757 	ld	a, l
      0002AB F8 0F            [12]  758 	ldhl	sp,	#15
      0002AD 77               [ 8]  759 	ld	(hl), a
      0002AE E1               [12]  760 	pop	hl
      0002AF 7C               [ 4]  761 	ld	a, h
      0002B0 F8 0E            [12]  762 	ldhl	sp,	#14
      0002B2 32               [ 8]  763 	ld	(hl-), a
      0002B3 2A               [ 8]  764 	ld	a, (hl+)
      0002B4 23               [ 8]  765 	inc	hl
      0002B5 32               [ 8]  766 	ld	(hl-), a
      0002B6 2A               [ 8]  767 	ld	a, (hl+)
      0002B7 23               [ 8]  768 	inc	hl
      0002B8 32               [ 8]  769 	ld	(hl-), a
      0002B9 2B               [ 8]  770 	dec	hl
      0002BA CB 7E            [12]  771 	bit	7, (hl)
      0002BC 28 0E            [12]  772 	jr	Z, 00138$
      0002BE 21 AB FF         [12]  773 	ld	hl, #0xffab
      0002C1 09               [ 8]  774 	add	hl, bc
      0002C2 E5               [16]  775 	push	hl
      0002C3 7D               [ 4]  776 	ld	a, l
      0002C4 F8 11            [12]  777 	ldhl	sp,	#17
      0002C6 77               [ 8]  778 	ld	(hl), a
      0002C7 E1               [12]  779 	pop	hl
      0002C8 7C               [ 4]  780 	ld	a, h
      0002C9 F8 10            [12]  781 	ldhl	sp,	#16
      0002CB 77               [ 8]  782 	ld	(hl), a
      0002CC                        783 00138$:
      0002CC F8 0F            [12]  784 	ldhl	sp,#15
      0002CE 2A               [ 8]  785 	ld	a, (hl+)
      0002CF 4F               [ 4]  786 	ld	c, a
      0002D0 46               [ 8]  787 	ld	b, (hl)
      0002D1 CB 28            [ 8]  788 	sra	b
      0002D3 CB 19            [ 8]  789 	rr	c
      0002D5 CB 28            [ 8]  790 	sra	b
      0002D7 CB 19            [ 8]  791 	rr	c
      0002D9 69               [ 4]  792 	ld	l, c
      0002DA 60               [ 4]  793 	ld	h, b
      0002DB 29               [ 8]  794 	add	hl, hl
      0002DC 29               [ 8]  795 	add	hl, hl
      0002DD 29               [ 8]  796 	add	hl, hl
      0002DE 09               [ 8]  797 	add	hl, bc
      0002DF 11r00r00         [12]  798 	ld	de, #_materials
      0002E2 19               [ 8]  799 	add	hl, de
      0002E3 01 08 00         [12]  800 	ld	bc, #0x0008
      0002E6 09               [ 8]  801 	add	hl, bc
      0002E7 4E               [ 8]  802 	ld	c, (hl)
      0002E8 F8 0B            [12]  803 	ldhl	sp,	#11
      0002EA 2A               [ 8]  804 	ld	a,	(hl+)
      0002EB 66               [ 8]  805 	ld	h, (hl)
      0002EC 6F               [ 4]  806 	ld	l, a
      0002ED 71               [ 8]  807 	ld	(hl), c
      0002EE F8 16            [12]  808 	ldhl	sp,	#22
      0002F0 34               [12]  809 	inc	(hl)
      0002F1 C2r5Br02         [16]  810 	jp	NZ,00128$
      0002F4 23               [ 8]  811 	inc	hl
      0002F5 34               [12]  812 	inc	(hl)
      0002F6 C3r5Br02         [16]  813 	jp	00128$
      0002F9                        814 00115$:
                           0002F9   815 	C$map.c$104$5_0$263	= .
                                    816 	.globl	C$map.c$104$5_0$263
                                    817 ;src/map.c:104: VBK_REG = 0;
      0002F9 AF               [ 4]  818 	xor	a, a
      0002FA E0r00            [12]  819 	ldh	(_VBK_REG + 0), a
                           0002FC   820 	C$map.c$105$5_0$263	= .
                                    821 	.globl	C$map.c$105$5_0$263
                                    822 ;src/map.c:105: set_bkg_tiles(2 * x, 2 * y, 2, 1, tile_array);
      0002FC F8 15            [12]  823 	ldhl	sp,	#21
      0002FE 7E               [ 8]  824 	ld	a, (hl)
      0002FF 87               [ 4]  825 	add	a, a
      000300 47               [ 4]  826 	ld	b, a
      000301 21 00 00         [12]  827 	ld	hl, #0
      000304 39               [ 8]  828 	add	hl, sp
      000305 E5               [16]  829 	push	hl
      000306 21 02 01         [12]  830 	ld	hl, #0x102
      000309 E5               [16]  831 	push	hl
      00030A F8 0E            [12]  832 	ldhl	sp,	#14
      00030C 7E               [ 8]  833 	ld	a, (hl)
      00030D F5               [16]  834 	push	af
      00030E 33               [ 8]  835 	inc	sp
      00030F C5               [16]  836 	push	bc
      000310 33               [ 8]  837 	inc	sp
      000311 CDr00r00         [24]  838 	call	_set_bkg_tiles
      000314 E8 06            [16]  839 	add	sp, #6
                           000316   840 	C$map.c$106$5_0$263	= .
                                    841 	.globl	C$map.c$106$5_0$263
                                    842 ;src/map.c:106: set_bkg_tiles(2 * x, 2 * y + 1, 2, 1, tile_array + 2);
      000316 F8 14            [12]  843 	ldhl	sp,	#20
      000318 7E               [ 8]  844 	ld	a, (hl)
      000319 87               [ 4]  845 	add	a, a
      00031A 4F               [ 4]  846 	ld	c, a
      00031B 0C               [ 4]  847 	inc	c
      00031C 21 02 00         [12]  848 	ld	hl, #2
      00031F 39               [ 8]  849 	add	hl, sp
      000320 E5               [16]  850 	push	hl
      000321 21 02 01         [12]  851 	ld	hl, #0x102
      000324 E5               [16]  852 	push	hl
      000325 79               [ 4]  853 	ld	a, c
      000326 F5               [16]  854 	push	af
      000327 33               [ 8]  855 	inc	sp
      000328 C5               [16]  856 	push	bc
      000329 33               [ 8]  857 	inc	sp
      00032A CDr00r00         [24]  858 	call	_set_bkg_tiles
      00032D E8 06            [16]  859 	add	sp, #6
                           00032F   860 	C$map.c$109$5_0$263	= .
                                    861 	.globl	C$map.c$109$5_0$263
                                    862 ;src/map.c:109: VBK_REG = 1;
      00032F 3E 01            [ 8]  863 	ld	a, #0x01
      000331 E0r00            [12]  864 	ldh	(_VBK_REG + 0), a
                           000333   865 	C$map.c$110$5_0$263	= .
                                    866 	.globl	C$map.c$110$5_0$263
                                    867 ;src/map.c:110: set_bkg_tiles(2 * x, 2 * y, 2, 1, palette_array);
      000333 21 04 00         [12]  868 	ld	hl, #4
      000336 39               [ 8]  869 	add	hl, sp
      000337 E5               [16]  870 	push	hl
      000338 21 02 01         [12]  871 	ld	hl, #0x102
      00033B E5               [16]  872 	push	hl
      00033C F8 0E            [12]  873 	ldhl	sp,	#14
      00033E 7E               [ 8]  874 	ld	a, (hl)
      00033F F5               [16]  875 	push	af
      000340 33               [ 8]  876 	inc	sp
      000341 C5               [16]  877 	push	bc
      000342 33               [ 8]  878 	inc	sp
      000343 CDr00r00         [24]  879 	call	_set_bkg_tiles
      000346 E8 06            [16]  880 	add	sp, #6
                           000348   881 	C$map.c$111$5_0$263	= .
                                    882 	.globl	C$map.c$111$5_0$263
                                    883 ;src/map.c:111: set_bkg_tiles(2 * x, 2 * y + 1, 2, 1, palette_array + 2);
      000348 21 06 00         [12]  884 	ld	hl, #6
      00034B 39               [ 8]  885 	add	hl, sp
      00034C E5               [16]  886 	push	hl
      00034D 21 02 01         [12]  887 	ld	hl, #0x102
      000350 E5               [16]  888 	push	hl
      000351 79               [ 4]  889 	ld	a, c
      000352 F5               [16]  890 	push	af
      000353 33               [ 8]  891 	inc	sp
      000354 C5               [16]  892 	push	bc
      000355 33               [ 8]  893 	inc	sp
      000356 CDr00r00         [24]  894 	call	_set_bkg_tiles
      000359 E8 06            [16]  895 	add	sp, #6
                           00035B   896 	C$map.c$114$5_0$263	= .
                                    897 	.globl	C$map.c$114$5_0$263
                                    898 ;src/map.c:114: VBK_REG = 0;
      00035B AF               [ 4]  899 	xor	a, a
      00035C E0r00            [12]  900 	ldh	(_VBK_REG + 0), a
                           00035E   901 	C$map.c$80$4_0$262	= .
                                    902 	.globl	C$map.c$80$4_0$262
                                    903 ;src/map.c:80: for (uint8_t x = x1; x < x1 + c; x++) {
      00035E F8 15            [12]  904 	ldhl	sp,	#21
      000360 34               [12]  905 	inc	(hl)
      000361 C3rE3r00         [16]  906 	jp	00131$
      000364                        907 00135$:
                           000364   908 	C$map.c$79$2_0$260	= .
                                    909 	.globl	C$map.c$79$2_0$260
                                    910 ;src/map.c:79: for (uint8_t y = y1; y < y1 + r; y++) {
      000364 F8 14            [12]  911 	ldhl	sp,	#20
      000366 34               [12]  912 	inc	(hl)
      000367 C3rA9r00         [16]  913 	jp	00134$
      00036A                        914 00136$:
                           00036A   915 	C$map.c$117$2_0$260	= .
                                    916 	.globl	C$map.c$117$2_0$260
                                    917 ;src/map.c:117: }
      00036A E8 18            [16]  918 	add	sp, #24
      00036C E1               [12]  919 	pop	hl
      00036D E8 03            [16]  920 	add	sp, #3
      00036F E9               [ 4]  921 	jp	(hl)
                           000370   922 	G$spawn_bkg_row$0$0	= .
                                    923 	.globl	G$spawn_bkg_row$0$0
                           000370   924 	C$map.c$120$2_0$274	= .
                                    925 	.globl	C$map.c$120$2_0$274
                                    926 ;src/map.c:120: void spawn_bkg_row(void) {
                                    927 ;	---------------------------------
                                    928 ; Function spawn_bkg_row
                                    929 ; ---------------------------------
      000370                        930 _spawn_bkg_row::
                           000370   931 	C$map.c$121$1_0$274	= .
                                    932 	.globl	C$map.c$121$1_0$274
                                    933 ;src/map.c:121: if (depth > 3) {
      000370 3E 03            [ 8]  934 	ld	a, #0x03
      000372 21r00r00         [12]  935 	ld	hl, #_depth
      000375 96               [ 8]  936 	sub	a, (hl)
      000376 D0               [20]  937 	ret	NC
                           000377   938 	C$map.c$122$2_0$275	= .
                                    939 	.globl	C$map.c$122$2_0$275
                                    940 ;src/map.c:122: if (depth - depth_offset == (8 - THRESHOLD - BOTTOM)) set_4bkg_tiles(level_array, 0, depth + 4, 1, 16);
      000377 7E               [ 8]  941 	ld	a, (hl)
      000378 0E 00            [ 8]  942 	ld	c, #0x00
      00037A 21r00r00         [12]  943 	ld	hl, #_depth_offset
      00037D 5E               [ 8]  944 	ld	e, (hl)
      00037E 06 00            [ 8]  945 	ld	b, #0x00
      000380 93               [ 4]  946 	sub	a, e
      000381 5F               [ 4]  947 	ld	e, a
      000382 79               [ 4]  948 	ld	a, c
      000383 98               [ 4]  949 	sbc	a, b
      000384 57               [ 4]  950 	ld	d, a
      000385 21r00r00         [12]  951 	ld	hl, #_depth
      000388 4E               [ 8]  952 	ld	c, (hl)
      000389 7B               [ 4]  953 	ld	a, e
      00038A D6 06            [ 8]  954 	sub	a, #0x06
      00038C B2               [ 4]  955 	or	a, d
      00038D 20 13            [12]  956 	jr	NZ, 00104$
      00038F 0C               [ 4]  957 	inc	c
      000390 0C               [ 4]  958 	inc	c
      000391 0C               [ 4]  959 	inc	c
      000392 0C               [ 4]  960 	inc	c
      000393 21 01 10         [12]  961 	ld	hl, #0x1001
      000396 E5               [16]  962 	push	hl
      000397 79               [ 4]  963 	ld	a, c
      000398 F5               [16]  964 	push	af
      000399 33               [ 8]  965 	inc	sp
      00039A AF               [ 4]  966 	xor	a, a
      00039B 11r00r00         [12]  967 	ld	de, #_level_array
      00039E CDr99r00         [24]  968 	call	_set_4bkg_tiles
      0003A1 C9               [16]  969 	ret
      0003A2                        970 00104$:
                           0003A2   971 	C$map.c$123$2_0$275	= .
                                    972 	.globl	C$map.c$123$2_0$275
                                    973 ;src/map.c:123: else if (depth - depth_offset == THRESHOLD) set_4bkg_tiles(level_array, 0, depth - 4, 1, 16);
      0003A2 7B               [ 4]  974 	ld	a, e
      0003A3 D6 02            [ 8]  975 	sub	a, #0x02
      0003A5 B2               [ 4]  976 	or	a, d
      0003A6 C0               [20]  977 	ret	NZ
      0003A7 79               [ 4]  978 	ld	a, c
      0003A8 C6 FC            [ 8]  979 	add	a, #0xfc
      0003AA 47               [ 4]  980 	ld	b, a
      0003AB 21 01 10         [12]  981 	ld	hl, #0x1001
      0003AE E5               [16]  982 	push	hl
      0003AF C5               [16]  983 	push	bc
      0003B0 33               [ 8]  984 	inc	sp
      0003B1 AF               [ 4]  985 	xor	a, a
      0003B2 11r00r00         [12]  986 	ld	de, #_level_array
      0003B5 CDr99r00         [24]  987 	call	_set_4bkg_tiles
                           0003B8   988 	C$map.c$125$1_0$274	= .
                                    989 	.globl	C$map.c$125$1_0$274
                                    990 ;src/map.c:125: }
                           0003B8   991 	C$map.c$125$1_0$274	= .
                                    992 	.globl	C$map.c$125$1_0$274
                           0003B8   993 	XG$spawn_bkg_row$0$0	= .
                                    994 	.globl	XG$spawn_bkg_row$0$0
      0003B8 C9               [16]  995 	ret
                           0003B9   996 	G$clear_4bkg_tiles$0$0	= .
                                    997 	.globl	G$clear_4bkg_tiles$0$0
                           0003B9   998 	C$map.c$134$1_0$277	= .
                                    999 	.globl	C$map.c$134$1_0$277
                                   1000 ;src/map.c:134: void clear_4bkg_tiles(uint8_t array[][16], uint8_t x, uint8_t y) {
                                   1001 ;	---------------------------------
                                   1002 ; Function clear_4bkg_tiles
                                   1003 ; ---------------------------------
      0003B9                       1004 _clear_4bkg_tiles::
      0003B9 4F               [ 4] 1005 	ld	c, a
                           0003BA  1006 	C$map.c$135$1_0$277	= .
                                   1007 	.globl	C$map.c$135$1_0$277
                                   1008 ;src/map.c:135: array[y][x] = 0; // Clear the tile in the array
      0003BA F8 02            [12] 1009 	ldhl	sp,	#2
      0003BC 6E               [ 8] 1010 	ld	l, (hl)
      0003BD 26 00            [ 8] 1011 	ld	h, #0x00
      0003BF 29               [ 8] 1012 	add	hl, hl
      0003C0 29               [ 8] 1013 	add	hl, hl
      0003C1 29               [ 8] 1014 	add	hl, hl
      0003C2 29               [ 8] 1015 	add	hl, hl
      0003C3 19               [ 8] 1016 	add	hl, de
      0003C4 06 00            [ 8] 1017 	ld	b, #0x00
      0003C6 09               [ 8] 1018 	add	hl, bc
      0003C7 36 00            [12] 1019 	ld	(hl), #0x00
                           0003C9  1020 	C$map.c$136$1_0$277	= .
                                   1021 	.globl	C$map.c$136$1_0$277
                                   1022 ;src/map.c:136: set_4bkg_tiles(array, x, y, 1, 1); // Update the background
      0003C9 21 01 01         [12] 1023 	ld	hl, #0x101
      0003CC E5               [16] 1024 	push	hl
      0003CD F8 04            [12] 1025 	ldhl	sp,	#4
      0003CF 7E               [ 8] 1026 	ld	a, (hl)
      0003D0 F5               [16] 1027 	push	af
      0003D1 33               [ 8] 1028 	inc	sp
      0003D2 79               [ 4] 1029 	ld	a, c
      0003D3 CDr99r00         [24] 1030 	call	_set_4bkg_tiles
                           0003D6  1031 	C$map.c$137$1_0$277	= .
                                   1032 	.globl	C$map.c$137$1_0$277
                                   1033 ;src/map.c:137: }
      0003D6 E1               [12] 1034 	pop	hl
      0003D7 33               [ 8] 1035 	inc	sp
      0003D8 E9               [ 4] 1036 	jp	(hl)
                           0003D9  1037 	G$add_block$0$0	= .
                                   1038 	.globl	G$add_block$0$0
                           0003D9  1039 	C$map.c$149$1_0$279	= .
                                   1040 	.globl	C$map.c$149$1_0$279
                                   1041 ;src/map.c:149: void add_block(uint8_t array[][16], uint8_t x, uint8_t y, uint8_t type) {
                                   1042 ;	---------------------------------
                                   1043 ; Function add_block
                                   1044 ; ---------------------------------
      0003D9                       1045 _add_block::
      0003D9 4F               [ 4] 1046 	ld	c, a
                           0003DA  1047 	C$map.c$150$1_0$279	= .
                                   1048 	.globl	C$map.c$150$1_0$279
                                   1049 ;src/map.c:150: array[y][x] = type;
      0003DA F8 02            [12] 1050 	ldhl	sp,	#2
      0003DC 6E               [ 8] 1051 	ld	l, (hl)
      0003DD 26 00            [ 8] 1052 	ld	h, #0x00
      0003DF 29               [ 8] 1053 	add	hl, hl
      0003E0 29               [ 8] 1054 	add	hl, hl
      0003E1 29               [ 8] 1055 	add	hl, hl
      0003E2 29               [ 8] 1056 	add	hl, hl
      0003E3 19               [ 8] 1057 	add	hl, de
      0003E4 54               [ 4] 1058 	ld	d, h
      0003E5 7D               [ 4] 1059 	ld	a, l
      0003E6 81               [ 4] 1060 	add	a, c
      0003E7 5F               [ 4] 1061 	ld	e, a
      0003E8 30 01            [12] 1062 	jr	NC, 00103$
      0003EA 14               [ 4] 1063 	inc	d
      0003EB                       1064 00103$:
      0003EB F8 03            [12] 1065 	ldhl	sp,	#3
                           0003ED  1066 	C$map.c$151$1_0$279	= .
                                   1067 	.globl	C$map.c$151$1_0$279
                                   1068 ;src/map.c:151: set_4bkg_tiles(level_array, x, y, 1, 1);
      0003ED 3A               [ 8] 1069 	ld	a, (hl-)
      0003EE 12               [ 8] 1070 	ld	(de), a
      0003EF 11 01 01         [12] 1071 	ld	de, #0x101
      0003F2 D5               [16] 1072 	push	de
      0003F3 7E               [ 8] 1073 	ld	a, (hl)
      0003F4 F5               [16] 1074 	push	af
      0003F5 33               [ 8] 1075 	inc	sp
      0003F6 79               [ 4] 1076 	ld	a, c
      0003F7 11r00r00         [12] 1077 	ld	de, #_level_array
      0003FA CDr99r00         [24] 1078 	call	_set_4bkg_tiles
                           0003FD  1079 	C$map.c$152$1_0$279	= .
                                   1080 	.globl	C$map.c$152$1_0$279
                                   1081 ;src/map.c:152: }
      0003FD E1               [12] 1082 	pop	hl
      0003FE F1               [12] 1083 	pop	af
      0003FF E9               [ 4] 1084 	jp	(hl)
                           000400  1085 	G$progressbar$0$0	= .
                                   1086 	.globl	G$progressbar$0$0
                           000400  1087 	C$map.c$164$1_0$282	= .
                                   1088 	.globl	C$map.c$164$1_0$282
                                   1089 ;src/map.c:164: void progressbar(int16_t current_value, int16_t max_value, uint8_t digits, uint8_t tilestart, uint8_t x, uint8_t y) {
                                   1090 ;	---------------------------------
                                   1091 ; Function progressbar
                                   1092 ; ---------------------------------
      000400                       1093 _progressbar::
      000400 E8 F8            [16] 1094 	add	sp, #-8
      000402 F8 05            [12] 1095 	ldhl	sp,	#5
      000404 79               [ 4] 1096 	ld	a, c
      000405 22               [ 8] 1097 	ld	(hl+), a
      000406 70               [ 8] 1098 	ld	(hl), b
                           000407  1099 	C$map.c$166$1_0$281	= .
                                   1100 	.globl	C$map.c$166$1_0$281
                                   1101 ;src/map.c:166: uint8_t total_pixels = digits * 8;
      000407 F8 0A            [12] 1102 	ldhl	sp,	#10
      000409 7E               [ 8] 1103 	ld	a, (hl)
      00040A F8 00            [12] 1104 	ldhl	sp,	#0
      00040C 77               [ 8] 1105 	ld	(hl), a
      00040D 7E               [ 8] 1106 	ld	a, (hl)
      00040E 87               [ 4] 1107 	add	a, a
      00040F 87               [ 4] 1108 	add	a, a
      000410 87               [ 4] 1109 	add	a, a
                           000411  1110 	C$map.c$167$1_0$281	= .
                                   1111 	.globl	C$map.c$167$1_0$281
                                   1112 ;src/map.c:167: uint16_t pixels_to_fill = (current_value * total_pixels) / max_value;
      000411 4F               [ 4] 1113 	ld	c, a
      000412 06 00            [ 8] 1114 	ld	b, #0x00
      000414 CDr00r00         [24] 1115 	call	__mulint
      000417 59               [ 4] 1116 	ld	e, c
      000418 50               [ 4] 1117 	ld	d, b
      000419 F8 05            [12] 1118 	ldhl	sp,	#5
      00041B 2A               [ 8] 1119 	ld	a, (hl+)
      00041C 4F               [ 4] 1120 	ld	c, a
      00041D 46               [ 8] 1121 	ld	b, (hl)
      00041E CDr00r00         [24] 1122 	call	__divsint
                           000421  1123 	C$map.c$169$5_0$285	= .
                                   1124 	.globl	C$map.c$169$5_0$285
                                   1125 ;src/map.c:169: for (uint8_t i = 0; i < digits; i++) {
      000421 F8 00            [12] 1126 	ldhl	sp,	#0
      000423 7E               [ 8] 1127 	ld	a, (hl)
      000424 3D               [ 4] 1128 	dec	a
      000425 3E 01            [ 8] 1129 	ld	a, #0x01
      000427 28 01            [12] 1130 	jr	Z, 00185$
      000429 AF               [ 4] 1131 	xor	a, a
      00042A                       1132 00185$:
      00042A F8 01            [12] 1133 	ldhl	sp,	#1
      00042C 77               [ 8] 1134 	ld	(hl), a
      00042D F8 0D            [12] 1135 	ldhl	sp,	#13
      00042F 7E               [ 8] 1136 	ld	a, (hl)
      000430 F8 02            [12] 1137 	ldhl	sp,	#2
      000432 77               [ 8] 1138 	ld	(hl), a
      000433 F8 07            [12] 1139 	ldhl	sp,	#7
      000435 36 00            [12] 1140 	ld	(hl), #0x00
      000437                       1141 00122$:
      000437 F8 07            [12] 1142 	ldhl	sp,	#7
      000439 7E               [ 8] 1143 	ld	a, (hl)
      00043A F8 00            [12] 1144 	ldhl	sp,	#0
      00043C 96               [ 8] 1145 	sub	a, (hl)
      00043D D2r1Cr05         [16] 1146 	jp	NC, 00124$
                           000440  1147 	C$map.c$170$4_0$283	= .
                                   1148 	.globl	C$map.c$170$4_0$283
                                   1149 ;src/map.c:170: uint8_t tile_index = SPRITE_TILE_EMPTY; // Default to empty
      000440 1E 00            [ 8] 1150 	ld	e, #0x00
                           000442  1151 	C$map.c$172$3_0$283	= .
                                   1152 	.globl	C$map.c$172$3_0$283
                                   1153 ;src/map.c:172: uint8_t effective_pixels = (pixels_to_fill > sprite_pixels) ? sprite_pixels : pixels_to_fill;
      000442 3E 08            [ 8] 1154 	ld	a, #0x08
      000444 B9               [ 4] 1155 	cp	a, c
      000445 3E 00            [ 8] 1156 	ld	a, #0x00
      000447 98               [ 4] 1157 	sbc	a, b
      000448 30 04            [12] 1158 	jr	NC, 00126$
      00044A 16 08            [ 8] 1159 	ld	d, #0x08
      00044C 18 01            [12] 1160 	jr	00127$
      00044E                       1161 00126$:
      00044E 51               [ 4] 1162 	ld	d, c
      00044F                       1163 00127$:
                           00044F  1164 	C$map.c$175$3_0$283	= .
                                   1165 	.globl	C$map.c$175$3_0$283
                                   1166 ;src/map.c:175: pixels_to_fill -= effective_pixels;
      00044F 6A               [ 4] 1167 	ld	l, d
                                   1168 ;	spillPairReg hl
                                   1169 ;	spillPairReg hl
      000450 26 00            [ 8] 1170 	ld	h, #0x00
                                   1171 ;	spillPairReg hl
                                   1172 ;	spillPairReg hl
      000452 79               [ 4] 1173 	ld	a, c
      000453 95               [ 4] 1174 	sub	a, l
      000454 4F               [ 4] 1175 	ld	c, a
      000455 78               [ 4] 1176 	ld	a, b
      000456 9C               [ 4] 1177 	sbc	a, h
      000457 47               [ 4] 1178 	ld	b, a
                           000458  1179 	C$map.c$178$3_0$283	= .
                                   1180 	.globl	C$map.c$178$3_0$283
                                   1181 ;src/map.c:178: switch (effective_pixels) {
      000458 3E 08            [ 8] 1182 	ld	a, #0x08
      00045A 92               [ 4] 1183 	sub	a, d
      00045B DArDEr04         [16] 1184 	jp	C, 00117$
      00045E 5A               [ 4] 1185 	ld	e, d
      00045F 16 00            [ 8] 1186 	ld	d, #0x00
      000461 21r68r04         [12] 1187 	ld	hl, #00186$
      000464 19               [ 8] 1188 	add	hl, de
      000465 19               [ 8] 1189 	add	hl, de
      000466 19               [ 8] 1190 	add	hl, de
      000467 E9               [ 4] 1191 	jp	(hl)
      000468                       1192 00186$:
      000468 C3r83r04         [16] 1193 	jp	00101$
      00046B C3r87r04         [16] 1194 	jp	00102$
      00046E C3r8Br04         [16] 1195 	jp	00103$
      000471 C3r8Fr04         [16] 1196 	jp	00104$
      000474 C3r93r04         [16] 1197 	jp	00105$
      000477 C3r97r04         [16] 1198 	jp	00106$
      00047A C3r9Br04         [16] 1199 	jp	00107$
      00047D C3r9Fr04         [16] 1200 	jp	00108$
      000480 C3rA3r04         [16] 1201 	jp	00109$
                           000483  1202 	C$map.c$179$4_0$284	= .
                                   1203 	.globl	C$map.c$179$4_0$284
                                   1204 ;src/map.c:179: case 0: tile_index = SPRITE_TILE_EMPTY; break;
      000483                       1205 00101$:
      000483 1E 00            [ 8] 1206 	ld	e, #0x00
      000485 18 57            [12] 1207 	jr	00117$
                           000487  1208 	C$map.c$180$4_0$284	= .
                                   1209 	.globl	C$map.c$180$4_0$284
                                   1210 ;src/map.c:180: case 1: tile_index = SPRITE_TILE_1_8; break;
      000487                       1211 00102$:
      000487 1E 20            [ 8] 1212 	ld	e, #0x20
      000489 18 53            [12] 1213 	jr	00117$
                           00048B  1214 	C$map.c$181$4_0$284	= .
                                   1215 	.globl	C$map.c$181$4_0$284
                                   1216 ;src/map.c:181: case 2: tile_index = SPRITE_TILE_2_8; break;
      00048B                       1217 00103$:
      00048B 1E 21            [ 8] 1218 	ld	e, #0x21
      00048D 18 4F            [12] 1219 	jr	00117$
                           00048F  1220 	C$map.c$182$4_0$284	= .
                                   1221 	.globl	C$map.c$182$4_0$284
                                   1222 ;src/map.c:182: case 3: tile_index = SPRITE_TILE_3_8; break;
      00048F                       1223 00104$:
      00048F 1E 22            [ 8] 1224 	ld	e, #0x22
      000491 18 4B            [12] 1225 	jr	00117$
                           000493  1226 	C$map.c$183$4_0$284	= .
                                   1227 	.globl	C$map.c$183$4_0$284
                                   1228 ;src/map.c:183: case 4: tile_index = SPRITE_TILE_4_8; break;
      000493                       1229 00105$:
      000493 1E 23            [ 8] 1230 	ld	e, #0x23
      000495 18 47            [12] 1231 	jr	00117$
                           000497  1232 	C$map.c$184$4_0$284	= .
                                   1233 	.globl	C$map.c$184$4_0$284
                                   1234 ;src/map.c:184: case 5: tile_index = SPRITE_TILE_5_8; break;
      000497                       1235 00106$:
      000497 1E 24            [ 8] 1236 	ld	e, #0x24
      000499 18 43            [12] 1237 	jr	00117$
                           00049B  1238 	C$map.c$185$4_0$284	= .
                                   1239 	.globl	C$map.c$185$4_0$284
                                   1240 ;src/map.c:185: case 6: tile_index = SPRITE_TILE_6_8; break;
      00049B                       1241 00107$:
      00049B 1E 25            [ 8] 1242 	ld	e, #0x25
      00049D 18 3F            [12] 1243 	jr	00117$
                           00049F  1244 	C$map.c$186$4_0$284	= .
                                   1245 	.globl	C$map.c$186$4_0$284
                                   1246 ;src/map.c:186: case 7: tile_index = SPRITE_TILE_7_8; break;
      00049F                       1247 00108$:
      00049F 1E 26            [ 8] 1248 	ld	e, #0x26
      0004A1 18 3B            [12] 1249 	jr	00117$
                           0004A3  1250 	C$map.c$187$4_0$284	= .
                                   1251 	.globl	C$map.c$187$4_0$284
                                   1252 ;src/map.c:187: case 8: 
      0004A3                       1253 00109$:
                           0004A3  1254 	C$map.c$188$4_0$284	= .
                                   1255 	.globl	C$map.c$188$4_0$284
                                   1256 ;src/map.c:188: if (i == 0) { // First sprite
      0004A3 F8 07            [12] 1257 	ldhl	sp,	#7
      0004A5 7E               [ 8] 1258 	ld	a, (hl)
      0004A6 B7               [ 4] 1259 	or	a, a
      0004A7 20 14            [12] 1260 	jr	NZ, 00115$
                           0004A9  1261 	C$map.c$189$5_0$285	= .
                                   1262 	.globl	C$map.c$189$5_0$285
                                   1263 ;src/map.c:189: tile_index = (digits == 1 || pixels_to_fill == 0) ? SPRITE_TILE_END : SPRITE_TILE_MID;
      0004A9 F8 01            [12] 1264 	ldhl	sp,	#1
      0004AB CB 46            [12] 1265 	bit	0, (hl)
      0004AD 20 04            [12] 1266 	jr	NZ, 00131$
      0004AF 78               [ 4] 1267 	ld	a, b
      0004B0 B1               [ 4] 1268 	or	a, c
      0004B1 20 05            [12] 1269 	jr	NZ, 00128$
      0004B3                       1270 00131$:
      0004B3 11 27 00         [12] 1271 	ld	de, #0x0027
      0004B6 18 26            [12] 1272 	jr	00117$
      0004B8                       1273 00128$:
      0004B8 11 28 00         [12] 1274 	ld	de, #0x0028
      0004BB 18 21            [12] 1275 	jr	00117$
      0004BD                       1276 00115$:
                           0004BD  1277 	C$map.c$190$4_0$284	= .
                                   1278 	.globl	C$map.c$190$4_0$284
                                   1279 ;src/map.c:190: } else if (i == digits - 1 || pixels_to_fill == 0) { // Last sprite or no more pixels to fill
      0004BD F8 00            [12] 1280 	ldhl	sp,	#0
      0004BF 5E               [ 8] 1281 	ld	e, (hl)
      0004C0 16 00            [ 8] 1282 	ld	d, #0x00
      0004C2 1B               [ 8] 1283 	dec	de
      0004C3 F8 07            [12] 1284 	ldhl	sp,	#7
      0004C5 7E               [ 8] 1285 	ld	a, (hl)
      0004C6 F8 03            [12] 1286 	ldhl	sp,	#3
      0004C8 22               [ 8] 1287 	ld	(hl+), a
      0004C9 AF               [ 4] 1288 	xor	a, a
      0004CA 32               [ 8] 1289 	ld	(hl-), a
      0004CB 7E               [ 8] 1290 	ld	a, (hl)
      0004CC 93               [ 4] 1291 	sub	a, e
      0004CD 20 05            [12] 1292 	jr	NZ, 00187$
      0004CF 23               [ 8] 1293 	inc	hl
      0004D0 7E               [ 8] 1294 	ld	a, (hl)
      0004D1 92               [ 4] 1295 	sub	a, d
      0004D2 28 04            [12] 1296 	jr	Z, 00110$
      0004D4                       1297 00187$:
      0004D4 78               [ 4] 1298 	ld	a, b
      0004D5 B1               [ 4] 1299 	or	a, c
      0004D6 20 04            [12] 1300 	jr	NZ, 00111$
      0004D8                       1301 00110$:
                           0004D8  1302 	C$map.c$191$5_0$286	= .
                                   1303 	.globl	C$map.c$191$5_0$286
                                   1304 ;src/map.c:191: tile_index = SPRITE_TILE_END;
      0004D8 1E 27            [ 8] 1305 	ld	e, #0x27
      0004DA 18 02            [12] 1306 	jr	00117$
      0004DC                       1307 00111$:
                           0004DC  1308 	C$map.c$193$5_0$287	= .
                                   1309 	.globl	C$map.c$193$5_0$287
                                   1310 ;src/map.c:193: tile_index = SPRITE_TILE_MID;
      0004DC 1E 28            [ 8] 1311 	ld	e, #0x28
                           0004DE  1312 	C$map.c$196$3_0$283	= .
                                   1313 	.globl	C$map.c$196$3_0$283
                                   1314 ;src/map.c:196: }
      0004DE                       1315 00117$:
                                   1316 ;src/map.c:199: set_sprite_tile(tilestart + i, tile_index);
      0004DE F8 0B            [12] 1317 	ldhl	sp,	#11
      0004E0 7E               [ 8] 1318 	ld	a, (hl)
      0004E1 F8 07            [12] 1319 	ldhl	sp,	#7
      0004E3 86               [ 8] 1320 	add	a, (hl)
      0004E4 F8 03            [12] 1321 	ldhl	sp,	#3
      0004E6 77               [ 8] 1322 	ld	(hl), a
      0004E7 56               [ 8] 1323 	ld	d, (hl)
                                   1324 ;/usr/local/opt/gbdk/include/gb/gb.h:1804: shadow_OAM[nb].tile=tile;
      0004E8 26 00            [ 8] 1325 	ld	h, #0x00
                                   1326 ;	spillPairReg hl
                                   1327 ;	spillPairReg hl
      0004EA 6A               [ 4] 1328 	ld	l, d
      0004EB 29               [ 8] 1329 	add	hl, hl
      0004EC 29               [ 8] 1330 	add	hl, hl
      0004ED D5               [16] 1331 	push	de
      0004EE 11r00r00         [12] 1332 	ld	de, #_shadow_OAM
      0004F1 19               [ 8] 1333 	add	hl, de
      0004F2 23               [ 8] 1334 	inc	hl
      0004F3 23               [ 8] 1335 	inc	hl
      0004F4 D1               [12] 1336 	pop	de
      0004F5 73               [ 8] 1337 	ld	(hl), e
                                   1338 ;src/map.c:200: move_sprite(tilestart + i, x + i * 8, y);
      0004F6 F8 07            [12] 1339 	ldhl	sp,	#7
      0004F8 7E               [ 8] 1340 	ld	a, (hl)
      0004F9 87               [ 4] 1341 	add	a, a
      0004FA 87               [ 4] 1342 	add	a, a
      0004FB 87               [ 4] 1343 	add	a, a
      0004FC F8 0C            [12] 1344 	ldhl	sp,	#12
      0004FE 5E               [ 8] 1345 	ld	e, (hl)
      0004FF 83               [ 4] 1346 	add	a, e
      000500 F8 04            [12] 1347 	ldhl	sp,	#4
                                   1348 ;/usr/local/opt/gbdk/include/gb/gb.h:1877: OAM_item_t * itm = &shadow_OAM[nb];
      000502 32               [ 8] 1349 	ld	(hl-), a
      000503 6E               [ 8] 1350 	ld	l, (hl)
      000504 26 00            [ 8] 1351 	ld	h, #0x00
      000506 29               [ 8] 1352 	add	hl, hl
      000507 29               [ 8] 1353 	add	hl, hl
      000508 11r00r00         [12] 1354 	ld	de, #_shadow_OAM
      00050B 19               [ 8] 1355 	add	hl, de
      00050C 5D               [ 4] 1356 	ld	e, l
      00050D 54               [ 4] 1357 	ld	d, h
                                   1358 ;/usr/local/opt/gbdk/include/gb/gb.h:1878: itm->y=y, itm->x=x;
      00050E F8 02            [12] 1359 	ldhl	sp,	#2
      000510 2A               [ 8] 1360 	ld	a, (hl+)
      000511 23               [ 8] 1361 	inc	hl
      000512 12               [ 8] 1362 	ld	(de), a
      000513 13               [ 8] 1363 	inc	de
      000514 7E               [ 8] 1364 	ld	a, (hl)
      000515 12               [ 8] 1365 	ld	(de), a
                           000516  1366 	C$map.c$169$2_0$282	= .
                                   1367 	.globl	C$map.c$169$2_0$282
                                   1368 ;src/map.c:169: for (uint8_t i = 0; i < digits; i++) {
      000516 F8 07            [12] 1369 	ldhl	sp,	#7
      000518 34               [12] 1370 	inc	(hl)
      000519 C3r37r04         [16] 1371 	jp	00122$
      00051C                       1372 00124$:
                           00051C  1373 	C$map.c$202$2_0$282	= .
                                   1374 	.globl	C$map.c$202$2_0$282
                                   1375 ;src/map.c:202: }
      00051C E8 08            [16] 1376 	add	sp, #8
      00051E E1               [12] 1377 	pop	hl
      00051F E8 04            [16] 1378 	add	sp, #4
      000521 E9               [ 4] 1379 	jp	(hl)
                           000522  1380 	G$draw_depth$0$0	= .
                                   1381 	.globl	G$draw_depth$0$0
                           000522  1382 	C$map.c$204$2_0$295	= .
                                   1383 	.globl	C$map.c$204$2_0$295
                                   1384 ;src/map.c:204: void draw_depth(void){
                                   1385 ;	---------------------------------
                                   1386 ; Function draw_depth
                                   1387 ; ---------------------------------
      000522                       1388 _draw_depth::
      000522 E8 F6            [16] 1389 	add	sp, #-10
                           000524  1390 	C$map.c$206$1_0$295	= .
                                   1391 	.globl	C$map.c$206$1_0$295
                                   1392 ;src/map.c:206: itoa((depth <= EARTH_START) ? 0 : (depth - EARTH_START), string, 10);
      000524 21 00 00         [12] 1393 	ld	hl, #0
      000527 39               [ 8] 1394 	add	hl, sp
      000528 5D               [ 4] 1395 	ld	e, l
      000529 54               [ 4] 1396 	ld	d, h
      00052A 3E 05            [ 8] 1397 	ld	a, #0x05
      00052C 21r00r00         [12] 1398 	ld	hl, #_depth
      00052F 96               [ 8] 1399 	sub	a, (hl)
      000530 38 05            [12] 1400 	jr	C, 00103$
      000532 01 00 00         [12] 1401 	ld	bc, #0x0000
      000535 18 0C            [12] 1402 	jr	00104$
      000537                       1403 00103$:
      000537 FAr00r00         [16] 1404 	ld	a, (#_depth)
      00053A 06 00            [ 8] 1405 	ld	b, #0x00
      00053C C6 FB            [ 8] 1406 	add	a, #0xfb
      00053E 4F               [ 4] 1407 	ld	c, a
      00053F 78               [ 4] 1408 	ld	a, b
      000540 CE FF            [ 8] 1409 	adc	a, #0xff
      000542 47               [ 4] 1410 	ld	b, a
      000543                       1411 00104$:
      000543 3E 0A            [ 8] 1412 	ld	a, #0x0a
      000545 F5               [16] 1413 	push	af
      000546 33               [ 8] 1414 	inc	sp
      000547 D5               [16] 1415 	push	de
      000548 C5               [16] 1416 	push	bc
      000549 CDr00r00         [24] 1417 	call	_itoa
      00054C E8 05            [16] 1418 	add	sp, #5
                           00054E  1419 	C$map.c$207$1_0$295	= .
                                   1420 	.globl	C$map.c$207$1_0$295
                                   1421 ;src/map.c:207: strcat(string, "m");
      00054E 01r85r05         [12] 1422 	ld	bc, #___str_0
      000551 21 00 00         [12] 1423 	ld	hl, #0
      000554 39               [ 8] 1424 	add	hl, sp
      000555 5D               [ 4] 1425 	ld	e, l
      000556 54               [ 4] 1426 	ld	d, h
      000557 CDr00r00         [24] 1427 	call	_strcat
                           00055A  1428 	C$map.c$208$1_0$295	= .
                                   1429 	.globl	C$map.c$208$1_0$295
                                   1430 ;src/map.c:208: draw_text(15,0,"Depth",5,TRUE,0);
      00055A AF               [ 4] 1431 	xor	a, a
      00055B 67               [ 4] 1432 	ld	h, a
      00055C 2E 01            [ 8] 1433 	ld	l, #0x01
      00055E E5               [16] 1434 	push	hl
      00055F 3E 05            [ 8] 1435 	ld	a, #0x05
      000561 F5               [16] 1436 	push	af
      000562 33               [ 8] 1437 	inc	sp
      000563 11r87r05         [12] 1438 	ld	de, #___str_1
      000566 D5               [16] 1439 	push	de
      000567 1E 00            [ 8] 1440 	ld	e, #0x00
      000569 3E 0F            [ 8] 1441 	ld	a, #0x0f
      00056B CDr00r00         [24] 1442 	call	_draw_text
                           00056E  1443 	C$map.c$209$1_0$295	= .
                                   1444 	.globl	C$map.c$209$1_0$295
                                   1445 ;src/map.c:209: draw_text(15,1,string,5,FALSE,0);
      00056E 21 00 00         [12] 1446 	ld	hl, #0
      000571 39               [ 8] 1447 	add	hl, sp
      000572 AF               [ 4] 1448 	xor	a, a
      000573 0F               [ 4] 1449 	rrca
      000574 F5               [16] 1450 	push	af
      000575 AF               [ 4] 1451 	xor	a, a
      000576 3E 05            [ 8] 1452 	ld	a, #0x05
      000578 F5               [16] 1453 	push	af
      000579 33               [ 8] 1454 	inc	sp
      00057A E5               [16] 1455 	push	hl
      00057B 1E 01            [ 8] 1456 	ld	e, #0x01
      00057D 3E 0F            [ 8] 1457 	ld	a, #0x0f
      00057F CDr00r00         [24] 1458 	call	_draw_text
                           000582  1459 	C$map.c$210$1_0$295	= .
                                   1460 	.globl	C$map.c$210$1_0$295
                                   1461 ;src/map.c:210: }
      000582 E8 0A            [16] 1462 	add	sp, #10
                           000584  1463 	C$map.c$210$1_0$295	= .
                                   1464 	.globl	C$map.c$210$1_0$295
                           000584  1465 	XG$draw_depth$0$0	= .
                                   1466 	.globl	XG$draw_depth$0$0
      000584 C9               [16] 1467 	ret
                           000585  1468 Fmap$__str_0$0_0$0 == .
      000585                       1469 ___str_0:
      000585 6D                    1470 	.ascii "m"
      000586 00                    1471 	.db 0x00
                           000587  1472 Fmap$__str_1$0_0$0 == .
      000587                       1473 ___str_1:
      000587 44 65 70 74 68        1474 	.ascii "Depth"
      00058C 00                    1475 	.db 0x00
                           00058D  1476 	G$draw_cargo$0$0	= .
                                   1477 	.globl	G$draw_cargo$0$0
                           00058D  1478 	C$map.c$212$1_0$297	= .
                                   1479 	.globl	C$map.c$212$1_0$297
                                   1480 ;src/map.c:212: void draw_cargo(void){
                                   1481 ;	---------------------------------
                                   1482 ; Function draw_cargo
                                   1483 ; ---------------------------------
      00058D                       1484 _draw_cargo::
      00058D E8 EC            [16] 1485 	add	sp, #-20
                           00058F  1486 	C$map.c$215$1_0$297	= .
                                   1487 	.globl	C$map.c$215$1_0$297
                                   1488 ;src/map.c:215: itoa(player.cargo.current_value, string, 10);
      00058F 21rBBr00         [12] 1489 	ld	hl, #_player + 187
      000592 2A               [ 8] 1490 	ld	a, (hl+)
      000593 4F               [ 4] 1491 	ld	c, a
      000594 46               [ 8] 1492 	ld	b, (hl)
      000595 3E 0A            [ 8] 1493 	ld	a, #0x0a
      000597 F5               [16] 1494 	push	af
      000598 33               [ 8] 1495 	inc	sp
      000599 21 01 00         [12] 1496 	ld	hl, #1
      00059C 39               [ 8] 1497 	add	hl, sp
      00059D E5               [16] 1498 	push	hl
      00059E C5               [16] 1499 	push	bc
      00059F CDr00r00         [24] 1500 	call	_itoa
      0005A2 E8 05            [16] 1501 	add	sp, #5
                           0005A4  1502 	C$map.c$216$1_0$297	= .
                                   1503 	.globl	C$map.c$216$1_0$297
                                   1504 ;src/map.c:216: itoa(player.cargo.max_value, string_max, 10);
      0005A4 21rBDr00         [12] 1505 	ld	hl, #_player + 189
      0005A7 2A               [ 8] 1506 	ld	a, (hl+)
      0005A8 4F               [ 4] 1507 	ld	c, a
      0005A9 46               [ 8] 1508 	ld	b, (hl)
      0005AA 3E 0A            [ 8] 1509 	ld	a, #0x0a
      0005AC F5               [16] 1510 	push	af
      0005AD 33               [ 8] 1511 	inc	sp
      0005AE 21 0B 00         [12] 1512 	ld	hl, #11
      0005B1 39               [ 8] 1513 	add	hl, sp
      0005B2 E5               [16] 1514 	push	hl
      0005B3 C5               [16] 1515 	push	bc
      0005B4 CDr00r00         [24] 1516 	call	_itoa
      0005B7 E8 05            [16] 1517 	add	sp, #5
                           0005B9  1518 	C$map.c$217$1_0$297	= .
                                   1519 	.globl	C$map.c$217$1_0$297
                                   1520 ;src/map.c:217: strcat(string, "/");
      0005B9 01r00r06         [12] 1521 	ld	bc, #___str_2
      0005BC 21 00 00         [12] 1522 	ld	hl, #0
      0005BF 39               [ 8] 1523 	add	hl, sp
      0005C0 5D               [ 4] 1524 	ld	e, l
      0005C1 54               [ 4] 1525 	ld	d, h
      0005C2 CDr00r00         [24] 1526 	call	_strcat
                           0005C5  1527 	C$map.c$218$1_0$297	= .
                                   1528 	.globl	C$map.c$218$1_0$297
                                   1529 ;src/map.c:218: strcat(string, string_max);
      0005C5 21 0A 00         [12] 1530 	ld	hl, #10
      0005C8 39               [ 8] 1531 	add	hl, sp
      0005C9 4D               [ 4] 1532 	ld	c, l
      0005CA 44               [ 4] 1533 	ld	b, h
      0005CB 21 00 00         [12] 1534 	ld	hl, #0
      0005CE 39               [ 8] 1535 	add	hl, sp
      0005CF 5D               [ 4] 1536 	ld	e, l
      0005D0 54               [ 4] 1537 	ld	d, h
      0005D1 CDr00r00         [24] 1538 	call	_strcat
                           0005D4  1539 	C$map.c$219$1_0$297	= .
                                   1540 	.globl	C$map.c$219$1_0$297
                                   1541 ;src/map.c:219: draw_text(9,0,"Cargo",5,TRUE,0);
      0005D4 AF               [ 4] 1542 	xor	a, a
      0005D5 67               [ 4] 1543 	ld	h, a
      0005D6 2E 01            [ 8] 1544 	ld	l, #0x01
      0005D8 E5               [16] 1545 	push	hl
      0005D9 3E 05            [ 8] 1546 	ld	a, #0x05
      0005DB F5               [16] 1547 	push	af
      0005DC 33               [ 8] 1548 	inc	sp
      0005DD 11r02r06         [12] 1549 	ld	de, #___str_3
      0005E0 D5               [16] 1550 	push	de
      0005E1 1E 00            [ 8] 1551 	ld	e, #0x00
      0005E3 3E 09            [ 8] 1552 	ld	a, #0x09
      0005E5 CDr00r00         [24] 1553 	call	_draw_text
                           0005E8  1554 	C$map.c$220$1_0$297	= .
                                   1555 	.globl	C$map.c$220$1_0$297
                                   1556 ;src/map.c:220: draw_text(9,1,string,5,TRUE,0);
      0005E8 21 00 00         [12] 1557 	ld	hl, #0
      0005EB 39               [ 8] 1558 	add	hl, sp
      0005EC AF               [ 4] 1559 	xor	a, a
      0005ED 57               [ 4] 1560 	ld	d, a
      0005EE 1E 01            [ 8] 1561 	ld	e, #0x01
      0005F0 D5               [16] 1562 	push	de
      0005F1 3E 05            [ 8] 1563 	ld	a, #0x05
      0005F3 F5               [16] 1564 	push	af
      0005F4 33               [ 8] 1565 	inc	sp
      0005F5 E5               [16] 1566 	push	hl
      0005F6 1E 01            [ 8] 1567 	ld	e, #0x01
      0005F8 3E 09            [ 8] 1568 	ld	a, #0x09
      0005FA CDr00r00         [24] 1569 	call	_draw_text
                           0005FD  1570 	C$map.c$221$1_0$297	= .
                                   1571 	.globl	C$map.c$221$1_0$297
                                   1572 ;src/map.c:221: }
      0005FD E8 14            [16] 1573 	add	sp, #20
                           0005FF  1574 	C$map.c$221$1_0$297	= .
                                   1575 	.globl	C$map.c$221$1_0$297
                           0005FF  1576 	XG$draw_cargo$0$0	= .
                                   1577 	.globl	XG$draw_cargo$0$0
      0005FF C9               [16] 1578 	ret
                           000600  1579 Fmap$__str_2$0_0$0 == .
      000600                       1580 ___str_2:
      000600 2F                    1581 	.ascii "/"
      000601 00                    1582 	.db 0x00
                           000602  1583 Fmap$__str_3$0_0$0 == .
      000602                       1584 ___str_3:
      000602 43 61 72 67 6F        1585 	.ascii "Cargo"
      000607 00                    1586 	.db 0x00
                           000608  1587 	G$draw_fuel$0$0	= .
                                   1588 	.globl	G$draw_fuel$0$0
                           000608  1589 	C$map.c$223$1_0$299	= .
                                   1590 	.globl	C$map.c$223$1_0$299
                                   1591 ;src/map.c:223: void draw_fuel(void){
                                   1592 ;	---------------------------------
                                   1593 ; Function draw_fuel
                                   1594 ; ---------------------------------
      000608                       1595 _draw_fuel::
                           000608  1596 	C$map.c$224$1_0$299	= .
                                   1597 	.globl	C$map.c$224$1_0$299
                                   1598 ;src/map.c:224: progressbar(player.fuel.current_value, player.fuel.max_value, 3, 35, 44, 20);
      000608 21r12r00         [12] 1599 	ld	hl, #_player + 18
      00060B 2A               [ 8] 1600 	ld	a, (hl+)
      00060C 4F               [ 4] 1601 	ld	c, a
      00060D 46               [ 8] 1602 	ld	b, (hl)
      00060E 21r10r00         [12] 1603 	ld	hl, #_player + 16
      000611 2A               [ 8] 1604 	ld	a,	(hl+)
      000612 66               [ 8] 1605 	ld	h, (hl)
                                   1606 ;	spillPairReg hl
      000613 6F               [ 4] 1607 	ld	l, a
                                   1608 ;	spillPairReg hl
                                   1609 ;	spillPairReg hl
      000614 11 2C 14         [12] 1610 	ld	de, #0x142c
      000617 D5               [16] 1611 	push	de
      000618 11 03 23         [12] 1612 	ld	de, #0x2303
      00061B D5               [16] 1613 	push	de
      00061C 5D               [ 4] 1614 	ld	e, l
      00061D 54               [ 4] 1615 	ld	d, h
      00061E CDr00r04         [24] 1616 	call	_progressbar
                           000621  1617 	C$map.c$225$1_0$299	= .
                                   1618 	.globl	C$map.c$225$1_0$299
                                   1619 ;src/map.c:225: }
                           000621  1620 	C$map.c$225$1_0$299	= .
                                   1621 	.globl	C$map.c$225$1_0$299
                           000621  1622 	XG$draw_fuel$0$0	= .
                                   1623 	.globl	XG$draw_fuel$0$0
      000621 C9               [16] 1624 	ret
                           000622  1625 	G$draw_hull$0$0	= .
                                   1626 	.globl	G$draw_hull$0$0
                           000622  1627 	C$map.c$226$1_0$301	= .
                                   1628 	.globl	C$map.c$226$1_0$301
                                   1629 ;src/map.c:226: void draw_hull(void){
                                   1630 ;	---------------------------------
                                   1631 ; Function draw_hull
                                   1632 ; ---------------------------------
      000622                       1633 _draw_hull::
                           000622  1634 	C$map.c$227$1_0$301	= .
                                   1635 	.globl	C$map.c$227$1_0$301
                                   1636 ;src/map.c:227: progressbar(player.hull.current_value, player.hull.max_value, 2, 32, 12, 20);
      000622 21r4Br00         [12] 1637 	ld	hl, #_player + 75
      000625 2A               [ 8] 1638 	ld	a, (hl+)
      000626 4F               [ 4] 1639 	ld	c, a
      000627 46               [ 8] 1640 	ld	b, (hl)
      000628 21r49r00         [12] 1641 	ld	hl, #_player + 73
      00062B 2A               [ 8] 1642 	ld	a,	(hl+)
      00062C 66               [ 8] 1643 	ld	h, (hl)
                                   1644 ;	spillPairReg hl
      00062D 6F               [ 4] 1645 	ld	l, a
                                   1646 ;	spillPairReg hl
                                   1647 ;	spillPairReg hl
      00062E 11 0C 14         [12] 1648 	ld	de, #0x140c
      000631 D5               [16] 1649 	push	de
      000632 11 02 20         [12] 1650 	ld	de, #0x2002
      000635 D5               [16] 1651 	push	de
      000636 5D               [ 4] 1652 	ld	e, l
      000637 54               [ 4] 1653 	ld	d, h
      000638 CDr00r04         [24] 1654 	call	_progressbar
                           00063B  1655 	C$map.c$228$1_0$301	= .
                                   1656 	.globl	C$map.c$228$1_0$301
                                   1657 ;src/map.c:228: }
                           00063B  1658 	C$map.c$228$1_0$301	= .
                                   1659 	.globl	C$map.c$228$1_0$301
                           00063B  1660 	XG$draw_hull$0$0	= .
                                   1661 	.globl	XG$draw_hull$0$0
      00063B C9               [16] 1662 	ret
                           00063C  1663 	G$draw_character$0$0	= .
                                   1664 	.globl	G$draw_character$0$0
                           00063C  1665 	C$map.c$231$1_0$303	= .
                                   1666 	.globl	C$map.c$231$1_0$303
                                   1667 ;src/map.c:231: void draw_character(void){
                                   1668 ;	---------------------------------
                                   1669 ; Function draw_character
                                   1670 ; ---------------------------------
      00063C                       1671 _draw_character::
                           00063C  1672 	C$map.c$232$1_0$303	= .
                                   1673 	.globl	C$map.c$232$1_0$303
                                   1674 ;src/map.c:232: set_sprite_data(CHARSTART, 16, rover_tiles);
      00063C 11r00r00         [12] 1675 	ld	de, #_rover_tiles
      00063F D5               [16] 1676 	push	de
      000640 21 01 10         [12] 1677 	ld	hl, #0x1001
      000643 E5               [16] 1678 	push	hl
      000644 CDr00r00         [24] 1679 	call	_set_sprite_data
      000647 E8 04            [16] 1680 	add	sp, #4
                           000649  1681 	C$map.c$233$1_0$303	= .
                                   1682 	.globl	C$map.c$233$1_0$303
                                   1683 ;src/map.c:233: draw_metasprite(direction_prev);
      000649 21r00r00         [12] 1684 	ld	hl, #_direction_prev
      00064C 7E               [ 8] 1685 	ld	a, (hl)
                           00064D  1686 	C$map.c$234$1_0$303	= .
                                   1687 	.globl	C$map.c$234$1_0$303
                                   1688 ;src/map.c:234: }
                           00064D  1689 	C$map.c$234$1_0$303	= .
                                   1690 	.globl	C$map.c$234$1_0$303
                           00064D  1691 	XG$draw_character$0$0	= .
                                   1692 	.globl	XG$draw_character$0$0
      00064D C3r00r00         [16] 1693 	jp	_draw_metasprite
                           000650  1694 	G$init_nav$0$0	= .
                                   1695 	.globl	G$init_nav$0$0
                           000650  1696 	C$map.c$236$1_0$305	= .
                                   1697 	.globl	C$map.c$236$1_0$305
                                   1698 ;src/map.c:236: void init_nav(void){
                                   1699 ;	---------------------------------
                                   1700 ; Function init_nav
                                   1701 ; ---------------------------------
      000650                       1702 _init_nav::
                           000650  1703 	C$map.c$237$1_0$305	= .
                                   1704 	.globl	C$map.c$237$1_0$305
                                   1705 ;src/map.c:237: set_win_tiles(0,0,20,3,nav_map);
      000650 11r00r00         [12] 1706 	ld	de, #_nav_map
      000653 D5               [16] 1707 	push	de
      000654 21 14 03         [12] 1708 	ld	hl, #0x314
      000657 E5               [16] 1709 	push	hl
      000658 AF               [ 4] 1710 	xor	a, a
      000659 0F               [ 4] 1711 	rrca
      00065A F5               [16] 1712 	push	af
      00065B CDr00r00         [24] 1713 	call	_set_win_tiles
      00065E E8 06            [16] 1714 	add	sp, #6
                                   1715 ;/usr/local/opt/gbdk/include/gb/gb.h:1656: WX_REG=x, WY_REG=y;
      000660 3E 07            [ 8] 1716 	ld	a, #0x07
      000662 E0r00            [12] 1717 	ldh	(_WX_REG + 0), a
      000664 AF               [ 4] 1718 	xor	a, a
      000665 E0r00            [12] 1719 	ldh	(_WY_REG + 0), a
                           000667  1720 	C$map.c$238$3_0$305	= .
                                   1721 	.globl	C$map.c$238$3_0$305
                                   1722 ;src/map.c:238: move_win(7, 0); //124
                           000667  1723 	C$map.c$239$3_0$305	= .
                                   1724 	.globl	C$map.c$239$3_0$305
                                   1725 ;src/map.c:239: }
                           000667  1726 	C$map.c$239$3_0$305	= .
                                   1727 	.globl	C$map.c$239$3_0$305
                           000667  1728 	XG$init_nav$0$0	= .
                                   1729 	.globl	XG$init_nav$0$0
      000667 C9               [16] 1730 	ret
                           000668  1731 	G$init_tiles$0$0	= .
                                   1732 	.globl	G$init_tiles$0$0
                           000668  1733 	C$map.c$241$3_0$310	= .
                                   1734 	.globl	C$map.c$241$3_0$310
                                   1735 ;src/map.c:241: void init_tiles(void){
                                   1736 ;	---------------------------------
                                   1737 ; Function init_tiles
                                   1738 ; ---------------------------------
      000668                       1739 _init_tiles::
                           000668  1740 	C$map.c$242$1_0$310	= .
                                   1741 	.globl	C$map.c$242$1_0$310
                                   1742 ;src/map.c:242: set_bkg_data(TILESTART, 28, tile_tiles);
      000668 11r00r00         [12] 1743 	ld	de, #_tile_tiles
      00066B D5               [16] 1744 	push	de
      00066C 21 5C 1C         [12] 1745 	ld	hl, #0x1c5c
      00066F E5               [16] 1746 	push	hl
      000670 CDr00r00         [24] 1747 	call	_set_bkg_data
      000673 E8 04            [16] 1748 	add	sp, #4
                           000675  1749 	C$map.c$243$1_0$310	= .
                                   1750 	.globl	C$map.c$243$1_0$310
                                   1751 ;src/map.c:243: set_bkg_data(NAVSTART, nav_TILE_COUNT, nav_tiles);
      000675 11r00r00         [12] 1752 	ld	de, #_nav_tiles
      000678 D5               [16] 1753 	push	de
      000679 21 80 0C         [12] 1754 	ld	hl, #0xc80
      00067C E5               [16] 1755 	push	hl
      00067D CDr00r00         [24] 1756 	call	_set_bkg_data
      000680 E8 04            [16] 1757 	add	sp, #4
                           000682  1758 	C$map.c$244$1_0$310	= .
                                   1759 	.globl	C$map.c$244$1_0$310
                                   1760 ;src/map.c:244: set_4bkg_tiles(level_array, 0, 0, 16, 16);
      000682 21 10 10         [12] 1761 	ld	hl, #0x1010
      000685 E5               [16] 1762 	push	hl
      000686 AF               [ 4] 1763 	xor	a, a
      000687 F5               [16] 1764 	push	af
      000688 33               [ 8] 1765 	inc	sp
      000689 AF               [ 4] 1766 	xor	a, a
      00068A 11r00r00         [12] 1767 	ld	de, #_level_array
      00068D CDr99r00         [24] 1768 	call	_set_4bkg_tiles
                           000690  1769 	C$map.c$245$1_0$310	= .
                                   1770 	.globl	C$map.c$245$1_0$310
                                   1771 ;src/map.c:245: }
                           000690  1772 	C$map.c$245$1_0$310	= .
                                   1773 	.globl	C$map.c$245$1_0$310
                           000690  1774 	XG$init_tiles$0$0	= .
                                   1775 	.globl	XG$init_tiles$0$0
      000690 C9               [16] 1776 	ret
                           000691  1777 	G$init_progressbar$0$0	= .
                                   1778 	.globl	G$init_progressbar$0$0
                           000691  1779 	C$map.c$247$1_0$312	= .
                                   1780 	.globl	C$map.c$247$1_0$312
                                   1781 ;src/map.c:247: void init_progressbar(void){
                                   1782 ;	---------------------------------
                                   1783 ; Function init_progressbar
                                   1784 ; ---------------------------------
      000691                       1785 _init_progressbar::
                           000691  1786 	C$map.c$248$1_0$312	= .
                                   1787 	.globl	C$map.c$248$1_0$312
                                   1788 ;src/map.c:248: set_sprite_data(SPRITE_TILE_1_8, progressbar_TILE_COUNT, progressbar_tiles);
      000691 11r00r00         [12] 1789 	ld	de, #_progressbar_tiles
      000694 D5               [16] 1790 	push	de
      000695 21 20 09         [12] 1791 	ld	hl, #0x920
      000698 E5               [16] 1792 	push	hl
      000699 CDr00r00         [24] 1793 	call	_set_sprite_data
      00069C E8 04            [16] 1794 	add	sp, #4
                           00069E  1795 	C$map.c$249$1_0$312	= .
                                   1796 	.globl	C$map.c$249$1_0$312
                                   1797 ;src/map.c:249: progressbar(player.hull.current_value, player.hull.max_value, 2, 32, 12, 20);
      00069E 21r4Br00         [12] 1798 	ld	hl, #_player + 75
      0006A1 2A               [ 8] 1799 	ld	a, (hl+)
      0006A2 4F               [ 4] 1800 	ld	c, a
      0006A3 46               [ 8] 1801 	ld	b, (hl)
      0006A4 21r49r00         [12] 1802 	ld	hl, #_player + 73
      0006A7 2A               [ 8] 1803 	ld	a,	(hl+)
      0006A8 66               [ 8] 1804 	ld	h, (hl)
                                   1805 ;	spillPairReg hl
      0006A9 6F               [ 4] 1806 	ld	l, a
                                   1807 ;	spillPairReg hl
                                   1808 ;	spillPairReg hl
      0006AA 11 0C 14         [12] 1809 	ld	de, #0x140c
      0006AD D5               [16] 1810 	push	de
      0006AE 11 02 20         [12] 1811 	ld	de, #0x2002
      0006B1 D5               [16] 1812 	push	de
      0006B2 5D               [ 4] 1813 	ld	e, l
      0006B3 54               [ 4] 1814 	ld	d, h
      0006B4 CDr00r04         [24] 1815 	call	_progressbar
                           0006B7  1816 	C$map.c$250$1_0$312	= .
                                   1817 	.globl	C$map.c$250$1_0$312
                                   1818 ;src/map.c:250: }
                           0006B7  1819 	C$map.c$250$1_0$312	= .
                                   1820 	.globl	C$map.c$250$1_0$312
                           0006B7  1821 	XG$init_progressbar$0$0	= .
                                   1822 	.globl	XG$init_progressbar$0$0
      0006B7 C9               [16] 1823 	ret
                                   1824 	.area _CODE_1
                                   1825 	.area _INITIALIZER
                                   1826 	.area _CABS (ABS)
